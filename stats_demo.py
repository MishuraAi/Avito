"""
üìä –î–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞–º Avito AI Responder
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: C:/avito/stats_demo.py

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ 
—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ò–ò-–±–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞–º.
"""

from datetime import datetime, timedelta
from pydantic import BaseModel
from typing import List, Dict, Any
import random
import json

class DailyStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"""
    date: str
    messages_received: int
    responses_sent: int
    interested_buyers: int
    time_saved_minutes: int
    avg_response_time: str
    conversion_rate: float

class WeeklyStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    total_messages: int
    total_responses: int
    total_interested: int
    time_saved_hours: float
    best_day: str
    conversion_rate: float

class MessageTypeStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    price_questions: int
    availability_checks: int
    meeting_requests: int
    general_info: int
    negotiation: int
    spam_filtered: int

class ROICalculator(BaseModel):
    """–†–∞—Å—á–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏"""
    manual_time_per_response_min: int
    bot_response_time_sec: int
    daily_time_saved_min: int
    monthly_time_saved_hours: float
    estimated_lost_leads_percent: int
    monthly_cost_bot: int
    estimated_monthly_savings: int

def generate_realistic_daily_stats() -> DailyStats:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    
    # –ë–∞–∑–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞)
    messages = random.randint(15, 28)
    responses = messages  # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ
    interested = int(messages * random.uniform(0.35, 0.65))  # 35-65% –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö
    time_saved = messages * random.randint(3, 6)  # 3-6 –º–∏–Ω –Ω–∞ –æ—Ç–≤–µ—Ç
    
    return DailyStats(
        date=datetime.now().strftime("%d.%m.%Y"),
        messages_received=messages,
        responses_sent=responses,
        interested_buyers=interested,
        time_saved_minutes=time_saved,
        avg_response_time="2.3 —Å–µ–∫",
        conversion_rate=round((interested / messages) * 100, 1)
    )

def generate_weekly_stats() -> WeeklyStats:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    
    # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_messages = random.randint(85, 145)
    total_responses = total_messages
    total_interested = int(total_messages * random.uniform(0.40, 0.60))
    time_saved = round(total_messages * random.uniform(4.5, 6.5) / 60, 1)  # –í —á–∞—Å–∞—Ö
    
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    best_day = random.choice(days)
    
    return WeeklyStats(
        total_messages=total_messages,
        total_responses=total_responses,
        total_interested=total_interested,
        time_saved_hours=time_saved,
        best_day=best_day,
        conversion_rate=round((total_interested / total_messages) * 100, 1)
    )

def generate_message_types() -> MessageTypeStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    total = random.randint(85, 145)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ê–≤–∏—Ç–æ)
    price = int(total * 0.35)      # 35% - –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–µ
    availability = int(total * 0.25)  # 25% - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    meeting = int(total * 0.20)    # 20% - –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    info = int(total * 0.15)       # 15% - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    negotiation = int(total * 0.08) # 8% - —Ç–æ—Ä–≥
    spam = random.randint(2, 5)    # –ù–µ–º–Ω–æ–≥–æ —Å–ø–∞–º–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
    
    return MessageTypeStats(
        price_questions=price,
        availability_checks=availability,
        meeting_requests=meeting,
        general_info=info,
        negotiation=negotiation,
        spam_filtered=spam
    )

def calculate_roi() -> ROICalculator:
    """–†–∞—Å—á–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    
    daily_messages = random.randint(15, 28)
    manual_time = 4  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
    daily_savings = daily_messages * manual_time
    monthly_savings_hours = round(daily_savings * 30 / 60, 1)
    
    # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)
    hourly_rate = 500  # –†—É–±–ª–µ–π –≤ —á–∞—Å (–≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞)
    monthly_savings_money = int(monthly_savings_hours * hourly_rate)
    
    return ROICalculator(
        manual_time_per_response_min=manual_time,
        bot_response_time_sec=random.randint(2, 4),
        daily_time_saved_min=daily_savings,
        monthly_time_saved_hours=monthly_savings_hours,
        estimated_lost_leads_percent=random.randint(20, 35),
        monthly_cost_bot=2990,  # –¶–µ–Ω–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        estimated_monthly_savings=monthly_savings_money
    )

def generate_impressive_facts() -> Dict[str, Any]:
    """–í–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    return {
        "response_speed": {
            "bot": "2-3 —Å–µ–∫—É–Ω–¥—ã",
            "human_average": "2-4 —á–∞—Å–∞",
            "improvement": "–í 2400 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!"
        },
        "availability": {
            "bot": "24/7 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö",
            "human": "8-12 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å",
            "missed_opportunities": "–£–ø—É—Å–∫–∞–µ—Ç–µ 60% —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ—á—å—é –∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ"
        },
        "consistency": {
            "bot": "–í—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç",
            "human": "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏",
            "quality": "100% –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
        },
        "cost_per_response": {
            "bot": "~2 —Ä—É–±–ª—è –∑–∞ –æ—Ç–≤–µ—Ç",
            "human": "~35 —Ä—É–±–ª–µ–π –∑–∞ –æ—Ç–≤–µ—Ç (–≤—Ä–µ–º—è + —É–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏)",
            "savings": "–≠–∫–æ–Ω–æ–º–∏—è 94% –Ω–∞ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ"
        }
    }

def generate_success_stories() -> List[Dict[str, str]]:
    """–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ (–≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)"""
    
    return [
        {
            "client": "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ '–£—é—Ç'",
            "result": "–£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ 43% –∑–∞ –º–µ—Å—è—Ü",
            "quote": "–†–∞–Ω—å—à–µ —Ç–µ—Ä—è–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–æ—á—å—é, —Ç–µ–ø–µ—Ä—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!"
        },
        {
            "client": "–ê–≤—Ç–æ—Å–∞–ª–æ–Ω '–ü—Ä–µ–º–∏—É–º –ê–≤—Ç–æ'", 
            "result": "–°—ç–∫–æ–Ω–æ–º–∏–ª–∏ 15 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            "quote": "–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–ø–µ—Ä—å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞–º–∏, –∞ –Ω–µ —Ä—É—Ç–∏–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"
        },
        {
            "client": "–ú–µ–±–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω '–ö–æ–º—Ñ–æ—Ä—Ç'",
            "result": "–°–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å 4 —á–∞—Å–æ–≤ –¥–æ 3 —Å–µ–∫—É–Ω–¥",
            "quote": "–ö–ª–∏–µ–Ω—Ç—ã –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!"
        }
    ]

def generate_demo_stats() -> Dict[str, Any]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ–π –¥–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    Returns:
        Dict: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞–º
    """
    
    daily = generate_realistic_daily_stats()
    weekly = generate_weekly_stats() 
    message_types = generate_message_types()
    roi = calculate_roi()
    facts = generate_impressive_facts()
    stories = generate_success_stories()
    
    return {
        "timestamp": datetime.now().isoformat(),
        "last_updated": datetime.now().strftime("%H:%M:%S"),
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "today": daily.model_dump(),
        "week": weekly.model_dump(),
        "message_types": message_types.model_dump(),
        "roi_calculation": roi.model_dump(),
        
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        "impressive_facts": facts,
        "success_stories": stories,
        
        # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "demo_mode": True,
        "version": "1.0.0",
        "generated_at": datetime.now().strftime("%d.%m.%Y %H:%M")
    }

def get_quick_pitch() -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    daily = generate_realistic_daily_stats()
    roi = calculate_roi()
    
    return {
        "headline": "ü§ñ –ò–ò-–±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –∑–∞ –≤–∞—Å –Ω–∞ –ê–≤–∏—Ç–æ",
        "value_proposition": "–ù–µ —Ç–µ—Ä—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ —Å–ø–∏—Ç–µ –∏–ª–∏ –∑–∞–Ω—è—Ç—ã!",
        
        "key_benefits": [
            f"‚ö° –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ {roi.bot_response_time_sec} —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ {roi.manual_time_per_response_min} –º–∏–Ω—É—Ç",
            f"üí∞ –≠–∫–æ–Ω–æ–º–∏—Ç {daily.time_saved_minutes} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
            f"üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ {roi.estimated_lost_leads_percent}%",
            "üåô –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö",
            f"üíµ –û–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ {roi.monthly_cost_bot // (roi.estimated_monthly_savings // 30)} –¥–Ω–µ–π"
        ],
        
        "today_results": {
            "messages": daily.messages_received,
            "responses": daily.responses_sent,
            "interested": daily.interested_buyers,
            "conversion": f"{daily.conversion_rate}%",
            "time_saved": f"{daily.time_saved_minutes} –º–∏–Ω"
        },
        
        "pricing": {
            "cost_per_month": f"{roi.monthly_cost_bot:,} ‚ÇΩ",
            "cost_per_response": "~2 ‚ÇΩ",
            "estimated_savings": f"{roi.estimated_monthly_savings:,} ‚ÇΩ/–º–µ—Å",
            "roi_months": round(roi.monthly_cost_bot / roi.estimated_monthly_savings, 1)
        }
    }

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "generate_demo_stats",
    "get_quick_pitch", 
    "generate_realistic_daily_stats",
    "generate_weekly_stats",
    "calculate_roi"
]

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    stats = generate_demo_stats()
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['today']['date']}")
    print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['today']['messages_received']}")
    print(f"‚ö° –í—Ä–µ–º—è —ç–∫–æ–Ω–æ–º–∏–∏: {stats['today']['time_saved_minutes']} –º–∏–Ω")
    print(f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['today']['conversion_rate']}%")
    
    pitch = get_quick_pitch()
    print(f"\nüéØ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
    print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {pitch['pricing']['cost_per_month']}")
    print(f"üìà –≠–∫–æ–Ω–æ–º–∏—è: {pitch['pricing']['estimated_savings']}")
    
    print(f"\n‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
