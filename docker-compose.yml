# üê≥ Docker Compose –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Avito AI Responder
version: '3.8'

services:
  # üêò PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15-alpine
    container_name: avito_postgres_dev
    environment:
      POSTGRES_DB: avito_ai_db
      POSTGRES_USER: avito_user
      POSTGRES_PASSWORD: avito_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      - postgres_data:/var/lib/postgresql/data
      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U avito_user -d avito_ai_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - avito_network

  # üî¥ Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  redis:
    image: redis:7-alpine
    container_name: avito_redis_dev
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - avito_network

  # ü§ñ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: avito_app_dev
    environment:
      # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      DEBUG: "true"
      ENVIRONMENT: development
      
      # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      DATABASE_URL: postgresql://avito_user:avito_password@postgres:5432/avito_ai_db
      TEST_DATABASE_URL: postgresql://avito_user:avito_password@postgres:5432/avito_ai_test_db
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # API –∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!)
      GEMINI_API_KEY: ${GEMINI_API_KEY:-your-gemini-api-key-here}
      AVITO_CLIENT_ID: ${AVITO_CLIENT_ID:-your-avito-client-id}
      AVITO_CLIENT_SECRET: ${AVITO_CLIENT_SECRET:-your-avito-client-secret}
      
      # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-change-in-production}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS
      CORS_ORIGINS: "http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000,http://127.0.0.1:8000"
      
      # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      LOG_LEVEL: DEBUG
      LOG_FILE_PATH: /app/data/logs/app.log
      
      # –°–µ—Ä–≤–µ—Ä
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8000
    
    ports:
      - "8000:8000"
    
    volumes:
      # –ú–æ–Ω—Ç–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è hot reload
      - .:/app
      - /app/__pycache__
      # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      - app_data:/app/data
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    networks:
      - avito_network

# üì¶ Volumes –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

# üåê –°–µ—Ç–∏
networks:
  avito_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16