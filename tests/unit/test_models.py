"""
üß™ Unit —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–¢–µ—Å—Ç–∏—Ä—É–µ–º:
- –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
- –í–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π
- –û—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
- –ú–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–µ–π
"""

import pytest
from datetime import datetime, timezone
from uuid import UUID

from src.database.models.users import User, Seller, UserProfile, SellerSettings
from src.database.models.messages import Message, Conversation, MessageTemplate
from src.utils.helpers import hash_password


class TestUserModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ User"""
    
    def test_create_user(self, test_db_session):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = User(
            email="test@example.com",
            password_hash=hash_password("password123"),
            first_name="John",
            last_name="Doe",
            phone="+7900123456"
        )
        
        test_db_session.add(user)
        test_db_session.commit()
        test_db_session.refresh(user)
        
        assert user.id is not None
        assert isinstance(user.id, UUID)
        assert user.email == "test@example.com"
        assert user.first_name == "John"
        assert user.last_name == "Doe"
        assert user.phone == "+7900123456"
        assert user.is_active is True
        assert user.created_at is not None
        assert user.updated_at is not None
    
    def test_user_unique_email(self, test_db_session):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email"""
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user1 = User(
            email="unique@example.com",
            password_hash=hash_password("password123"),
            first_name="First"
        )
        test_db_session.add(user1)
        test_db_session.commit()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Å —Ç–µ–º –∂–µ email
        user2 = User(
            email="unique@example.com",
            password_hash=hash_password("password456"),
            first_name="Second"
        )
        test_db_session.add(user2)
        
        # –î–æ–ª–∂–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞
        with pytest.raises(Exception):
            test_db_session.commit()
    
    def test_user_timestamps(self, test_db_session):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
        user = User(
            email="timestamps@example.com",
            password_hash=hash_password("password123"),
            first_name="Test"
        )
        
        test_db_session.add(user)
        test_db_session.commit()
        test_db_session.refresh(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        assert user.created_at is not None
        assert user.updated_at is not None
        assert user.created_at == user.updated_at
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_created = user.created_at
        user.first_name = "Updated"
        test_db_session.commit()
        test_db_session.refresh(user)
        
        # created_at –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, updated_at –¥–æ–ª–∂–µ–Ω
        assert user.created_at == original_created
        assert user.updated_at > original_created


class TestSellerModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ Seller"""
    
    def test_create_seller(self, test_db_session):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        seller = Seller(
            email="seller@example.com",
            password_hash=hash_password("password123"),
            first_name="Jane",
            last_name="Smith",
            company_name="Test Company",
            subscription_type="premium"
        )
        
        test_db_session.add(seller)
        test_db_session.commit()
        test_db_session.refresh(seller)
        
        assert seller.id is not None
        assert seller.company_name == "Test Company"
        assert seller.subscription_type == "premium"
        assert seller.daily_message_limit == 1000  # Default –¥–ª—è premium
        assert seller.api_requests_used == 0
        assert seller.ai_enabled is True
    
    def test_seller_subscription_limits(self, test_db_session):
        """–¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        # Free –ø–æ–¥–ø–∏—Å–∫–∞
        free_seller = Seller(
            email="free@example.com",
            password_hash=hash_password("password123"),
            first_name="Free",
            subscription_type="free"
        )
        
        test_db_session.add(free_seller)
        test_db_session.commit()
        test_db_session.refresh(free_seller)
        
        assert free_seller.daily_message_limit == 50  # Default –¥–ª—è free
        
        # Enterprise –ø–æ–¥–ø–∏—Å–∫–∞
        enterprise_seller = Seller(
            email="enterprise@example.com",
            password_hash=hash_password("password123"),
            first_name="Enterprise",
            subscription_type="enterprise"
        )
        
        test_db_session.add(enterprise_seller)
        test_db_session.commit()
        test_db_session.refresh(enterprise_seller)
        
        assert enterprise_seller.daily_message_limit == 10000  # Default –¥–ª—è enterprise


class TestMessageModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ Message"""
    
    def test_create_message(self, test_db_session, create_test_user, create_test_seller):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = create_test_user()
        seller = create_test_seller()
        
        message = Message(
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            sender_id=user.id,
            recipient_id=seller.id,
            message_type="user_to_seller",
            platform="avito",
            external_message_id="ext_123"
        )
        
        test_db_session.add(message)
        test_db_session.commit()
        test_db_session.refresh(message)
        
        assert message.id is not None
        assert message.content == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert message.sender_id == user.id
        assert message.recipient_id == seller.id
        assert message.message_type == "user_to_seller"
        assert message.status == "sent"  # Default
        assert message.platform == "avito"
        assert message.is_ai_processed is False
        assert message.created_at is not None
    
    def test_message_ai_analysis(self, test_db_session, create_test_user, create_test_seller):
        """–¢–µ—Å—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = create_test_user()
        seller = create_test_seller()
        
        message = Message(
            content="–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä, –µ—Å—Ç—å —Å–∫–∏–¥–∫–∏?",
            sender_id=user.id,
            recipient_id=seller.id,
            message_type="user_to_seller",
            ai_analysis={
                "intent": "price_inquiry",
                "sentiment": "positive",
                "urgency": "medium",
                "suggested_response": "–î–∞, –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É 10%"
            },
            ai_confidence=0.85,
            is_ai_processed=True
        )
        
        test_db_session.add(message)
        test_db_session.commit()
        test_db_session.refresh(message)
        
        assert message.is_ai_processed is True
        assert message.ai_confidence == 0.85
        assert message.ai_analysis["intent"] == "price_inquiry"
        assert message.ai_analysis["sentiment"] == "positive"


class TestConversationModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ Conversation"""
    
    def test_create_conversation(self, test_db_session, create_test_user, create_test_seller):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        user = create_test_user()
        seller = create_test_seller()
        
        conversation = Conversation(
            user_id=user.id,
            seller_id=seller.id,
            platform="avito",
            external_conversation_id="conv_123",
            status="active"
        )
        
        test_db_session.add(conversation)
        test_db_session.commit()
        test_db_session.refresh(conversation)
        
        assert conversation.id is not None
        assert conversation.user_id == user.id
        assert conversation.seller_id == seller.id
        assert conversation.platform == "avito"
        assert conversation.status == "active"
        assert conversation.message_count == 0
        assert conversation.last_activity_at is not None
    
    def test_conversation_messages_relationship(self, test_db_session, create_test_user, create_test_seller):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –¥–∏–∞–ª–æ–≥–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        user = create_test_user()
        seller = create_test_seller()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        conversation = Conversation(
            user_id=user.id,
            seller_id=seller.id,
            platform="avito"
        )
        test_db_session.add(conversation)
        test_db_session.commit()
        test_db_session.refresh(conversation)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
        message1 = Message(
            content="–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            sender_id=user.id,
            recipient_id=seller.id,
            conversation_id=conversation.id,
            message_type="user_to_seller"
        )
        
        message2 = Message(
            content="–û—Ç–≤–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞",
            sender_id=seller.id,
            recipient_id=user.id,
            conversation_id=conversation.id,
            message_type="seller_to_user"
        )
        
        test_db_session.add_all([message1, message2])
        test_db_session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        conversation.message_count = 2
        test_db_session.commit()
        test_db_session.refresh(conversation)
        
        assert conversation.message_count == 2


class TestMessageTemplateModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ MessageTemplate"""
    
    def test_create_template(self, test_db_session, create_test_seller):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        seller = create_test_seller()
        
        template = MessageTemplate(
            seller_id=seller.id,
            name="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
            content="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —Ç–æ–≤–∞—Ä—É. {product_name}",
            category="greeting",
            variables=["product_name"],
            is_active=True
        )
        
        test_db_session.add(template)
        test_db_session.commit()
        test_db_session.refresh(template)
        
        assert template.id is not None
        assert template.seller_id == seller.id
        assert template.name == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        assert "product_name" in template.content
        assert template.category == "greeting"
        assert template.variables == ["product_name"]
        assert template.usage_count == 0
        assert template.is_active is True
    
    def test_template_usage_tracking(self, test_db_session, create_test_seller):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        seller = create_test_seller()
        
        template = MessageTemplate(
            seller_id=seller.id,
            name="–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω",
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
            usage_count=5,
            success_rate=0.8
        )
        
        test_db_session.add(template)
        test_db_session.commit()
        test_db_session.refresh(template)
        
        assert template.usage_count == 5
        assert template.success_rate == 0.8
        assert template.last_used_at is None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        template.last_used_at = datetime.now(timezone.utc)
        template.usage_count += 1
        test_db_session.commit()
        test_db_session.refresh(template)
        
        assert template.usage_count == 6
        assert template.last_used_at is not None


class TestModelRelationships:
    """–¢–µ—Å—Ç—ã —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
    
    def test_user_profile_relationship(self, test_db_session, create_test_user):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        user = create_test_user()
        
        profile = UserProfile(
            user_id=user.id,
            preferred_communication_style="formal",
            interests=["electronics", "cars"],
            purchase_history_summary="–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏"
        )
        
        test_db_session.add(profile)
        test_db_session.commit()
        test_db_session.refresh(profile)
        
        assert profile.user_id == user.id
        assert profile.preferred_communication_style == "formal"
        assert "electronics" in profile.interests
    
    def test_seller_settings_relationship(self, test_db_session, create_test_seller):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        seller = create_test_seller()
        
        settings = SellerSettings(
            seller_id=seller.id,
            auto_reply_enabled=True,
            ai_personality="friendly",
            response_delay_min=1,
            response_delay_max=5,
            working_hours_start="09:00",
            working_hours_end="18:00"
        )
        
        test_db_session.add(settings)
        test_db_session.commit()
        test_db_session.refresh(settings)
        
        assert settings.seller_id == seller.id
        assert settings.auto_reply_enabled is True
        assert settings.ai_personality == "friendly"
        assert settings.working_hours_start == "09:00"