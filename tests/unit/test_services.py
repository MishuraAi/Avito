"""
üß™ Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è

–¢–µ—Å—Ç–∏—Ä—É–µ–º:
- AuthService - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
- UserService - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- MessageService - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
- AvitoService - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Avito API
"""

import pytest
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime, timedelta

from src.services.auth_service import AuthService
from src.services.user_service import UserService
from src.services.message_service import MessageService
from src.services.avito_service import AvitoService
from src.utils.exceptions import (
    AuthenticationError, ValidationError, NotFoundError,
    ExternalServiceError, BusinessLogicError
)


class TestAuthService:
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def test_hash_password(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
        password = "testpassword123"
        hashed = AuthService.hash_password(password)
        
        assert hashed != password
        assert len(hashed) > 50  # bcrypt hash –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        assert hashed.startswith("$2b$")  # bcrypt –ø—Ä–µ—Ñ–∏–∫—Å
    
    def test_verify_password(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"""
        password = "testpassword123"
        hashed = AuthService.hash_password(password)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
        assert AuthService.verify_password(password, hashed) is True
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
        assert AuthService.verify_password("wrongpassword", hashed) is False
    
    def test_create_access_token(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
        user_id = "test-user-id"
        user_type = "user"
        
        token = AuthService.create_access_token(user_id, user_type)
        
        assert isinstance(token, str)
        assert len(token) > 100  # JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        assert "." in token  # JWT —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏
    
    def test_verify_token_valid(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        user_id = "test-user-id"
        user_type = "seller"
        
        token = AuthService.create_access_token(user_id, user_type)
        payload = AuthService.verify_token(token)
        
        assert payload["sub"] == user_id
        assert payload["user_type"] == user_type
        assert "exp" in payload
    
    def test_verify_token_invalid(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        invalid_token = "invalid.jwt.token"
        
        with pytest.raises(AuthenticationError):
            AuthService.verify_token(invalid_token)
    
    def test_verify_token_expired(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        with patch('src.services.auth_service.datetime') as mock_datetime:
            past_time = datetime.utcnow() - timedelta(hours=2)
            mock_datetime.utcnow.return_value = past_time
            
            token = AuthService.create_access_token("user-id", "user")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
        with pytest.raises(AuthenticationError) as exc_info:
            AuthService.verify_token(token)
        
        assert "expired" in str(exc_info.value).lower()
    
    @pytest.mark.asyncio
    async def test_authenticate_user_success(self, test_db_session, create_test_user):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password = "testpassword123"
        user = create_test_user(
            email="auth@example.com",
            password_hash=AuthService.hash_password(password)
        )
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
        result_user, user_type = await AuthService.authenticate_user(
            test_db_session, "auth@example.com", password
        )
        
        assert result_user.id == user.id
        assert user_type == "user"
    
    @pytest.mark.asyncio
    async def test_authenticate_user_wrong_password(self, test_db_session, create_test_user):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º"""
        user = create_test_user(
            email="wrong@example.com",
            password_hash=AuthService.hash_password("correctpassword")
        )
        
        with pytest.raises(AuthenticationError):
            await AuthService.authenticate_user(
                test_db_session, "wrong@example.com", "wrongpassword"
            )
    
    @pytest.mark.asyncio
    async def test_authenticate_nonexistent_user(self, test_db_session):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with pytest.raises(AuthenticationError):
            await AuthService.authenticate_user(
                test_db_session, "nonexistent@example.com", "password"
            )


class TestUserService:
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @pytest.mark.asyncio
    async def test_create_user_success(self, test_db_session):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "email": "newuser@example.com",
            "password": "securepassword123",
            "first_name": "John",
            "last_name": "Doe",
            "phone": "+7900123456"
        }
        
        user = await UserService.create_user(test_db_session, user_data)
        
        assert user.email == "newuser@example.com"
        assert user.first_name == "John"
        assert user.last_name == "Doe"
        assert user.phone == "+7900123456"
        assert user.is_active is True
        assert user.password_hash != "securepassword123"  # –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
    
    @pytest.mark.asyncio
    async def test_create_user_duplicate_email(self, test_db_session, create_test_user):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email"""
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_test_user(email="duplicate@example.com")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Å —Ç–µ–º –∂–µ email
        user_data = {
            "email": "duplicate@example.com",
            "password": "password123",
            "first_name": "Second"
        }
        
        with pytest.raises(ValidationError) as exc_info:
            await UserService.create_user(test_db_session, user_data)
        
        assert "already exists" in str(exc_info.value).lower()
    
    @pytest.mark.asyncio
    async def test_get_user_by_id(self, test_db_session, create_test_user):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        user = create_test_user()
        
        found_user = await UserService.get_user_by_id(test_db_session, user.id)
        
        assert found_user is not None
        assert found_user.id == user.id
        assert found_user.email == user.email
    
    @pytest.mark.asyncio
    async def test_get_user_by_nonexistent_id(self, test_db_session):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from uuid import uuid4
        
        with pytest.raises(NotFoundError):
            await UserService.get_user_by_id(test_db_session, uuid4())
    
    @pytest.mark.asyncio
    async def test_update_user_profile(self, test_db_session, create_test_user):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = create_test_user()
        
        update_data = {
            "first_name": "Updated",
            "last_name": "Name",
            "phone": "+7900999888"
        }
        
        updated_user = await UserService.update_user_profile(
            test_db_session, user.id, update_data
        )
        
        assert updated_user.first_name == "Updated"
        assert updated_user.last_name == "Name"
        assert updated_user.phone == "+7900999888"


class TestMessageService:
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @pytest.mark.asyncio
    async def test_create_message_basic(self, test_db_session, create_test_user, create_test_seller):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = create_test_user()
        seller = create_test_seller()
        
        message_data = {
            "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "sender_id": str(user.id),
            "recipient_id": str(seller.id),
            "message_type": "user_to_seller",
            "platform": "avito"
        }
        
        message = await MessageService.create_message(test_db_session, message_data)
        
        assert message.content == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert message.sender_id == user.id
        assert message.recipient_id == seller.id
        assert message.message_type == "user_to_seller"
        assert message.platform == "avito"
        assert message.status == "sent"
    
    @pytest.mark.asyncio
    async def test_create_message_with_ai_analysis(self, test_db_session, create_test_user, create_test_seller, mock_gemini_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º"""
        user = create_test_user()
        seller = create_test_seller()
        
        message_data = {
            "content": "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
            "sender_id": str(user.id),
            "recipient_id": str(seller.id),
            "message_type": "user_to_seller",
            "enable_ai_analysis": True
        }
        
        with patch('src.services.message_service.GeminiClient', return_value=mock_gemini_client):
            message = await MessageService.create_message(test_db_session, message_data)
        
        assert message.is_ai_processed is True
        assert message.ai_analysis is not None
        mock_gemini_client.analyze_message.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_generate_ai_response(self, test_db_session, create_test_user, create_test_seller, mock_gemini_client):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò –æ—Ç–≤–µ—Ç–∞"""
        user = create_test_user()
        seller = create_test_seller()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?",
            "sender_id": str(user.id),
            "recipient_id": str(seller.id),
            "message_type": "user_to_seller"
        }
        
        message = await MessageService.create_message(test_db_session, message_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with patch('src.services.message_service.GeminiClient', return_value=mock_gemini_client):
            response = await MessageService.generate_ai_response(
                test_db_session, message.id, seller.id
            )
        
        assert response is not None
        assert "content" in response
        mock_gemini_client.generate_response.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_conversation_messages(self, test_db_session, create_test_user, create_test_seller):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞"""
        from src.database.models.messages import Conversation
        
        user = create_test_user()
        seller = create_test_seller()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        conversation = Conversation(
            user_id=user.id,
            seller_id=seller.id,
            platform="avito"
        )
        test_db_session.add(conversation)
        test_db_session.commit()
        test_db_session.refresh(conversation)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(3):
            message_data = {
                "content": f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}",
                "sender_id": str(user.id),
                "recipient_id": str(seller.id),
                "conversation_id": str(conversation.id),
                "message_type": "user_to_seller"
            }
            await MessageService.create_message(test_db_session, message_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await MessageService.get_conversation_messages(
            test_db_session, conversation.id
        )
        
        assert len(messages) == 3
        assert messages[0].content == "–°–æ–æ–±—â–µ–Ω–∏–µ 1"
        assert all(msg.conversation_id == conversation.id for msg in messages)


class TestAvitoService:
    """–¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Avito"""
    
    @pytest.mark.asyncio
    async def test_sync_seller_messages(self, test_db_session, create_test_seller, mock_avito_client):
        """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        seller = create_test_seller(avito_user_id="avito_123")
        
        with patch('src.services.avito_service.AvitoApiClient', return_value=mock_avito_client):
            result = await AvitoService.sync_seller_messages(test_db_session, seller.id)
        
        assert result is not None
        assert "synced_count" in result
        mock_avito_client.get_messages.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_send_message_to_avito(self, test_db_session, create_test_seller, mock_avito_client):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Avito"""
        seller = create_test_seller(avito_user_id="avito_123")
        
        message_data = {
            "content": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            "recipient_id": "avito_user_456",
            "ad_id": "avito_ad_789"
        }
        
        with patch('src.services.avito_service.AvitoApiClient', return_value=mock_avito_client):
            result = await AvitoService.send_message(
                test_db_session, seller.id, message_data
            )
        
        assert result is not None
        assert "id" in result
        mock_avito_client.send_message.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_validate_avito_credentials(self, test_db_session, create_test_seller, mock_avito_client):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Avito"""
        seller = create_test_seller(
            avito_user_id="avito_123",
            avito_client_id="client_123",
            avito_client_secret="secret_123"
        )
        
        mock_avito_client.validate_credentials.return_value = True
        
        with patch('src.services.avito_service.AvitoApiClient', return_value=mock_avito_client):
            is_valid = await AvitoService.validate_credentials(test_db_session, seller.id)
        
        assert is_valid is True
        mock_avito_client.validate_credentials.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_api_error(self, test_db_session, create_test_seller, mock_avito_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Avito API"""
        seller = create_test_seller()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
        mock_avito_client.get_messages.side_effect = Exception("API Error")
        
        with patch('src.services.avito_service.AvitoApiClient', return_value=mock_avito_client):
            with pytest.raises(ExternalServiceError) as exc_info:
                await AvitoService.sync_seller_messages(test_db_session, seller.id)
        
        assert "avito" in str(exc_info.value).lower()


class TestServiceIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    @pytest.mark.asyncio
    async def test_full_message_flow(self, test_db_session, create_test_user, create_test_seller, 
                                   mock_gemini_client, mock_avito_client):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = create_test_user()
        seller = create_test_seller(avito_user_id="avito_123")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_data = {
            "content": "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä",
            "sender_id": str(user.id),
            "recipient_id": str(seller.id),
            "message_type": "user_to_seller",
            "enable_ai_analysis": True
        }
        
        with patch('src.services.message_service.GeminiClient', return_value=mock_gemini_client):
            message = await MessageService.create_message(test_db_session, message_data)
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò –æ—Ç–≤–µ—Ç
        with patch('src.services.message_service.GeminiClient', return_value=mock_gemini_client):
            ai_response = await MessageService.generate_ai_response(
                test_db_session, message.id, seller.id
            )
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Avito
        with patch('src.services.avito_service.AvitoApiClient', return_value=mock_avito_client):
            send_result = await AvitoService.send_message(
                test_db_session, seller.id, {
                    "content": ai_response["content"],
                    "recipient_id": str(user.id)
                }
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
        assert message.is_ai_processed is True
        assert ai_response is not None
        assert send_result is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
        mock_gemini_client.analyze_message.assert_called()
        mock_gemini_client.generate_response.assert_called()
        mock_avito_client.send_message.assert_called()