"""
üß™ Integration —Ç–µ—Å—Ç—ã –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤

–¢–µ—Å—Ç–∏—Ä—É–µ–º:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
- CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
- –°–∏—Å—Ç–µ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
"""

import pytest
from fastapi.testclient import TestClient


class TestAuthEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def test_register_user_success(self, test_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "email": "newuser@example.com",
            "password": "securepassword123",
            "first_name": "John",
            "last_name": "Doe",
            "phone": "+7900123456"
        }
        
        response = test_client.post("/api/auth/register", json=user_data)
        
        assert response.status_code == 201
        data = response.json()
        assert data["email"] == "newuser@example.com"
        assert data["first_name"] == "John"
        assert "password" not in data  # –ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
        assert "id" in data
    
    def test_register_user_duplicate_email(self, test_client):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email"""
        user_data = {
            "email": "duplicate@example.com",
            "password": "password123",
            "first_name": "First"
        }
        
        # –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        response = test_client.post("/api/auth/register", json=user_data)
        assert response.status_code == 201
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ–º –∂–µ email
        response = test_client.post("/api/auth/register", json=user_data)
        assert response.status_code == 400
        assert "already exists" in response.json()["detail"].lower()
    
    def test_register_user_invalid_data(self, test_client):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
        response = test_client.post("/api/auth/register", json={
            "email": "invalid-email",
            "password": "password123",
            "first_name": "Test"
        })
        assert response.status_code == 422
        
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
        response = test_client.post("/api/auth/register", json={
            "email": "test@example.com",
            "password": "123",
            "first_name": "Test"
        })
        assert response.status_code == 422
    
    def test_login_success(self, test_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        user_data = {
            "email": "login@example.com",
            "password": "loginpassword123",
            "first_name": "Login"
        }
        test_client.post("/api/auth/register", json=user_data)
        
        # –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–Ω–∏–º—Å—è
        login_data = {
            "email": "login@example.com",
            "password": "loginpassword123"
        }
        
        response = test_client.post("/api/auth/login", json=login_data)
        
        assert response.status_code == 200
        data = response.json()
        assert "access_token" in data
        assert data["token_type"] == "bearer"
        assert "user" in data
        assert data["user"]["email"] == "login@example.com"
    
    def test_login_wrong_password(self, test_client):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        user_data = {
            "email": "wrong@example.com",
            "password": "correctpassword",
            "first_name": "Test"
        }
        test_client.post("/api/auth/register", json=user_data)
        
        # –õ–æ–≥–∏–Ω–∏–º—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        login_data = {
            "email": "wrong@example.com",
            "password": "wrongpassword"
        }
        
        response = test_client.post("/api/auth/login", json=login_data)
        
        assert response.status_code == 401
        assert "incorrect" in response.json()["detail"].lower()
    
    def test_login_nonexistent_user(self, test_client):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        login_data = {
            "email": "nonexistent@example.com",
            "password": "password123"
        }
        
        response = test_client.post("/api/auth/login", json=login_data)
        
        assert response.status_code == 401
    
    def test_register_seller_success(self, test_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        seller_data = {
            "email": "seller@example.com",
            "password": "sellerpassword123",
            "first_name": "Jane",
            "last_name": "Smith",
            "company_name": "Test Company",
            "subscription_type": "free"
        }
        
        response = test_client.post("/api/auth/register-seller", json=seller_data)
        
        assert response.status_code == 201
        data = response.json()
        assert data["email"] == "seller@example.com"
        assert data["company_name"] == "Test Company"
        assert data["subscription_type"] == "free"
        assert "password" not in data


class TestUserEndpoints:
    """–¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    
    def test_get_current_user(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = test_client.get("/api/users/me", headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert "id" in data
        assert "email" in data
        assert "password" not in data
    
    def test_get_current_user_unauthorized(self, test_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        response = test_client.get("/api/users/me")
        
        assert response.status_code == 401
    
    def test_update_user_profile(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        update_data = {
            "first_name": "Updated",
            "last_name": "Name",
            "phone": "+7900999888"
        }
        
        response = test_client.patch("/api/users/me", json=update_data, headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert data["first_name"] == "Updated"
        assert data["last_name"] == "Name"
        assert data["phone"] == "+7900999888"
    
    def test_get_user_by_id(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        me_response = test_client.get("/api/users/me", headers=auth_headers)
        user_id = me_response.json()["id"]
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        response = test_client.get(f"/api/users/{user_id}", headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == user_id
    
    def test_get_nonexistent_user(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        fake_id = "00000000-0000-0000-0000-000000000000"
        
        response = test_client.get(f"/api/users/{fake_id}", headers=auth_headers)
        
        assert response.status_code == 404


class TestMessageEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def test_create_message(self, test_client, auth_headers):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_data = {
            "email": "msgseller@example.com",
            "password": "password123",
            "first_name": "Seller",
            "company_name": "Company"
        }
        seller_response = test_client.post("/api/auth/register-seller", json=seller_data)
        seller_id = seller_response.json()["id"]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "recipient_id": seller_id,
            "message_type": "user_to_seller",
            "platform": "avito"
        }
        
        response = test_client.post("/api/messages/", json=message_data, headers=auth_headers)
        
        assert response.status_code == 201
        data = response.json()
        assert data["content"] == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert data["recipient_id"] == seller_id
        assert data["message_type"] == "user_to_seller"
        assert data["status"] == "sent"
    
    def test_get_user_messages(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = test_client.get("/api/messages/", headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert "items" in data
        assert "total" in data
        assert "page" in data
        assert "size" in data
        assert isinstance(data["items"], list)
    
    def test_get_message_by_id(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID"""
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
        seller_data = {
            "email": "getmsgseller@example.com",
            "password": "password123",
            "first_name": "Seller",
            "company_name": "Company"
        }
        seller_response = test_client.post("/api/auth/register-seller", json=seller_data)
        seller_id = seller_response.json()["id"]
        
        message_data = {
            "content": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
            "recipient_id": seller_id,
            "message_type": "user_to_seller"
        }
        
        create_response = test_client.post("/api/messages/", json=message_data, headers=auth_headers)
        message_id = create_response.json()["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = test_client.get(f"/api/messages/{message_id}", headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == message_id
        assert data["content"] == "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è"
    
    @pytest.mark.external
    def test_generate_ai_response(self, test_client, auth_headers, mock_gemini_client):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò –æ—Ç–≤–µ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_data = {
            "email": "aiseller@example.com",
            "password": "password123",
            "first_name": "AI",
            "last_name": "Seller",
            "company_name": "AI Company"
        }
        seller_response = test_client.post("/api/auth/register-seller", json=seller_data)
        seller_id = seller_response.json()["id"]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            "content": "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
            "recipient_id": seller_id,
            "message_type": "user_to_seller"
        }
        
        create_response = test_client.post("/api/messages/", json=message_data, headers=auth_headers)
        message_id = create_response.json()["id"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò –æ—Ç–≤–µ—Ç
        with patch('src.services.message_service.GeminiClient', return_value=mock_gemini_client):
            response = test_client.post(
                f"/api/messages/{message_id}/generate-response",
                headers=auth_headers
            )
        
        assert response.status_code == 200
        data = response.json()
        assert "content" in data
        assert "ai_analysis" in data


class TestConversationEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def test_get_user_conversations(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = test_client.get("/api/conversations/", headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert "items" in data
        assert "total" in data
        assert isinstance(data["items"], list)
    
    def test_get_conversation_messages(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        seller_data = {
            "email": "convseller@example.com",
            "password": "password123",
            "first_name": "Conv",
            "company_name": "Company"
        }
        seller_response = test_client.post("/api/auth/register-seller", json=seller_data)
        seller_id = seller_response.json()["id"]
        
        message_data = {
            "content": "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞",
            "recipient_id": seller_id,
            "message_type": "user_to_seller"
        }
        
        test_client.post("/api/messages/", json=message_data, headers=auth_headers)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        conv_response = test_client.get("/api/conversations/", headers=auth_headers)
        conversations = conv_response.json()["items"]
        
        if conversations:
            conversation_id = conversations[0]["id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            response = test_client.get(
                f"/api/conversations/{conversation_id}/messages",
                headers=auth_headers
            )
            
            assert response.status_code == 200
            data = response.json()
            assert "items" in data
            assert isinstance(data["items"], list)


class TestSellerEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
    
    def test_seller_dashboard(self, test_client):
        """–¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_data = {
            "email": "dashboard@example.com",
            "password": "password123",
            "first_name": "Dashboard",
            "company_name": "Company"
        }
        register_response = test_client.post("/api/auth/register-seller", json=seller_data)
        assert register_response.status_code == 201
        
        # –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü
        login_data = {
            "email": "dashboard@example.com",
            "password": "password123"
        }
        login_response = test_client.post("/api/auth/login", json=login_data)
        token = login_response.json()["access_token"]
        seller_headers = {"Authorization": f"Bearer {token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        response = test_client.get("/api/sellers/dashboard", headers=seller_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert "message_stats" in data
        assert "subscription_info" in data
        assert "ai_usage" in data
    
    def test_seller_settings(self, test_client):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_data = {
            "email": "settings@example.com",
            "password": "password123",
            "first_name": "Settings",
            "company_name": "Company"
        }
        register_response = test_client.post("/api/auth/register-seller", json=seller_data)
        
        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        login_data = {
            "email": "settings@example.com",
            "password": "password123"
        }
        login_response = test_client.post("/api/auth/login", json=login_data)
        token = login_response.json()["access_token"]
        seller_headers = {"Authorization": f"Bearer {token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        response = test_client.get("/api/sellers/settings", headers=seller_headers)
        assert response.status_code == 200
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_data = {
            "auto_reply_enabled": True,
            "ai_personality": "friendly",
            "response_delay_min": 2,
            "response_delay_max": 5
        }
        
        update_response = test_client.patch(
            "/api/sellers/settings",
            json=settings_data,
            headers=seller_headers
        )
        
        assert update_response.status_code == 200
        data = update_response.json()
        assert data["auto_reply_enabled"] is True
        assert data["ai_personality"] == "friendly"
    
    def test_message_templates(self, test_client):
        """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_data = {
            "email": "templates@example.com",
            "password": "password123",
            "first_name": "Templates",
            "company_name": "Company"
        }
        register_response = test_client.post("/api/auth/register-seller", json=seller_data)
        
        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        login_data = {
            "email": "templates@example.com",
            "password": "password123"
        }
        login_response = test_client.post("/api/auth/login", json=login_data)
        token = login_response.json()["access_token"]
        seller_headers = {"Authorization": f"Bearer {token}"}
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template_data = {
            "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ {product_name}",
            "category": "greeting",
            "variables": ["product_name"]
        }
        
        create_response = test_client.post(
            "/api/sellers/templates",
            json=template_data,
            headers=seller_headers
        )
        
        assert create_response.status_code == 201
        template = create_response.json()
        assert template["name"] == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        assert "product_name" in template["content"]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        get_response = test_client.get("/api/sellers/templates", headers=seller_headers)
        assert get_response.status_code == 200
        templates = get_response.json()["items"]
        assert len(templates) >= 1


class TestSystemEndpoints:
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    
    def test_health_check(self, test_client):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        response = test_client.get("/health")
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert "timestamp" in data
        assert "version" in data
        assert "database" in data
    
    def test_api_info(self, test_client):
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API"""
        response = test_client.get("/api/info")
        
        assert response.status_code == 200
        data = response.json()
        assert "name" in data
        assert "version" in data
        assert "description" in data
    
    def test_metrics_endpoint(self, test_client):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
        response = test_client.get("/metrics")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
        assert response.status_code in [200, 404]
    
    def test_docs_redirect(self, test_client):
        """–¢–µ—Å—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
        response = test_client.get("/docs", follow_redirects=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
        assert response.status_code in [200, 307]


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def test_404_not_found(self, test_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–∫–∏"""
        response = test_client.get("/nonexistent/endpoint")
        
        assert response.status_code == 404
        data = response.json()
        assert "detail" in data
    
    def test_422_validation_error(self, test_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = test_client.post("/api/auth/register", json={
            "email": "invalid",
            "password": "123"
        })
        
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data
        assert isinstance(data["detail"], list)
    
    def test_401_unauthorized(self, test_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        response = test_client.get("/api/users/me")
        
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
    
    def test_403_forbidden(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        response = test_client.get("/api/sellers/dashboard", headers=auth_headers)
        
        assert response.status_code == 403
        data = response.json()
        assert "detail" in data


class TestRateLimit:
    """–¢–µ—Å—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def test_rate_limit_basic(self, test_client):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        responses = []
        for i in range(20):
            response = test_client.get("/health")
            responses.append(response.status_code)
        
        # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        success_count = sum(1 for status in responses if status == 200)
        assert success_count >= 15  # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ 429 –æ—à–∏–±–∫–∏
    
    @pytest.mark.slow
    def test_rate_limit_recovery(self, test_client):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
        import time
        
        # –ò—Å—á–µ—Ä–ø—ã–≤–∞–µ–º –ª–∏–º–∏—Ç
        for i in range(15):
            test_client.get("/health")
        
        # –ñ–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        response = test_client.get("/health")
        assert response.status_code == 200


class TestCORS:
    """–¢–µ—Å—Ç—ã CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def test_cors_headers(self, test_client):
        """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        response = test_client.options("/api/users/me", headers={
            "Origin": "http://localhost:3000",
            "Access-Control-Request-Method": "GET"
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        assert "access-control-allow-origin" in response.headers
        assert "access-control-allow-methods" in response.headers
        assert "access-control-allow-headers" in response.headers
    
    def test_cors_preflight(self, test_client):
        """–¢–µ—Å—Ç preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        response = test_client.options("/api/auth/login", headers={
            "Origin": "http://localhost:3000",
            "Access-Control-Request-Method": "POST",
            "Access-Control-Request-Headers": "Content-Type"
        })
        
        assert response.status_code == 200
        assert "access-control-allow-origin" in response.headers


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
from unittest.mock import patch

@pytest.fixture
def mock_external_apis():
    """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö API"""
    with patch('src.integrations.gemini.client.GeminiClient') as mock_gemini, \
         patch('src.integrations.avito.api_client.AvitoApiClient') as mock_avito:
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_gemini.return_value.analyze_message.return_value = {
            "intent": "price_inquiry",
            "sentiment": "positive"
        }
        mock_gemini.return_value.generate_response.return_value = {
            "content": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò"
        }
        
        mock_avito.return_value.get_messages.return_value = []
        mock_avito.return_value.send_message.return_value = {"id": "sent_123"}
        
        yield {
            "gemini": mock_gemini.return_value,
            "avito": mock_avito.return_value
        }