"""
üß™ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è Avito AI Bot

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
- –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import asyncio
from pathlib import Path
from typing import Generator, AsyncGenerator
from unittest.mock import Mock, AsyncMock

import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool
from fastapi.testclient import TestClient

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.core.config import get_settings
from src.database.models import Base
from src.database.session import DatabaseManager
from src.api.main import app


# ============================================================================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´
# ============================================================================

@pytest.fixture(scope="session", autouse=True)
def setup_test_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.environ["TESTING"] = "True"
    os.environ["ENVIRONMENT"] = "testing"
    os.environ["DATABASE_URL"] = "sqlite:///./test.db"
    os.environ["REDIS_URL"] = "redis://localhost:6379/15"  # –¢–µ—Å—Ç–æ–≤–∞—è –ë–î Redis
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    test_db_path = Path("./test.db")
    if test_db_path.exists():
        test_db_path.unlink()


# ============================================================================
# üóÑÔ∏è –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ============================================================================

@pytest.fixture(scope="session")
def test_engine():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ SQLAlchemy"""
    engine = create_engine(
        "sqlite:///./test.db",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
        echo=False
    )
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)
    
    yield engine
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    Base.metadata.drop_all(bind=engine)
    engine.dispose()


@pytest.fixture
def test_db_session(test_engine):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    TestingSessionLocal = sessionmaker(
        autocommit=False,
        autoflush=False,
        bind=test_engine
    )
    
    session = TestingSessionLocal()
    try:
        yield session
    finally:
        session.rollback()
        session.close()


@pytest.fixture
async def async_test_db_session(test_engine):
    """–°–æ–∑–¥–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é
    TestingSessionLocal = sessionmaker(
        autocommit=False,
        autoflush=False,
        bind=test_engine
    )
    
    session = TestingSessionLocal()
    try:
        yield session
    finally:
        session.rollback()
        session.close()


# ============================================================================
# üåê –§–ò–ö–°–¢–£–†–´ –î–õ–Ø API
# ============================================================================

@pytest.fixture
def test_client(test_db_session):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç FastAPI"""
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    def override_get_db():
        try:
            yield test_db_session
        finally:
            pass
    
    from src.api.dependencies import get_db
    app.dependency_overrides[get_db] = override_get_db
    
    with TestClient(app) as client:
        yield client
    
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    app.dependency_overrides.clear()


@pytest.fixture
def auth_headers(test_client):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    user_data = {
        "email": "test@example.com",
        "password": "testpassword123",
        "first_name": "Test",
        "last_name": "User"
    }
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = test_client.post("/api/auth/register", json=user_data)
    
    if response.status_code == 201:
        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        login_data = {"email": user_data["email"], "password": user_data["password"]}
        response = test_client.post("/api/auth/login", json=login_data)
        
        if response.status_code == 200:
            token = response.json()["access_token"]
            return {"Authorization": f"Bearer {token}"}
    
    return {}


# ============================================================================
# ü§ñ –ú–û–ö–ò–†–û–í–ê–ù–ù–´–ï –í–ù–ï–®–ù–ò–ï –°–ï–†–í–ò–°–´
# ============================================================================

@pytest.fixture
def mock_gemini_client():
    """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Gemini API"""
    mock = AsyncMock()
    mock.generate_response.return_value = {
        "content": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò",
        "usage": {"prompt_tokens": 10, "completion_tokens": 20},
        "model": "gemini-pro"
    }
    return mock


@pytest.fixture
def mock_avito_client():
    """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Avito API"""
    mock = AsyncMock()
    mock.get_messages.return_value = [
        {
            "id": "msg_123",
            "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "created_at": "2025-01-06T12:00:00Z",
            "author": {"id": "user_456", "name": "Test User"}
        }
    ]
    mock.send_message.return_value = {"id": "msg_789", "status": "sent"}
    return mock


# ============================================================================
# üìä –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
# ============================================================================

@pytest.fixture
def sample_user_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "email": "user@example.com",
        "password": "securepassword123",
        "first_name": "John",
        "last_name": "Doe",
        "phone": "+7900123456"
    }


@pytest.fixture
def sample_seller_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    return {
        "email": "seller@example.com",
        "password": "sellerpassword123",
        "first_name": "Jane",
        "last_name": "Smith",
        "company_name": "Test Company",
        "avito_user_id": "avito_123"
    }


@pytest.fixture
def sample_message_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return {
        "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä. –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        "message_type": "incoming",
        "platform": "avito",
        "external_message_id": "ext_msg_123"
    }


# ============================================================================
# üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–û–í
# ============================================================================

@pytest.fixture
def create_test_user(test_db_session):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def _create_user(**kwargs):
        from src.database.models.users import User
        from src.utils.helpers import hash_password
        
        default_data = {
            "email": "test@example.com",
            "password_hash": hash_password("password123"),
            "first_name": "Test",
            "last_name": "User",
            "is_active": True
        }
        default_data.update(kwargs)
        
        user = User(**default_data)
        test_db_session.add(user)
        test_db_session.commit()
        test_db_session.refresh(user)
        
        return user
    
    return _create_user


@pytest.fixture
def create_test_seller(test_db_session):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
    def _create_seller(**kwargs):
        from src.database.models.users import Seller
        from src.utils.helpers import hash_password
        
        default_data = {
            "email": "seller@example.com",
            "password_hash": hash_password("password123"),
            "first_name": "Test",
            "last_name": "Seller",
            "company_name": "Test Company",
            "is_active": True,
            "subscription_type": "free"
        }
        default_data.update(kwargs)
        
        seller = Seller(**default_data)
        test_db_session.add(seller)
        test_db_session.commit()
        test_db_session.refresh(seller)
        
        return seller
    
    return _create_seller


# ============================================================================
# ‚ö° ASYNC UTILITIES
# ============================================================================

@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞—Ç—å event loop –¥–ª—è async —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


# ============================================================================
# üè∑Ô∏è –ú–ê–†–ö–ï–†–´ –î–õ–Ø –ü–†–û–ü–£–°–ö–ê –¢–ï–°–¢–û–í
# ============================================================================

def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest"""
    config.addinivalue_line(
        "markers", "external: mark test as requiring external services"
    )
    config.addinivalue_line(
        "markers", "slow: mark test as slow running"
    )


def pytest_collection_modifyitems(config, items):
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º external —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö API –∫–ª—é—á–µ–π
    skip_external = pytest.mark.skip(reason="External API keys not configured")
    
    for item in items:
        if "external" in item.keywords:
            settings = get_settings()
            if not settings.gemini_api_key or settings.gemini_api_key == "your-gemini-api-key-here":
                item.add_marker(skip_external)


# ============================================================================
# üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –¢–ï–°–¢–û–í
# ============================================================================

@pytest.fixture(autouse=True)
def configure_test_logging(caplog):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    import logging
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.getLogger("src").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy").setLevel(logging.WARNING)
    logging.getLogger("uvicorn").setLevel(logging.ERROR)
    
    yield caplog


# ============================================================================
# üßπ –û–ß–ò–°–¢–ö–ê –ü–û–°–õ–ï –¢–ï–°–¢–û–í
# ============================================================================

@pytest.fixture(autouse=True)
def cleanup_after_test():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ç.–¥.
    import gc
    gc.collect()