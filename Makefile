# üõ†Ô∏è Makefile –¥–ª—è Avito AI Responder
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

.PHONY: help install test clean lint format type-check run dev prod docker-* setup

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
PURPLE := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RED := \033[31m
RESET := \033[0m

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python3
PIP := pip3
DOCKER := docker
DOCKER_COMPOSE := docker-compose
PROJECT_NAME := avito-ai-responder

##@ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

help: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(CYAN)ü§ñ Avito AI Responder - Makefile –∫–æ–º–∞–Ω–¥—ã$(RESET)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n  make $(CYAN)<target>$(RESET)\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  $(CYAN)%-20s$(RESET) %s\n", $$1, $$2 } /^##@/ { printf "\n$(YELLOW)%s$(RESET)\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

setup: ## ‚öôÔ∏è –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Avito AI Responder...$(RESET)"
	@$(PYTHON) -m venv venv || echo "$(YELLOW)‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(RESET)"
	@echo "$(GREEN)‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source venv/bin/activate$(RESET)"
	@echo "$(GREEN)‚úÖ –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make install$(RESET)"

install: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@$(PIP) install --upgrade pip
	@$(PIP) install -r requirements-dev.txt
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

env: ## üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.example –≤ .env
	@echo "$(BLUE)üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"
	@cp .env.example .env || echo "$(YELLOW)‚ö†Ô∏è .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(RESET)"
	@echo "$(GREEN)‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏!$(RESET)"

##@ üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

db-init: ## üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...$(RESET)"
	@$(PYTHON) scripts/init_migrations.py

db-migrate: ## ‚¨ÜÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "$(BLUE)‚¨ÜÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(RESET)"
	@alembic upgrade head

db-revision: ## üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
	@echo "$(BLUE)üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...$(RESET)"
	@read -p "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: " name; alembic revision --autogenerate -m "$$name"

db-check: ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(RESET)"
	@$(PYTHON) scripts/check_database.py

db-setup: ## üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
	@echo "$(BLUE)üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(RESET)"
	@$(PYTHON) scripts/setup_database.py

##@ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

test: ## üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(RESET)"
	@pytest -v

test-unit: ## üìä –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üìä –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...$(RESET)"
	@pytest tests/unit/ -v

test-integration: ## üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...$(RESET)"
	@pytest tests/integration/ -v

test-coverage: ## üìà –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
	@echo "$(BLUE)üìà –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞...$(RESET)"
	@pytest --cov=src --cov-report=html --cov-report=term

test-complete: ## üéØ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üéØ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...$(RESET)"
	@$(PYTHON) scripts/test_complete_setup.py

##@ üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞

lint: ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å flake8
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞...$(RESET)"
	@flake8 src/ tests/ scripts/ --max-line-length=100 --exclude=migrations/

format: ## ‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å black
	@echo "$(BLUE)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(RESET)"
	@black src/ tests/ scripts/ --line-length=100 --exclude=migrations/

format-check: ## üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	@echo "$(BLUE)üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(RESET)"
	@black src/ tests/ scripts/ --check --diff --line-length=100 --exclude=migrations/

type-check: ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å mypy
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤...$(RESET)"
	@mypy src/ --ignore-missing-imports

isort: ## üìã –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
	@echo "$(BLUE)üìã –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...$(RESET)"
	@isort src/ tests/ scripts/ --profile black

isort-check: ## üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
	@echo "$(BLUE)üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...$(RESET)"
	@isort src/ tests/ scripts/ --profile black --check-only --diff

code-quality: lint format type-check isort ## üèÜ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

##@ üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

run: ## üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@uvicorn src.api.main:app --reload --host 0.0.0.0 --port 8000

run-prod: ## üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞...$(RESET)"
	@gunicorn src.api.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000

##@ üê≥ Docker –∫–æ–º–∞–Ω–¥—ã

docker-setup: ## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "$(PURPLE)üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py setup

docker-build: ## üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
	@echo "$(PURPLE)üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py build

docker-dev-up: ## üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ Docker
	@echo "$(PURPLE)üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py dev up

docker-dev-down: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(PURPLE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py dev down

docker-dev-logs: ## üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(PURPLE)üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py dev logs

docker-dev-status: ## üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(PURPLE)üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py dev status

docker-prod-deploy: ## üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "$(PURPLE)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py prod deploy

docker-prod-down: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "$(PURPLE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py prod down

docker-health: ## üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(PURPLE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py health

docker-clean: ## üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "$(PURPLE)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py clean

##@ üê≥ –ü—Ä—è–º—ã–µ Docker –∫–æ–º–∞–Ω–¥—ã

docker-build-direct: ## üèóÔ∏è –ü—Ä—è–º–∞—è —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
	@echo "$(CYAN)üèóÔ∏è –ü—Ä—è–º–∞—è —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(RESET)"
	@$(DOCKER) build -f docker/Dockerfile -t $(PROJECT_NAME):latest .

docker-run-direct: ## üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(CYAN)üöÄ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(RESET)"
	@$(DOCKER) run -d --name $(PROJECT_NAME)-test -p 8000:8000 $(PROJECT_NAME):latest

docker-compose-dev: ## üîß Docker Compose –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(CYAN)üîß –ó–∞–ø—É—Å–∫ Docker Compose (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...$(RESET)"
	@$(DOCKER_COMPOSE) -f docker/docker-compose.yml up -d

docker-compose-prod: ## üöÄ Docker Compose –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "$(CYAN)üöÄ –ó–∞–ø—É—Å–∫ Docker Compose (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)...$(RESET)"
	@$(DOCKER_COMPOSE) -f docker/docker-compose.prod.yml up -d

docker-compose-down-dev: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(CYAN)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...$(RESET)"
	@$(DOCKER_COMPOSE) -f docker/docker-compose.yml down

docker-compose-down-prod: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "$(CYAN)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)...$(RESET)"
	@$(DOCKER_COMPOSE) -f docker/docker-compose.prod.yml down

##@ üßπ –û—á–∏—Å—Ç–∫–∞

clean: ## üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(RESET)"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type f -name "*.pyo" -delete 2>/dev/null || true
	@find . -type f -name "*~" -delete 2>/dev/null || true
	@find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	@rm -rf .pytest_cache/ .coverage htmlcov/ .tox/ .mypy_cache/
	@echo "$(GREEN)‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã$(RESET)"

clean-all: clean docker-clean ## üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è Docker)
	@echo "$(YELLOW)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

##@ üìä –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

dev: docker-dev-up ## üîß –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üéâ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞!$(RESET)"
	@echo "$(CYAN)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(RESET)"
	@echo "  $(WHITE)http://localhost:8000$(RESET)      - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	@echo "  $(WHITE)http://localhost:8000/docs$(RESET) - Swagger UI"
	@echo "  $(WHITE)http://localhost:8080$(RESET)      - PgAdmin (tools profile)"
	@echo "  $(WHITE)http://localhost:8081$(RESET)      - Redis Commander (tools profile)"

dev-stop: docker-dev-down ## üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

prod: docker-prod-deploy ## üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "$(GREEN)üéâ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!$(RESET)"

##@ üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

status: ## üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ Avito AI Responder$(RESET)"
	@echo ""
	@echo "$(CYAN)üóÇÔ∏è –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:$(RESET)"
	@ls -la
	@echo ""
	@echo "$(CYAN)üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:$(RESET)"
	@$(DOCKER) ps -a --filter "name=$(PROJECT_NAME)" 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo ""
	@echo "$(CYAN)üìä –û–±—Ä–∞–∑—ã Docker:$(RESET)"
	@$(DOCKER) images | grep $(PROJECT_NAME) 2>/dev/null || echo "–û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

logs: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(RESET)"
	@$(PYTHON) scripts/docker_manager.py dev logs

shell: ## üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ shell –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(BLUE)üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ shell...$(RESET)"
	@$(DOCKER_COMPOSE) -f docker/docker-compose.yml exec app /bin/bash

##@ üéØ –ü–æ–ª–Ω—ã–µ —Ü–∏–∫–ª—ã

full-setup: setup env install db-init ## üéØ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üéâ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ:$(RESET)"
	@echo "  1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source venv/bin/activate"
	@echo "  2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏"
	@echo "  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å: make dev"

full-test: code-quality test-coverage test-complete ## üéØ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	@echo "$(GREEN)üéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!$(RESET)"

ci: code-quality test ## üîÑ CI/CD –ø–∞–π–ø–ª–∞–π–Ω (–ª–æ–∫–∞–ª—å–Ω—ã–π)
	@echo "$(GREEN)üéâ CI –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!$(RESET)"

##@ üé® –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

up: dev ## üöÄ –ê–ª–∏–∞—Å –¥–ª—è dev
down: dev-stop ## üõë –ê–ª–∏–∞—Å –¥–ª—è dev-stop
build: docker-build ## üèóÔ∏è –ê–ª–∏–∞—Å –¥–ª—è docker-build
deploy: prod ## üöÄ –ê–ª–∏–∞—Å –¥–ª—è prod

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
.DEFAULT_GOAL := help