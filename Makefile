# üõ†Ô∏è Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º Avito AI Bot

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python
PIP := pip
PYTEST := pytest
ALEMBIC := alembic
UVICORN := uvicorn

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: help install install-dev setup test test-unit test-integration test-coverage clean lint format check-db init-db run docs

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
help:
	@echo "$(GREEN)üöÄ Avito AI Bot - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º$(NC)"
	@echo ""
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:$(NC)"
	@echo "  install          - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "  install-dev      - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  setup           - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:$(NC)"
	@echo "  check-db        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"
	@echo "  setup-db        - –°–æ–∑–¥–∞—Ç—å –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	@echo "  init-db         - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  migrate         - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  migration       - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"
	@echo ""
	@echo "$(YELLOW)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:$(NC)"
	@echo "  test            - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
	@echo "  test-unit       - –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã"
	@echo "  test-integration- –ó–∞–ø—É—Å—Ç–∏—Ç—å integration —Ç–µ—Å—Ç—ã"
	@echo "  test-coverage   - –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
	@echo "  test-complete   - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
	@echo ""
	@echo "$(YELLOW)üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:$(NC)"
	@echo "  run             - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  run-prod        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä"
	@echo "  lint            - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏"
	@echo "  format          - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
	@echo "  clean           - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
	@echo ""
	@echo "$(YELLOW)üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:$(NC)"
	@echo "  docs            - –û—Ç–∫—Ä—ã—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"

# ============================================================================
# üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê
# ============================================================================

install:
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install -r requirements.txt

install-dev:
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(PIP) install -r requirements-dev.txt
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

setup: install-dev
	@echo "$(GREEN)üöÄ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)üìÑ –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...$(NC)"; \
		cp .env.example .env; \
		echo "$(RED)‚ö†Ô∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make setup-db' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î$(NC)"

# ============================================================================
# üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ============================================================================

check-db:
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	$(PYTHON) scripts/check_database.py

setup-db:
	@echo "$(GREEN)üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	$(PYTHON) scripts/setup_database.py

init-db:
	@echo "$(GREEN)üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	$(PYTHON) scripts/init_migrations.py

migrate:
	@echo "$(GREEN)üìà –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	$(ALEMBIC) upgrade head
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã$(NC)"

migration:
	@echo "$(GREEN)üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: " desc; \
	$(ALEMBIC) revision --autogenerate -m "$$desc"

# ============================================================================
# üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

test:
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTEST) -v

test-unit:
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTEST) tests/unit/ -v -m "not external"

test-integration:
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTEST) tests/integration/ -v -m "not external"

test-coverage:
	@echo "$(GREEN)üìä –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞...$(NC)"
	$(PYTEST) --cov=src --cov-report=html --cov-report=term-missing

test-complete:
	@echo "$(GREEN)üî¨ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	$(PYTHON) scripts/test_complete_setup.py

test-external:
	@echo "$(GREEN)üåê –¢–µ—Å—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(PYTEST) -v -m "external"

# ============================================================================
# üîß –†–ê–ó–†–ê–ë–û–¢–ö–ê
# ============================================================================

run:
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(UVICORN) src.api.main:app --reload --host 0.0.0.0 --port 8000

run-prod:
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	$(UVICORN) src.api.main:app --host 0.0.0.0 --port 8000 --workers 4

dev: run

lint:
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏...$(NC)"
	@echo "Flake8..."
	-flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
	@echo "Black (dry-run)..."
	-black --check src/ tests/
	@echo "isort (dry-run)..."
	-isort --check-only src/ tests/

format:
	@echo "$(GREEN)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	black src/ tests/
	isort src/ tests/
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

clean:
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/
	rm -rf dist/
	rm -rf .coverage
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf test.db
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# ============================================================================
# üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø
# ============================================================================

docs:
	@echo "$(GREEN)üìö –û—Ç–∫—Ä—ã—Ç–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	@echo "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	@echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:"
	@echo "  ‚Ä¢ Swagger UI: http://localhost:8000/docs"
	@echo "  ‚Ä¢ ReDoc:      http://localhost:8000/redoc"
	@echo ""
	$(UVICORN) src.api.main:app --reload --host 0.0.0.0 --port 8000

# ============================================================================
# üèóÔ∏è DOCKER
# ============================================================================

docker-build:
	@echo "$(GREEN)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker build -t avito-ai-bot .

docker-run:
	@echo "$(GREEN)üê≥ –ó–∞–ø—É—Å–∫ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...$(NC)"
	docker run -p 8000:8000 --env-file .env avito-ai-bot

docker-compose:
	@echo "$(GREEN)üê≥ –ó–∞–ø—É—Å–∫ —Å Docker Compose...$(NC)"
	docker-compose up -d

docker-stop:
	@echo "$(GREEN)üê≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...$(NC)"
	docker-compose down

# ============================================================================
# üîÑ –£–¢–ò–õ–ò–¢–´
# ============================================================================

status:
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:$(NC)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Pip: $(shell $(PIP) --version)"
	@echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
	@$(PYTHON) scripts/check_database.py 2>/dev/null || echo "  ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
	@echo "–ú–∏–≥—Ä–∞—Ü–∏–∏:"
	@$(ALEMBIC) current 2>/dev/null || echo "  ‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"

update-deps:
	@echo "$(GREEN)üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements-dev.txt --upgrade

requirements:
	@echo "$(GREEN)üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt...$(NC)"
	$(PIP) freeze > requirements.txt

# ============================================================================
# üéØ –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´
# ============================================================================

# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
quick-setup: setup setup-db init-db migrate
	@echo "$(GREEN)üéâ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"
	@echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make run' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
pre-commit: format lint test
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É$(NC)"

# –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-cycle: clean install-dev init-db migrate test run

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
clean-all:
	@echo "$(RED)‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ë–î!$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		make clean; \
		rm -f test.db; \
		rm -rf migrations/; \
		echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"; \
	else \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi