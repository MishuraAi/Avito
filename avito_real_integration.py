"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MESSENGER API
–í–µ—Ä—Å–∏—è: 3.1 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ endpoints

–ü—Ä–æ–±–ª–µ–º–∞: 404 –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —á–∞—Ç–∞–º
–†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints –∏ scope
"""

import os
import asyncio
import json
import time
import base64
from datetime import datetime
from typing import List, Dict, Optional

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
required_packages = {
    'aiohttp': 'aiohttp',
    'dotenv': 'python-dotenv', 
    'google.generativeai': 'google-generativeai'
}

for module, package in required_packages.items():
    try:
        if module == 'dotenv':
            from dotenv import load_dotenv
            load_dotenv()
        elif module == 'google.generativeai':
            import google.generativeai as genai
        else:
            __import__(module)
    except ImportError:
        print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
        os.system(f"pip install {package}")
        if module == 'dotenv':
            from dotenv import load_dotenv
            load_dotenv()
        elif module == 'google.generativeai':
            import google.generativeai as genai

import aiohttp

class AvitoAutoResponderFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è Avito"""
    
    def __init__(self):
        self.client_id = os.getenv('AVITO_CLIENT_ID')
        self.client_secret = os.getenv('AVITO_CLIENT_SECRET')
        self.gemini_api_key = os.getenv('GEMINI_API_KEY')
        
        self.access_token = None
        self.token_expires_at = None
        self.base_url = "https://api.avito.ru"
        self.processed_messages = set()
        
        # –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        self.item_id = "7464870989"
        self.item_title = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤: —É–≤–µ–ª–∏—á–∏–º –ø—Ä–∏–±—ã–ª—å, —Å–æ–∫—Ä–∞—Ç–∏–º —Ä–∞—Å—Ö–æ–¥—ã"
        self.item_price = 3000
        
        print(f"üîß –ê–≤–∏—Ç–æ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        print(f"üì¶ –û–±—ä—è–≤–ª–µ–Ω–∏–µ: {self.item_title}")
        print(f"üí∞ –¶–µ–Ω–∞: {self.item_price}‚ÇΩ")
        print(f"üÜî ID: {self.item_id}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini AI
        if self.gemini_api_key:
            genai.configure(api_key=self.gemini_api_key)
            self.ai_model = genai.GenerativeModel('gemini-pro')
            print(f"üß† Gemini AI –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print(f"‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def get_access_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"""
        if self.access_token and self.token_expires_at and time.time() < self.token_expires_at:
            return self.access_token
        
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ access token —Å messenger scope...")
        
        auth_string = f"{self.client_id}:{self.client_secret}"
        auth_bytes = auth_string.encode('ascii')
        auth_b64 = base64.b64encode(auth_bytes).decode('ascii')
        
        headers = {
            'Authorization': f'Basic {auth_b64}',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ scope
        scope_variants = [
            'messenger autoload',
            'messenger', 
            'autoload messenger',
            'messenger:read messenger:write',
            'items:read messenger:read messenger:write'
        ]
        
        timeout = aiohttp.ClientTimeout(total=30)
        
        for scope in scope_variants:
            data = {
                'grant_type': 'client_credentials',
                'scope': scope
            }
            
            print(f"üîç –ü—Ä–æ–±—É–µ–º scope: {scope}")
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                try:
                    async with session.post(f"{self.base_url}/token", headers=headers, data=data) as response:
                        if response.status == 200:
                            token_data = await response.json()
                            self.access_token = token_data['access_token']
                            expires_in = token_data.get('expires_in', 3600)
                            self.token_expires_at = time.time() + expires_in - 60
                            
                            print(f"‚úÖ Token –ø–æ–ª—É—á–µ–Ω —Å scope: {scope}")
                            print(f"üîë Token: {self.access_token[:20]}...")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É —Ç–æ–∫–µ–Ω–∞
                            actual_scope = token_data.get('scope', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞: {actual_scope}")
                            
                            return self.access_token
                        else:
                            error_text = await response.text()
                            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è scope '{scope}': {response.status}")
                            continue
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    continue
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∏ —Å –æ–¥–Ω–∏–º scope!")
        return None
    
    async def test_messenger_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö messenger endpoints"""
        token = await self.get_access_token()
        if not token:
            return []
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        endpoints = [
            '/messenger/v1/chats',
            '/messenger/v2/chats', 
            '/messenger/v1/conversations',
            '/core/v1/messenger/chats',
            '/autoload/v1/messenger/chats',
            f'/messenger/v1/chats?item_id={self.item_id}',
            f'/core/v1/items/{self.item_id}/messages'
        ]
        
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ messenger endpoints...")
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            for endpoint in endpoints:
                try:
                    print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")
                    async with session.get(f"{self.base_url}{endpoint}", headers=headers) as response:
                        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                        
                        if response.status == 200:
                            data = await response.json()
                            print(f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢! –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)[:200]}...")
                            return data
                        elif response.status == 403:
                            print(f"üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (403) - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞")
                        elif response.status == 404:
                            print(f"‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                        else:
                            error_text = await response.text()
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status}: {error_text[:100]}...")
                            
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        print("‚ùå –ù–∏ –æ–¥–∏–Ω messenger endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return []
    
    async def alternative_message_check(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        token = await self.get_access_token()
        if not token:
            return []
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
        endpoints_to_try = [
            f'/core/v1/items/{self.item_id}',
            f'/core/v1/items/{self.item_id}/stats',
            f'/autoload/v1/items/{self.item_id}',
            f'/autoload/v1/items/{self.item_id}/contacts'
        ]
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            for endpoint in endpoints_to_try:
                try:
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {endpoint}")
                    async with session.get(f"{self.base_url}{endpoint}", headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)[:300]}...")
                        else:
                            print(f"‚ùå –°—Ç–∞—Ç—É—Å: {response.status}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return []
    
    def generate_ai_response(self, message_text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini AI"""
        try:
            prompt = f"""
–¢—ã –ø—Ä–æ–¥–∞–≤–µ—Ü —É—Å–ª—É–≥ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤ –Ω–∞ –ê–≤–∏—Ç–æ. –ö —Ç–µ–±–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç.

–¢–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤: —É–≤–µ–ª–∏—á–∏–º –ø—Ä–∏–±—ã–ª—å, —Å–æ–∫—Ä–∞—Ç–∏–º —Ä–∞—Å—Ö–æ–¥—ã"
–¶–µ–Ω–∞: 3000‚ÇΩ

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: {message_text}

–û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ–¥—á–µ—Ä–∫–Ω–∏ –≤—ã–≥–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ù–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.

–û–¢–í–ï–¢:
"""
            
            response = self.ai_model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
            return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤! ü§ñ –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?"

async def main():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MESSENGER API")
    print("=" * 50)
    
    bot = AvitoAutoResponderFixed()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    token = await bot.get_access_token()
    
    if not token:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º messenger endpoints
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ messenger endpoints...")
    await bot.test_messenger_endpoints()
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
    print("\n3Ô∏è‚É£ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    await bot.alternative_message_check()
    
    print("\n" + "=" * 50)
    print("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 50)
    
    print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print("1. üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Messenger API —É Avito")
    print("2. üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–ø–∞—Ä—Å–∏–Ω–≥ –≤–º–µ—Å—Ç–æ API")
    print("3. üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Avito API")
    print("4. üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    print(f"\nüìß –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: shaodubaki@gmail.com")
    print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: 79221800911")
    print(f"üÜî ID: 306348203")
    print(f"üì¶ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ID: {bot.item_id}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")