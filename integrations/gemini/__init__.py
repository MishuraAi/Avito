"""
ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Gemini AI

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini:
- client.py  - –ö–ª–∏–µ–Ω—Ç –¥–ª—è Gemini API —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
- prompts.py - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
- models.py  - –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/integrations/gemini/__init__.py
"""

from typing import Optional, Dict, List, Any
from dataclasses import dataclass
from enum import Enum

# –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
try:
    from .client import GeminiAPIClient
    CLIENT_AVAILABLE = True
except ImportError:
    CLIENT_AVAILABLE = False

try:
    from .prompts import GeminiPromptLibrary
    PROMPTS_AVAILABLE = True
except ImportError:
    PROMPTS_AVAILABLE = False


class GeminiModel(str, Enum):
    """–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini"""
    
    GEMINI_PRO = "gemini-pro"                    # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    GEMINI_PRO_VISION = "gemini-pro-vision"     # –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    GEMINI_ULTRA = "gemini-ultra"               # –°–∞–º–∞—è –º–æ—â–Ω–∞—è (–∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)


class GeminiRole(str, Enum):
    """–†–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Å Gemini"""
    
    USER = "user"           # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    MODEL = "model"         # –ú–æ–¥–µ–ª—å Gemini
    SYSTEM = "system"       # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏


@dataclass
class GeminiMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å Gemini"""
    
    role: GeminiRole
    content: str
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    metadata: Optional[Dict[str, Any]] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        return {
            "role": self.role.value,
            "parts": [{"text": self.content}]
        }


@dataclass
class GeminiResponse:
    """–û—Ç–≤–µ—Ç –æ—Ç Gemini API"""
    
    text: str
    model_used: str
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
    prompt_tokens: Optional[int] = None
    completion_tokens: Optional[int] = None
    total_tokens: Optional[int] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    finish_reason: Optional[str] = None
    safety_ratings: Optional[List[Dict]] = None
    raw_response: Optional[Dict[str, Any]] = None


class GeminiIntegrationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini"""
    
    def __init__(
        self,
        api_key: str,
        model: GeminiModel = GeminiModel.GEMINI_PRO,
        temperature: float = 0.7,
        max_output_tokens: int = 2048,
        top_p: float = 0.9,
        top_k: int = 40,
        request_timeout: int = 30,
        max_retries: int = 3,
        retry_delay: float = 1.0
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini
        
        Args:
            api_key: API –∫–ª—é—á Google Gemini
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            temperature: –¢–≤–æ—Ä—á–µ—Å–∫–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (0.0-1.0)
            max_output_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            top_p: Nucleus sampling –ø–∞—Ä–∞–º–µ—Ç—Ä
            top_k: Top-K sampling –ø–∞—Ä–∞–º–µ—Ç—Ä
            request_timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_retries: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞
            retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        
        self.api_key = api_key
        self.model = model
        self.temperature = temperature
        self.max_output_tokens = max_output_tokens
        self.top_p = top_p
        self.top_k = top_k
        self.request_timeout = request_timeout
        self.max_retries = max_retries
        self.retry_delay = retry_delay
    
    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        if not self.api_key:
            return False
        
        if not (0.0 <= self.temperature <= 1.0):
            return False
        
        if self.max_output_tokens <= 0:
            return False
        
        if not (0.0 <= self.top_p <= 1.0):
            return False
        
        if self.top_k <= 0:
            return False
        
        return True
    
    def get_generation_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è API"""
        
        return {
            "temperature": self.temperature,
            "max_output_tokens": self.max_output_tokens,
            "top_p": self.top_p,
            "top_k": self.top_k
        }


class GeminiException(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Gemini –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, message: str, error_code: Optional[str] = None):
        super().__init__(message)
        self.error_code = error_code


class GeminiAPIException(GeminiException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ Gemini API"""
    
    def __init__(self, message: str, status_code: int, error_code: Optional[str] = None):
        super().__init__(message, error_code)
        self.status_code = status_code


class GeminiRateLimitException(GeminiException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ Gemini"""
    
    def __init__(self, message: str, retry_after: int = 60):
        super().__init__(message)
        self.retry_after = retry_after


class GeminiSafetyException(GeminiException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Gemini"""
    
    def __init__(self, message: str, safety_ratings: List[Dict]):
        super().__init__(message)
        self.safety_ratings = safety_ratings


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
AVAILABLE_COMPONENTS = {
    "client": CLIENT_AVAILABLE,
    "prompts": PROMPTS_AVAILABLE
}

# –í–µ—Ä—Å–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
__version__ = "0.1.0"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    "GeminiIntegrationConfig",
    
    # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    "GeminiMessage",
    "GeminiResponse",
    
    # –ï–Ω—É–º—ã
    "GeminiModel",
    "GeminiRole",
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    "GeminiException",
    "GeminiAPIException",
    "GeminiRateLimitException",
    "GeminiSafetyException",
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    "AVAILABLE_COMPONENTS",
    "__version__"
]

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç
if CLIENT_AVAILABLE:
    __all__.append("GeminiAPIClient")

if PROMPTS_AVAILABLE:
    __all__.append("GeminiPromptLibrary")


def get_gemini_integration_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini"""
    
    return {
        "version": __version__,
        "available_components": AVAILABLE_COMPONENTS,
        "supported_models": [model.value for model in GeminiModel],
        "supported_features": [
            "–¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ê–≤–∏—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞",
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤",
            "–§–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        ]
    }


def create_default_config(api_key: str) -> GeminiIntegrationConfig:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Args:
        api_key: API –∫–ª—é—á Gemini
        
    Returns:
        GeminiIntegrationConfig: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ê–≤–∏—Ç–æ
    """
    
    return GeminiIntegrationConfig(
        api_key=api_key,
        model=GeminiModel.GEMINI_PRO,
        temperature=0.7,         # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å—é
        max_output_tokens=1024,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ê–≤–∏—Ç–æ
        top_p=0.9,              # –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        top_k=40,               # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        request_timeout=20,      # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∞–∂–Ω—ã
        max_retries=2,          # –ú–∏–Ω–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        retry_delay=1.0         # –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    )