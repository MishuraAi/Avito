"""
üìù –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è Google Gemini –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ê–≤–∏—Ç–æ

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
- –ê–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ê–≤–∏—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/integrations/gemini/prompts.py
"""

from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

from ...core.config import MessageType, ResponseStyle


class PromptCategory(str, Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    ANALYSIS = "analysis"           # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    GENERATION = "generation"       # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    CLASSIFICATION = "classification" # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    SENTIMENT = "sentiment"         # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    SYSTEM = "system"              # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏


@dataclass
class PromptTemplate:
    """–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞"""
    
    name: str
    category: PromptCategory
    template: str
    variables: List[str]
    description: str
    
    def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        missing_vars = [var for var in self.variables if var not in kwargs]
        if missing_vars:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        
        return self.template.format(**kwargs)


class GeminiPromptLibrary:
    """
    üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è Gemini
    
    –°–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã —Å –ê–≤–∏—Ç–æ:
    - –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        self.prompts: Dict[str, PromptTemplate] = {}
        self._initialize_prompts()
    
    def _initialize_prompts(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self._add_system_prompts()
        
        # –ü—Ä–æ–º–ø—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self._add_analysis_prompts()
        
        # –ü—Ä–æ–º–ø—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self._add_generation_prompts()
        
        # –ü—Ä–æ–º–ø—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self._add_classification_prompts()
        
        # –ü—Ä–æ–º–ø—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self._add_sentiment_prompts()
    
    def _add_system_prompts(self) -> None:
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        self.prompts["system_avito_seller"] = PromptTemplate(
            name="system_avito_seller",
            category=PromptCategory.SYSTEM,
            template="""
–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –ê–≤–∏—Ç–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏.

–¢–í–û–ò –ü–†–ò–ù–¶–ò–ü–´:
- –í—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤ –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω
- –û—Ç–≤–µ—á–∞–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –°—Ç—Ä–µ–º–∏—à—å—Å—è –∫ –ø—Ä–æ–¥–∞–∂–µ, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤–æ
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å —á–µ—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
- –ê–¥–∞–ø—Ç–∏—Ä—É–µ—à—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–¥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è

–ö–û–ù–¢–ï–ö–°–¢ –†–ê–ë–û–¢–´:
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: –ê–≤–∏—Ç–æ
- –¶–µ–ª—å: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥–∞–∂
- –ê—É–¥–∏—Ç–æ—Ä–∏—è: –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –ö—Ä–∞—Ç–∫–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)

–ü–û–ú–ù–ò:
- –ö–∞–∂–¥—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤–∞–∂–µ–Ω
- –ß–µ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç –¥–æ–≤–µ—Ä–∏–µ  
- –ë—ã—Å—Ç—Ä–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é
            """,
            variables=[],
            description="–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ –ê–≤–∏—Ç–æ"
        )
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.prompts["system_analyzer"] = PromptTemplate(
            name="system_analyzer",
            category=PromptCategory.SYSTEM,
            template="""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç–æ—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.

–¢–í–û–ò –ù–ê–í–´–ö–ò:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Ü–µ–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –≤—Å—Ç—Ä–µ—á–∞, etc.)
- –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
- –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
- –í—ã—è–≤–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞

–û–¢–í–ï–ß–ê–ô –í–°–ï–ì–î–ê –í JSON –§–û–†–ú–ê–¢–ï:
{
    "message_type": "price_question|availability|meeting_request|product_info|delivery_question|general_question|greeting|complaint|spam",
    "confidence": 0.0-1.0,
    "sentiment": "positive|negative|neutral", 
    "urgency": "low|medium|high",
    "intent": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è",
    "keywords": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ", "–∫–ª—é—á–µ–≤—ã–µ", "—Å–ª–æ–≤–∞"],
    "serious_buyer": true|false
}

–ë–£–î–¨ –¢–û–ß–ï–ù –ò –û–ë–™–ï–ö–¢–ò–í–ï–ù –í –ê–ù–ê–õ–ò–ó–ï.
            """,
            variables=[],
            description="–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
    
    def _add_analysis_prompts(self) -> None:
        """–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.prompts["analyze_message"] = PromptTemplate(
            name="analyze_message",
            category=PromptCategory.ANALYSIS,
            template="""
–ö–û–ù–¢–ï–ö–°–¢ –¢–û–í–ê–†–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {product_title}
- –¶–µ–Ω–∞: {product_price} —Ä—É–±.
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category}
- –û–ø–∏—Å–∞–Ω–∏–µ: {product_description}

–ò–°–¢–û–†–ò–Ø –û–ë–©–ï–ù–ò–Ø:
{conversation_history}

–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–ö–£–ü–ê–¢–ï–õ–Ø:
"{message_text}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
            """,
            variables=["product_title", "product_price", "product_category", "product_description", "conversation_history", "message_text"],
            description="–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–æ–≤–∞—Ä–∞"
        )
        
        # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.prompts["quick_analyze"] = PromptTemplate(
            name="quick_analyze",
            category=PromptCategory.ANALYSIS,
            template="""
–ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø:

"{message_text}"

–í–µ—Ä–Ω–∏ JSON —Å —Ç–∏–ø–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é.
            """,
            variables=["message_text"],
            description="–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
    
    def _add_generation_prompts(self) -> None:
        """–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        self.prompts["generate_response"] = PromptTemplate(
            name="generate_response",
            category=PromptCategory.GENERATION,
            template="""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {product_title}
- –¶–µ–Ω–∞: {product_price} —Ä—É–±.
- –°–æ—Å—Ç–æ—è–Ω–∏–µ: {product_condition}
- –û–ø–∏—Å–∞–Ω–∏–µ: {product_description}
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {product_location}
- –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_info}
- –¢–æ—Ä–≥: {negotiation_info}

–ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–Ø:
- –¢–∏–ø: {message_type}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}
- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}
- –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent}

–°–û–û–ë–©–ï–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–Ø:
"{user_message}"

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê: {response_style}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:
1. –û—Ç–≤–µ—á–∞–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
2. –£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
3. –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
4. –î–ª–∏–Ω–∞: 50-200 —Å–∏–º–≤–æ–ª–æ–≤
5. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
6. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Å—Ç—Ä–µ—á—É/–æ—Å–º–æ—Ç—Ä

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç:
            """,
            variables=[
                "product_title", "product_price", "product_condition", "product_description",
                "product_location", "delivery_info", "negotiation_info", "message_type",
                "sentiment", "urgency", "intent", "user_message", "response_style"
            ],
            description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
        )
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        self.prompts["faq_response"] = PromptTemplate(
            name="faq_response",
            category=PromptCategory.GENERATION,
            template="""
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "{question}"

–≠—Ç–æ —á–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞: {question_type}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞:
{answer_info}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤):
            """,
            variables=["question", "question_type", "answer_info"],
            description="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
        )
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        self.prompts["personalized_response"] = PromptTemplate(
            name="personalized_response",
            category=PromptCategory.GENERATION,
            template="""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ö–£–ü–ê–¢–ï–õ–ï:
- –ò–º—è: {buyer_name}
- –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è: {conversation_count} —Å–æ–æ–±—â–µ–Ω–∏–π
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {previous_interests}
- –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {buyer_seriousness}

–¢–ï–ö–£–©–ò–ô –ó–ê–ü–†–û–°: "{current_message}"

–¢–û–í–ê–†: {product_title} –∑–∞ {product_price} —Ä—É–±.

–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ –∏ —É—á–∏—Ç—ã–≤–∞—è –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è:
            """,
            variables=["buyer_name", "conversation_count", "previous_interests", "buyer_seriousness", "current_message", "product_title", "product_price"],
            description="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"
        )
    
    def _add_classification_prompts(self) -> None:
        """–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.prompts["classify_message"] = PromptTemplate(
            name="classify_message",
            category=PromptCategory.CLASSIFICATION,
            template="""
–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Ç–∏–ø —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

"{message}"

–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã:
- price_question (–≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–µ, —Ç–æ—Ä–≥–µ)
- availability (–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞)
- product_info (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ)
- meeting_request (–∑–∞–ø—Ä–æ—Å –≤—Å—Ç—Ä–µ—á–∏, –æ—Å–º–æ—Ç—Ä–∞)
- delivery_question (–≤–æ–ø—Ä–æ—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏)
- general_question (–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã)
- greeting (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
- complaint (–∂–∞–ª–æ–±—ã)
- spam (—Å–ø–∞–º)

–í–µ—Ä–Ω–∏ JSON: {{"type": "—Ç–∏–ø", "confidence": 0.0-1.0}}
            """,
            variables=["message"],
            description="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        self.prompts["classify_priority"] = PromptTemplate(
            name="classify_priority",
            category=PromptCategory.CLASSIFICATION,
            template="""
–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:

"{message}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
- urgent (—Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
- high (–≤–∞–∂–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å/–∑–∞–ø—Ä–æ—Å)
- normal (–æ–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
- low (–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∑–∂–µ)

–í–µ—Ä–Ω–∏ JSON: {{"priority": "—É—Ä–æ–≤–µ–Ω—å", "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}
            """,
            variables=["message", "context"],
            description="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç–≤–µ—Ç–∞"
        )
    
    def _add_sentiment_prompts(self) -> None:
        """–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        self.prompts["analyze_sentiment"] = PromptTemplate(
            name="analyze_sentiment",
            category=PromptCategory.SENTIMENT,
            template="""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

"{message}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (positive/negative/neutral)
2. –£—Ä–æ–≤–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0)
3. –£—Ä–æ–≤–µ–Ω—å —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏ (0.0-1.0)
4. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ (0.0-1.0)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON:
{
    "sentiment": "positive|negative|neutral",
    "interest_level": 0.0-1.0,
    "frustration_level": 0.0-1.0,
    "purchase_readiness": 0.0-1.0,
    "emotional_indicators": ["—Å–ø–∏—Å–æ–∫", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö", "–º–∞—Ä–∫–µ—Ä–æ–≤"]
}
            """,
            variables=["message"],
            description="–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏"
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        self.prompts["assess_buyer_seriousness"] = PromptTemplate(
            name="assess_buyer_seriousness",
            category=PromptCategory.SENTIMENT,
            template="""
–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ü–µ–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:

"{message}"

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–µ
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—Å—Ç—Ä–µ—á–µ/–æ—Å–º–æ—Ç—Ä—É
- –û–±—Å—É–∂–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã
- –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

–í–µ—Ä–Ω–∏ –æ—Ü–µ–Ω–∫—É –≤ JSON:
{
    "seriousness_score": 0.0-1.0,
    "category": "tire_kicker|interested|serious|ready_to_buy",
    "indicators": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"],
    "recommendation": "–∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
}
            """,
            variables=["message", "context"],
            description="–û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
        )
    
    def get_prompt(self, name: str) -> Optional[PromptTemplate]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            Optional[PromptTemplate]: –ü—Ä–æ–º–ø—Ç –∏–ª–∏ None
        """
        
        return self.prompts.get(name)
    
    def get_prompts_by_category(self, category: PromptCategory) -> List[PromptTemplate]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            
        Returns:
            List[PromptTemplate]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        
        return [
            prompt for prompt in self.prompts.values()
            if prompt.category == category
        ]
    
    def list_prompts(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        return list(self.prompts.keys())
    
    def search_prompts(self, query: str) -> List[PromptTemplate]:
        """
        –ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            List[PromptTemplate]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        """
        
        query_lower = query.lower()
        results = []
        
        for prompt in self.prompts.values():
            if (query_lower in prompt.name.lower() or 
                query_lower in prompt.description.lower() or
                query_lower in prompt.template.lower()):
                results.append(prompt)
        
        return results
    
    def format_prompt(self, name: str, **kwargs) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            **kwargs: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        
        prompt = self.get_prompt(name)
        if not prompt:
            raise ValueError(f"–ü—Ä–æ–º–ø—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return prompt.format(**kwargs)
    
    def create_custom_prompt(
        self,
        name: str,
        category: PromptCategory,
        template: str,
        variables: List[str],
        description: str
    ) -> None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            template: –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
            variables: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            description: –û–ø–∏—Å–∞–Ω–∏–µ
        """
        
        if name in self.prompts:
            raise ValueError(f"–ü—Ä–æ–º–ø—Ç '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        self.prompts[name] = PromptTemplate(
            name=name,
            category=category,
            template=template,
            variables=variables,
            description=description
        )
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º"""
        
        stats = {
            "total_prompts": len(self.prompts),
            "by_category": {}
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category in PromptCategory:
            count = len(self.get_prompts_by_category(category))
            stats["by_category"][category.value] = count
        
        return stats


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
prompt_library = GeminiPromptLibrary()

# –ì–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
QUICK_PROMPTS = {
    "analyze": "analyze_message",
    "respond": "generate_response", 
    "classify": "classify_message",
    "sentiment": "analyze_sentiment"
}

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    "PromptCategory",
    "PromptTemplate", 
    "GeminiPromptLibrary",
    "prompt_library",
    "QUICK_PROMPTS"
]