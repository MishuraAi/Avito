"""
üîå API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ê–≤–∏—Ç–æ API

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ê–≤–∏—Ç–æ API:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting –∏ –æ—à–∏–±–æ–∫

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: https://developers.avito.ru/

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/integrations/avito/api_client.py
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from urllib.parse import urljoin

import aiohttp
from aiohttp import ClientSession, ClientTimeout

from ..base import BaseIntegration
from . import (
    AvitoIntegrationConfig,
    AvitoMessage, 
    AvitoAd,
    AvitoChat,
    AvitoMessageStatus,
    AvitoAdStatus,
    AvitoAPIException,
    AvitoRateLimitException
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class AvitoAPIClient(BaseIntegration):
    """
    üîå –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ê–≤–∏—Ç–æ
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ê–≤–∏—Ç–æ API:
    - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ OAuth 2.0
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    
    def __init__(self, config: AvitoIntegrationConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ê–≤–∏—Ç–æ
        """
        
        super().__init__("avito_api", config.__dict__)
        
        self.config = config
        self.session: Optional[ClientSession] = None
        
        # –¢–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.access_token: Optional[str] = None
        self.refresh_token: Optional[str] = None
        self.token_expires_at: Optional[datetime] = None
        
        # Rate limiting
        self.requests_made = 0
        self.rate_limit_reset_time = datetime.now()
        
        logger.info("–ê–≤–∏—Ç–æ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–≤–∏—Ç–æ API"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
            timeout = ClientTimeout(total=self.config.request_timeout)
            self.session = ClientSession(timeout=timeout)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            success = await self._authenticate()
            
            if success:
                self.is_connected = True
                self.connection_time = datetime.now()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–≤–∏—Ç–æ API —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ê–≤–∏—Ç–æ API")
            
            return success
            
        except Exception as e:
            self.last_error = str(e)
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ê–≤–∏—Ç–æ API: %s", e)
            return False
    
    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ê–≤–∏—Ç–æ API"""
        
        if self.session:
            await self.session.close()
            self.session = None
        
        self.is_connected = False
        self.access_token = None
        self.refresh_token = None
        
        logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ê–≤–∏—Ç–æ API")
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if not await self._ensure_valid_token():
                return False
            
            # –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = await self._make_request("GET", "/core/v1/accounts/self/")
            return response is not None
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ health check –ê–≤–∏—Ç–æ API: %s", e)
            return False
    
    async def get_messages(
        self,
        limit: int = 50,
        unread_only: bool = False,
        chat_id: Optional[str] = None
    ) -> List[AvitoMessage]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            unread_only: –¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            List[AvitoMessage]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        
        start_time = datetime.now()
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                "limit": min(limit, 100),  # API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            }
            
            if unread_only:
                params["unread_only"] = "true"
            
            if chat_id:
                params["chat_id"] = chat_id
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            endpoint = "/messenger/v1/accounts/self/chats/messages/"
            response = await self._make_request("GET", endpoint, params=params)
            
            if not response:
                return []
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            messages = []
            for message_data in response.get("messages", []):
                try:
                    message = self._parse_message(message_data)
                    messages.append(message)
                except Exception as e:
                    logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            self.update_metrics(True, processing_time)
            
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(messages))
            return messages
            
        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            self.update_metrics(False, processing_time)
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %s", e)
            return []
    
    async def send_message(
        self,
        chat_id: str,
        text: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        
        start_time = datetime.now()
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            payload = {
                "message": {
                    "text": text,
                    "type": "text"
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            endpoint = f"/messenger/v1/accounts/self/chats/{chat_id}/messages/"
            response = await self._make_request("POST", endpoint, json=payload)
            
            success = response is not None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            self.update_metrics(success, processing_time)
            
            if success:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %s", chat_id)
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %s", chat_id)
            
            return success
            
        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            self.update_metrics(False, processing_time)
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
            return False
    
    async def mark_message_as_read(self, message_id: str) -> bool:
        """
        –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
        
        Args:
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        
        try:
            endpoint = f"/messenger/v1/accounts/self/chats/messages/{message_id}/read/"
            response = await self._make_request("POST", endpoint)
            
            success = response is not None
            
            if success:
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ %s –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", message_id)
            
            return success
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: %s", e)
            return False
    
    async def get_ads(
        self,
        limit: int = 50,
        status: Optional[AvitoAdStatus] = None
    ) -> List[AvitoAd]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            status: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            List[AvitoAd]: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        """
        
        start_time = datetime.now()
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                "limit": min(limit, 100)
            }
            
            if status:
                params["status"] = status.value
            
            # –ó–∞–ø—Ä–æ—Å
            endpoint = "/core/v1/accounts/self/items/"
            response = await self._make_request("GET", endpoint, params=params)
            
            if not response:
                return []
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            ads = []
            for ad_data in response.get("items", []):
                try:
                    ad = self._parse_ad(ad_data)
                    ads.append(ad)
                except Exception as e:
                    logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: %s", e)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            self.update_metrics(True, processing_time)
            
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d –æ–±—ä—è–≤–ª–µ–Ω–∏–π", len(ads))
            return ads
            
        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            self.update_metrics(False, processing_time)
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: %s", e)
            return []
    
    async def get_chats(self, limit: int = 50) -> List[AvitoChat]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
            
        Returns:
            List[AvitoChat]: –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        """
        
        try:
            params = {"limit": min(limit, 100)}
            
            endpoint = "/messenger/v1/accounts/self/chats/"
            response = await self._make_request("GET", endpoint, params=params)
            
            if not response:
                return []
            
            chats = []
            for chat_data in response.get("chats", []):
                try:
                    chat = self._parse_chat(chat_data)
                    chats.append(chat)
                except Exception as e:
                    logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–∞: %s", e)
            
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ %d —á–∞—Ç–æ–≤", len(chats))
            return chats
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: %s", e)
            return []
    
    async def _authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –ê–≤–∏—Ç–æ API"""
        
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            auth_data = {
                "client_id": self.config.client_id,
                "client_secret": self.config.client_secret,
                "grant_type": "client_credentials"
            }
            
            # –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞
            url = urljoin(self.config.api_base_url, "/token/")
            
            async with self.session.post(url, data=auth_data) as response:
                if response.status == 200:
                    token_data = await response.json()
                    
                    self.access_token = token_data.get("access_token")
                    self.refresh_token = token_data.get("refresh_token")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    expires_in = token_data.get("expires_in", 3600)
                    self.token_expires_at = datetime.now() + timedelta(seconds=expires_in)
                    
                    logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –ê–≤–∏—Ç–æ API —É—Å–ø–µ—à–Ω–∞")
                    return True
                    
                else:
                    error_text = await response.text()
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %d - %s", response.status, error_text)
                    return False
                    
        except Exception as e:
            logger.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %s", e)
            return False
    
    async def _ensure_valid_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        
        if not self.access_token:
            return await self._authenticate()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Å –∑–∞–ø–∞—Å–æ–º 5 –º–∏–Ω—É—Ç)
        if self.token_expires_at and datetime.now() >= self.token_expires_at - timedelta(minutes=5):
            logger.info("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            return await self._authenticate()
        
        return True
    
    async def _make_request(
        self,
        method: str,
        endpoint: str,
        params: Optional[Dict] = None,
        json: Optional[Dict] = None
    ) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥
            endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            json: JSON –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Optional[Dict]: –û—Ç–≤–µ—Ç API –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        await self._check_rate_limit()
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
        if not await self._ensure_valid_token():
            raise AvitoAPIException("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", 401)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        url = urljoin(self.config.api_base_url, endpoint)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json"
        }
        
        try:
            async with self.session.request(
                method=method,
                url=url,
                params=params,
                json=json,
                headers=headers
            ) as response:
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                self.requests_made += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                if response.status == 200:
                    return await response.json()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                elif response.status == 429:
                    # Rate limiting
                    retry_after = int(response.headers.get("Retry-After", 60))
                    raise AvitoRateLimitException(
                        "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤", 
                        retry_after
                    )
                
                else:
                    error_text = await response.text()
                    raise AvitoAPIException(
                        f"–û—à–∏–±–∫–∞ API: {error_text}",
                        response.status
                    )
                    
        except aiohttp.ClientError as e:
            raise AvitoAPIException(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", 0)
    
    async def _check_rate_limit(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ rate limiting"""
        
        now = datetime.now()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –æ–∫–Ω–æ
        if now >= self.rate_limit_reset_time:
            self.requests_made = 0
            self.rate_limit_reset_time = now + timedelta(seconds=self.config.rate_limit_window)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if self.requests_made >= self.config.rate_limit_requests:
            sleep_time = (self.rate_limit_reset_time - now).total_seconds()
            if sleep_time > 0:
                logger.warning("Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ %.1f —Å–µ–∫", sleep_time)
                await asyncio.sleep(sleep_time)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                self.requests_made = 0
                self.rate_limit_reset_time = datetime.now() + timedelta(
                    seconds=self.config.rate_limit_window
                )
    
    def _parse_message(self, data: Dict[str, Any]) -> AvitoMessage:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
        created_at = datetime.fromisoformat(
            data["created"].replace("Z", "+00:00")
        )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = AvitoMessageStatus.READ if data.get("read", False) else AvitoMessageStatus.UNREAD
        
        return AvitoMessage(
            message_id=data["id"],
            chat_id=data["chat_id"],
            ad_id=data["item_id"],
            user_id=data["author_id"],
            text=data["text"],
            created_at=created_at,
            status=status,
            is_from_seller=data.get("direction") == "to_user",
            attachments=data.get("attachments", []),
            raw_data=data
        )
    
    def _parse_ad(self, data: Dict[str, Any]) -> AvitoAd:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
        created_at = datetime.fromisoformat(
            data["created_at"].replace("Z", "+00:00")
        )
        updated_at = datetime.fromisoformat(
            data["updated_at"].replace("Z", "+00:00")
        )
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = AvitoAdStatus(data.get("status", "active"))
        
        return AvitoAd(
            ad_id=data["id"],
            title=data["title"],
            price=data.get("price"),
            description=data.get("description", ""),
            category=data.get("category", {}).get("name", ""),
            status=status,
            created_at=created_at,
            updated_at=updated_at,
            images=data.get("images", []),
            location=data.get("location", {}).get("name"),
            views_count=data.get("stats", {}).get("views", 0),
            contacts_count=data.get("stats", {}).get("contacts", 0),
            raw_data=data
        )
    
    def _parse_chat(self, data: Dict[str, Any]) -> AvitoChat:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_at = None
        if data.get("last_message", {}).get("created"):
            last_message_at = datetime.fromisoformat(
                data["last_message"]["created"].replace("Z", "+00:00")
            )
        
        return AvitoChat(
            chat_id=data["id"],
            ad_id=data["item_id"],
            user_id=data["user_id"],
            user_name=data.get("user_name"),
            messages_count=data.get("messages_count", 0),
            last_message_at=last_message_at,
            unread_count=data.get("unread_count", 0),
            is_blocked=data.get("blocked", False),
            is_archived=data.get("archived", False)
        )


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def create_avito_api_client(config: AvitoIntegrationConfig) -> AvitoAPIClient:
    """
    üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞ –ê–≤–∏—Ç–æ
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
    Returns:
        AvitoAPIClient: –ì–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ –∫–ª–∏–µ–Ω—Ç
    """
    
    if not config.validate():
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ê–≤–∏—Ç–æ API")
    
    client = AvitoAPIClient(config)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
    success = await client.connect()
    if not success:
        raise AvitoAPIException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ê–≤–∏—Ç–æ API", 0)
    
    logger.info("–ê–≤–∏—Ç–æ API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    return client