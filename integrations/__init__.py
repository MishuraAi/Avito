"""
üîó –ü–∞–∫–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ Avito AI Responder

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏:
- avito/   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –ê–≤–∏—Ç–æ –∏ Selenium –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- gemini/  - –ö–ª–∏–µ–Ω—Ç –∏ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Google Gemini API
- base/    - –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/integrations/__init__.py
"""

from typing import Dict, Any, Optional
from abc import ABC, abstractmethod
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
logger = logging.getLogger(__name__)


class BaseIntegration(ABC):
    """
    üèóÔ∏è –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self, name: str, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        self.name = name
        self.config = config
        self.is_connected = False
        self.last_error: Optional[str] = None
        self.connection_time: Optional[datetime] = None
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "avg_response_time": 0.0,
            "last_request_time": None
        }
        
        logger.info("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è %s –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", self.name)
    
    @abstractmethod
    async def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        pass
    
    @abstractmethod
    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        pass
    
    @abstractmethod
    async def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        pass
    
    def update_metrics(self, success: bool, response_time: float = 0.0) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        self.metrics["total_requests"] += 1
        self.metrics["last_request_time"] = datetime.now()
        
        if success:
            self.metrics["successful_requests"] += 1
        else:
            self.metrics["failed_requests"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if response_time > 0:
            current_avg = self.metrics["avg_response_time"]
            total_requests = self.metrics["total_requests"]
            
            self.metrics["avg_response_time"] = (
                (current_avg * (total_requests - 1) + response_time) / total_requests
            )
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        success_rate = 0.0
        if self.metrics["total_requests"] > 0:
            success_rate = self.metrics["successful_requests"] / self.metrics["total_requests"]
        
        return {
            **self.metrics,
            "success_rate": success_rate,
            "is_connected": self.is_connected,
            "last_error": self.last_error,
            "connection_time": self.connection_time
        }
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        return {
            "name": self.name,
            "connected": self.is_connected,
            "last_error": self.last_error,
            "uptime": (
                (datetime.now() - self.connection_time).total_seconds()
                if self.connection_time else 0
            )
        }


class IntegrationManager:
    """
    üéõÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        
        self.integrations: Dict[str, BaseIntegration] = {}
        self.startup_time = datetime.now()
        
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def register_integration(self, integration: BaseIntegration) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            integration: –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        
        if integration.name in self.integrations:
            logger.warning("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è %s —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", integration.name)
            return
        
        self.integrations[integration.name] = integration
        logger.info("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", integration.name)
    
    async def connect_all(self) -> Dict[str, bool]:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
        """
        
        results = {}
        
        for name, integration in self.integrations.items():
            try:
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s...", name)
                success = await integration.connect()
                results[name] = success
                
                if success:
                    logger.info("‚úÖ %s –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ", name)
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s", name)
                    
            except Exception as e:
                logger.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ %s: %s", name, e)
                results[name] = False
        
        return results
    
    async def disconnect_all(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        
        for name, integration in self.integrations.items():
            try:
                logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç %s...", name)
                await integration.disconnect()
                logger.info("‚úÖ %s –æ—Ç–∫–ª—é—á–µ–Ω", name)
                
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç %s: %s", name, e)
    
    async def health_check_all(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        
        Returns:
            Dict[str, bool]: –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        
        results = {}
        
        for name, integration in self.integrations.items():
            try:
                is_healthy = await integration.health_check()
                results[name] = is_healthy
                
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ %s: %s", name, e)
                results[name] = False
        
        return results
    
    def get_integration(self, name: str) -> Optional[BaseIntegration]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            
        Returns:
            Optional[BaseIntegration]: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–ª–∏ None
        """
        
        return self.integrations.get(name)
    
    def get_all_metrics(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        
        return {
            name: integration.get_metrics()
            for name, integration in self.integrations.items()
        }
    
    def get_all_statuses(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        
        return {
            name: integration.get_status()
            for name, integration in self.integrations.items()
        }
    
    def get_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        total_integrations = len(self.integrations)
        connected_count = sum(
            1 for integration in self.integrations.values()
            if integration.is_connected
        )
        
        return {
            "total_integrations": total_integrations,
            "connected_integrations": connected_count,
            "uptime": (datetime.now() - self.startup_time).total_seconds(),
            "integrations": list(self.integrations.keys())
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
integration_manager = IntegrationManager()

# –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
__version__ = "0.1.0"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã
__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    "BaseIntegration",
    "IntegrationManager",
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    "integration_manager",
    
    # –í–µ—Ä—Å–∏—è
    "__version__"
]