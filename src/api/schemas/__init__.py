"""
üìã Pydantic —Å—Ö–µ–º—ã –¥–ª—è API Avito AI Responder

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ Pydantic —Å—Ö–µ–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API:
- base.py      - –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã –∏ –º–∏–∫—Å–∏–Ω—ã
- auth.py      - –°—Ö–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- users.py     - –°—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
- messages.py  - –°—Ö–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∏–∞–ª–æ–≥–æ–≤
- responses.py - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/api/schemas/__init__.py
"""

from typing import Dict, Any, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è
try:
    from .base import BaseSchema, PaginatedResponse, ErrorResponse, SuccessResponse
    BASE_SCHEMAS_AVAILABLE = True
except ImportError:
    BASE_SCHEMAS_AVAILABLE = False

try:
    from .auth import LoginRequest, LoginResponse, TokenResponse, RegisterRequest
    AUTH_SCHEMAS_AVAILABLE = True
except ImportError:
    AUTH_SCHEMAS_AVAILABLE = False

try:
    from .users import (
        UserResponse, UserCreate, UserUpdate,
        SellerResponse, SellerCreate, SellerUpdate,
        UserProfileResponse, SellerSettingsResponse
    )
    USER_SCHEMAS_AVAILABLE = True
except ImportError:
    USER_SCHEMAS_AVAILABLE = False

try:
    from .messages import (
        MessageResponse, MessageCreate, MessageUpdate,
        ConversationResponse, ConversationCreate, ConversationUpdate,
        MessageTemplateResponse, MessageTemplateCreate
    )
    MESSAGE_SCHEMAS_AVAILABLE = True
except ImportError:
    MESSAGE_SCHEMAS_AVAILABLE = False

try:
    from .responses import APIResponse, ErrorDetails, ValidationError
    RESPONSE_SCHEMAS_AVAILABLE = True
except ImportError:
    RESPONSE_SCHEMAS_AVAILABLE = False


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º
AVAILABLE_SCHEMAS = {
    "base": BASE_SCHEMAS_AVAILABLE,
    "auth": AUTH_SCHEMAS_AVAILABLE,
    "users": USER_SCHEMAS_AVAILABLE,
    "messages": MESSAGE_SCHEMAS_AVAILABLE,
    "responses": RESPONSE_SCHEMAS_AVAILABLE
}

# –í–µ—Ä—Å–∏—è —Å—Ö–µ–º
__version__ = "1.0.0"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    "AVAILABLE_SCHEMAS",
    "__version__"
]

# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if BASE_SCHEMAS_AVAILABLE:
    __all__.extend([
        "BaseSchema",
        "PaginatedResponse",
        "ErrorResponse", 
        "SuccessResponse"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if AUTH_SCHEMAS_AVAILABLE:
    __all__.extend([
        "LoginRequest",
        "LoginResponse",
        "TokenResponse",
        "RegisterRequest"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if USER_SCHEMAS_AVAILABLE:
    __all__.extend([
        "UserResponse",
        "UserCreate", 
        "UserUpdate",
        "SellerResponse",
        "SellerCreate",
        "SellerUpdate",
        "UserProfileResponse",
        "SellerSettingsResponse"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if MESSAGE_SCHEMAS_AVAILABLE:
    __all__.extend([
        "MessageResponse",
        "MessageCreate",
        "MessageUpdate", 
        "ConversationResponse",
        "ConversationCreate",
        "ConversationUpdate",
        "MessageTemplateResponse",
        "MessageTemplateCreate"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if RESPONSE_SCHEMAS_AVAILABLE:
    __all__.extend([
        "APIResponse",
        "ErrorDetails",
        "ValidationError"
    ])


def get_schemas_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö"""
    
    return {
        "version": __version__,
        "available_schemas": AVAILABLE_SCHEMAS,
        "total_schema_modules": len(AVAILABLE_SCHEMAS),
        "schema_categories": {
            "base": ["BaseSchema", "PaginatedResponse", "ErrorResponse", "SuccessResponse"] if BASE_SCHEMAS_AVAILABLE else [],
            "auth": ["LoginRequest", "LoginResponse", "TokenResponse", "RegisterRequest"] if AUTH_SCHEMAS_AVAILABLE else [],
            "users": ["UserResponse", "SellerResponse", "UserProfileResponse", "SellerSettingsResponse"] if USER_SCHEMAS_AVAILABLE else [],
            "messages": ["MessageResponse", "ConversationResponse", "MessageTemplateResponse"] if MESSAGE_SCHEMAS_AVAILABLE else [],
            "responses": ["APIResponse", "ErrorDetails", "ValidationError"] if RESPONSE_SCHEMAS_AVAILABLE else []
        }
    }


def get_all_schemas() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º"""
    
    schemas = []
    
    if BASE_SCHEMAS_AVAILABLE:
        schemas.extend(["BaseSchema", "PaginatedResponse", "ErrorResponse", "SuccessResponse"])
    
    if AUTH_SCHEMAS_AVAILABLE:
        schemas.extend(["LoginRequest", "LoginResponse", "TokenResponse", "RegisterRequest"])
    
    if USER_SCHEMAS_AVAILABLE:
        schemas.extend([
            "UserResponse", "UserCreate", "UserUpdate",
            "SellerResponse", "SellerCreate", "SellerUpdate", 
            "UserProfileResponse", "SellerSettingsResponse"
        ])
    
    if MESSAGE_SCHEMAS_AVAILABLE:
        schemas.extend([
            "MessageResponse", "MessageCreate", "MessageUpdate",
            "ConversationResponse", "ConversationCreate", "ConversationUpdate",
            "MessageTemplateResponse", "MessageTemplateCreate"
        ])
    
    if RESPONSE_SCHEMAS_AVAILABLE:
        schemas.extend(["APIResponse", "ErrorDetails", "ValidationError"])
    
    return schemas


logger.info("API —Å—Ö–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: %s", AVAILABLE_SCHEMAS)