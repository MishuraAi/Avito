"""
üìã –ë–∞–∑–æ–≤—ã–µ Pydantic —Å—Ö–µ–º—ã –¥–ª—è API

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã –∏ –º–∏–∫—Å–∏–Ω—ã:
- BaseSchema - –±–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
- PaginatedResponse - —Å—Ö–µ–º–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤  
- ErrorResponse - —Å—Ö–µ–º–∞ –¥–ª—è –æ—à–∏–±–æ–∫
- SuccessResponse - —Å—Ö–µ–º–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –û–±—â–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/api/schemas/base.py
"""

import uuid
from datetime import datetime
from typing import Generic, TypeVar, Optional, List, Dict, Any, Union

from pydantic import BaseModel, Field, validator, root_validator
from pydantic.generics import GenericModel


# TypeVar –¥–ª—è Generic —Å—Ö–µ–º
T = TypeVar('T')


class BaseSchema(BaseModel):
    """
    üìã –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö API –º–æ–¥–µ–ª–µ–π
    
    –í–∫–ª—é—á–∞–µ—Ç –æ–±—â–∏–µ –ø–æ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    
    class Config:
        # –†–∞–∑—Ä–µ—à–∏—Ç—å ORM –º–æ–¥–µ–ª–∏
        orm_mode = True
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å enum –∑–Ω–∞—á–µ–Ω–∏—è
        use_enum_values = True
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏
        validate_assignment = True
        
        # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
        allow_mutation = True
        
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è datetime –≤ ISO —Ñ–æ—Ä–º–∞—Ç
        json_encoders = {
            datetime: lambda v: v.isoformat() if v else None,
            uuid.UUID: lambda v: str(v) if v else None
        }
        
        # –ü—Ä–∏–º–µ—Ä —Å—Ö–µ–º—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        schema_extra = {
            "example": {}
        }


class TimestampSchema(BaseSchema):
    """
    üïí –ú–∏–∫—Å–∏–Ω –¥–ª—è —Å—Ö–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    """
    
    created_at: datetime = Field(..., description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    updated_at: datetime = Field(..., description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    class Config:
        schema_extra = {
            "example": {
                "created_at": "2025-01-06T12:00:00Z",
                "updated_at": "2025-01-06T12:30:00Z"
            }
        }


class UUIDSchema(BaseSchema):
    """
    üÜî –ú–∏–∫—Å–∏–Ω –¥–ª—è —Å—Ö–µ–º —Å UUID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    """
    
    id: uuid.UUID = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    
    class Config:
        schema_extra = {
            "example": {
                "id": "123e4567-e89b-12d3-a456-426614174000"
            }
        }


class SoftDeleteSchema(BaseSchema):
    """
    üóëÔ∏è –ú–∏–∫—Å–∏–Ω –¥–ª—è —Å—Ö–µ–º —Å –º—è–≥–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º
    """
    
    is_deleted: bool = Field(False, description="–§–ª–∞–≥ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
    deleted_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è")


class MetadataSchema(BaseSchema):
    """
    üìä –ú–∏–∫—Å–∏–Ω –¥–ª—è —Å—Ö–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    
    metadata: Optional[Dict[str, Any]] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    version: int = Field(1, description="–í–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏")


class PaginationParams(BaseSchema):
    """
    üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    
    skip: int = Field(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")
    limit: int = Field(100, ge=1, le=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")
    
    class Config:
        schema_extra = {
            "example": {
                "skip": 0,
                "limit": 20
            }
        }


class SortParams(BaseSchema):
    """
    üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    """
    
    sort_by: Optional[str] = Field(None, description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    sort_order: Optional[str] = Field("asc", pattern="^(asc|desc)$", description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "sort_by": "created_at",
                "sort_order": "desc"
            }
        }


class FilterParams(BaseSchema):
    """
    üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    
    search: Optional[str] = Field(None, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    filters: Optional[Dict[str, Any]] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    
    class Config:
        schema_extra = {
            "example": {
                "search": "—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞",
                "filters": {
                    "status": "active",
                    "created_after": "2025-01-01T00:00:00Z"
                }
            }
        }


class PaginatedResponse(GenericModel, Generic[T]):
    """
    üìÑ –°—Ö–µ–º–∞ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    
    items: List[T] = Field(..., description="–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    total: int = Field(..., ge=0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    skip: int = Field(..., ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    limit: int = Field(..., ge=1, description="–õ–∏–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    has_next: bool = Field(..., description="–ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    has_prev: bool = Field(..., description="–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    
    class Config:
        schema_extra = {
            "example": {
                "items": [],
                "total": 150,
                "skip": 0,
                "limit": 20,
                "has_next": True,
                "has_prev": False
            }
        }


class SuccessResponse(BaseSchema):
    """
    ‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    
    success: bool = Field(True, description="–§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ")
    data: Optional[Dict[str, Any]] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    class Config:
        schema_extra = {
            "example": {
                "success": True,
                "message": "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "data": {"id": "123e4567-e89b-12d3-a456-426614174000"}
            }
        }


class ErrorResponse(BaseSchema):
    """
    ‚ùå –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
    """
    
    error: bool = Field(True, description="–§–ª–∞–≥ –æ—à–∏–±–∫–∏")
    status_code: int = Field(..., description="HTTP –∫–æ–¥ –æ—à–∏–±–∫–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    details: Optional[Dict[str, Any]] = Field(None, description="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")
    path: Optional[str] = Field(None, description="–ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞")
    timestamp: float = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ—à–∏–±–∫–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "error": True,
                "status_code": 400,
                "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
                "details": {"field": "email", "issue": "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"},
                "path": "/api/v1/users",
                "timestamp": 1641472800.0
            }
        }


class ValidationErrorDetail(BaseSchema):
    """
    üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    
    field: str = Field(..., description="–ü–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    value: Optional[Any] = Field(None, description="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    
    class Config:
        schema_extra = {
            "example": {
                "field": "email",
                "message": "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email",
                "value": "invalid-email"
            }
        }


class ValidationErrorResponse(ErrorResponse):
    """
    üìù –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    
    validation_errors: List[ValidationErrorDetail] = Field(..., description="–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "error": True,
                "status_code": 422,
                "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                "validation_errors": [
                    {
                        "field": "email",
                        "message": "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email",
                        "value": "invalid-email"
                    }
                ],
                "path": "/api/v1/users",
                "timestamp": 1641472800.0
            }
        }


class HealthCheckResponse(BaseSchema):
    """
    üè• –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ health check
    """
    
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    timestamp: float = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    components: Dict[str, Dict[str, Any]] = Field(..., description="–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    class Config:
        schema_extra = {
            "example": {
                "status": "healthy",
                "version": "1.0.0",
                "timestamp": 1641472800.0,
                "components": {
                    "database": {"status": "healthy"},
                    "redis": {"status": "healthy"},
                    "integrations": {"status": "healthy"}
                }
            }
        }


class CountResponse(BaseSchema):
    """
    üî¢ –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    """
    
    count: int = Field(..., ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    class Config:
        schema_extra = {
            "example": {
                "count": 42
            }
        }


class BulkOperationResponse(BaseSchema):
    """
    üì¶ –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    
    total: int = Field(..., ge=0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    processed: int = Field(..., ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    errors: int = Field(..., ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫")
    success_rate: float = Field(..., ge=0, le=1, description="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
    
    @validator('success_rate')
    def validate_success_rate(cls, v, values):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
        if 'total' in values and values['total'] > 0:
            expected = values.get('processed', 0) / values['total']
            if abs(v - expected) > 0.01:  # –î–æ–ø—É—Å–∫ 1%
                raise ValueError('success_rate –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç processed/total')
        return v
    
    class Config:
        schema_extra = {
            "example": {
                "total": 100,
                "processed": 95,
                "errors": 5,
                "success_rate": 0.95
            }
        }


# –û–±—â–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
def validate_uuid(cls, v):
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è UUID"""
    if isinstance(v, str):
        try:
            return uuid.UUID(v)
        except ValueError:
            raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID')
    return v


def validate_email(cls, v):
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è email"""
    if v and '@' not in v:
        raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
    return v


def validate_phone(cls, v):
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if v and not v.replace('+', '').replace('-', '').replace(' ', '').isdigit():
        raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    return v


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã
    "BaseSchema",
    "TimestampSchema",
    "UUIDSchema",
    "SoftDeleteSchema",
    "MetadataSchema",
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    "PaginationParams",
    "SortParams", 
    "FilterParams",
    
    # –û—Ç–≤–µ—Ç—ã
    "PaginatedResponse",
    "SuccessResponse",
    "ErrorResponse",
    "ValidationErrorDetail",
    "ValidationErrorResponse",
    "HealthCheckResponse",
    "CountResponse",
    "BulkOperationResponse",
    
    # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
    "validate_uuid",
    "validate_email",
    "validate_phone"
]