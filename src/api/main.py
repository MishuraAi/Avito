"""
üåê –ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/api/main.py
"""

import logging
import time
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

from . import API_METADATA, API_TAGS, __version__, API_VERSION
from ..database import init_database_manager, DatabaseConfig, get_database_info
from ..core import get_version_info as get_core_version
from ..integrations import integration_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Avito AI Responder API v%s", __version__)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # TODO: –ü–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # db_config = DatabaseConfig(database_url=os.getenv("DATABASE_URL"))
        # init_database_manager(db_config)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
        logger.info("üéâ API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        yield
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %s", e)
        raise
    
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Avito AI Responder API")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if integration_manager:
            await integration_manager.disconnect_all()
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


def create_app() -> FastAPI:
    """
    üè≠ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Returns:
        FastAPI: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        lifespan=lifespan,
        **API_METADATA,
        openapi_tags=API_TAGS,
        openapi_url=f"/api/{API_VERSION}/openapi.json",
        docs_url=f"/api/{API_VERSION}/docs",
        redoc_url=f"/api/{API_VERSION}/redoc"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middleware(app)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    setup_exception_handlers(app)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
    register_routes(app)
    
    return app


def setup_middleware(app: FastAPI) -> None:
    """
    üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[
            "http://localhost:3000",  # React dev server
            "http://localhost:8000",  # FastAPI dev server
            "http://127.0.0.1:3000",
            "http://127.0.0.1:8000",
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –¥–æ–º–µ–Ω—ã
        ],
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
        allow_headers=["*"],
    )
    
    # Trusted hosts middleware
    app.add_middleware(
        TrustedHostMiddleware, 
        allowed_hosts=[
            "localhost",
            "127.0.0.1",
            "*.railway.app",  # Railway —Ö–æ—Å—Ç–∏–Ω–≥
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –¥–æ–º–µ–Ω—ã
        ]
    )
    
    # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    @app.middleware("http")
    async def log_requests(request: Request, call_next):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.info(
            "üì® %s %s - %s",
            request.method,
            request.url.path,
            request.client.host if request.client else "unknown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        process_time = time.time() - start_time
        logger.info(
            "üì§ %s %s - %d - %.3fs",
            request.method,
            request.url.path,
            response.status_code,
            process_time
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        
        return response
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    # TODO: –î–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è rate limiting
    # TODO: –î–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏


def setup_exception_handlers(app: FastAPI) -> None:
    """
    üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    
    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    @app.exception_handler(HTTPException)
    async def http_exception_handler(request: Request, exc: HTTPException):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—à–∏–±–æ–∫"""
        
        logger.warning(
            "HTTP –æ—à–∏–±–∫–∞ %d: %s - %s %s",
            exc.status_code,
            exc.detail,
            request.method,
            request.url.path
        )
        
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": True,
                "status_code": exc.status_code,
                "message": exc.detail,
                "path": str(request.url.path),
                "timestamp": time.time()
            }
        )
    
    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(request: Request, exc: RequestValidationError):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        logger.warning(
            "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s - %s %s",
            exc.errors(),
            request.method,
            request.url.path
        )
        
        return JSONResponse(
            status_code=422,
            content={
                "error": True,
                "status_code": 422,
                "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                "details": exc.errors(),
                "path": str(request.url.path),
                "timestamp": time.time()
            }
        )
    
    @app.exception_handler(StarletteHTTPException)
    async def starlette_exception_handler(request: Request, exc: StarletteHTTPException):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö HTTP –æ—à–∏–±–æ–∫"""
        
        logger.error(
            "Starlette –æ—à–∏–±–∫–∞ %d: %s - %s %s",
            exc.status_code,
            exc.detail,
            request.method,
            request.url.path
        )
        
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": True,
                "status_code": exc.status_code,
                "message": exc.detail,
                "path": str(request.url.path),
                "timestamp": time.time()
            }
        )
    
    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        
        logger.error(
            "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s - %s %s",
            str(exc),
            request.method,
            request.url.path,
            exc_info=True
        )
        
        return JSONResponse(
            status_code=500,
            content={
                "error": True,
                "status_code": 500,
                "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "path": str(request.url.path),
                "timestamp": time.time()
            }
        )


def register_routes(app: FastAPI) -> None:
    """
    üìç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ API
    
    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ—É—Ç—ã
    @app.get("/", tags=["system"])
    async def root():
        """üè† –ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
        return {
            "message": "ü§ñ Avito AI Responder API",
            "version": __version__,
            "api_version": API_VERSION,
            "status": "running",
            "docs_url": f"/api/{API_VERSION}/docs"
        }
    
    @app.get("/health", tags=["system"])
    async def health_check():
        """üè• Health check endpoint"""
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        health_status = {
            "status": "healthy",
            "version": __version__,
            "timestamp": time.time(),
            "components": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db_info = get_database_info()
            health_status["components"]["database"] = {
                "status": "healthy" if db_info["initialized"] else "not_initialized",
                "details": db_info
            }
        except Exception as e:
            health_status["components"]["database"] = {
                "status": "error", 
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
        try:
            core_info = get_core_version()
            health_status["components"]["core"] = {
                "status": "healthy",
                "details": core_info
            }
        except Exception as e:
            health_status["components"]["core"] = {
                "status": "error",
                "error": str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        try:
            if integration_manager:
                integration_status = await integration_manager.health_check_all()
                health_status["components"]["integrations"] = {
                    "status": "healthy" if all(integration_status.values()) else "partial",
                    "details": integration_status
                }
            else:
                health_status["components"]["integrations"] = {
                    "status": "not_initialized"
                }
        except Exception as e:
            health_status["components"]["integrations"] = {
                "status": "error",
                "error": str(e)
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        component_statuses = [
            comp["status"] for comp in health_status["components"].values()
        ]
        
        if any(status == "error" for status in component_statuses):
            health_status["status"] = "unhealthy"
        elif any(status in ["not_initialized", "partial"] for status in component_statuses):
            health_status["status"] = "degraded"
        
        return health_status
    
    @app.get("/info", tags=["system"])
    async def app_info():
        """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        
        return {
            "app": API_METADATA,
            "version": __version__,
            "api_version": API_VERSION,
            "available_endpoints": len(API_TAGS),
            "environment": "development",  # TODO: –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            "build_time": "2025-01-06T12:00:00Z",  # TODO: –ò–∑ CI/CD
        }
    
    # TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç—ã –∏–∑ modules
    # from .routes import auth_router, users_router, messages_router
    # app.include_router(auth_router, prefix=f"/api/{API_VERSION}")
    # app.include_router(users_router, prefix=f"/api/{API_VERSION}")
    # app.include_router(messages_router, prefix=f"/api/{API_VERSION}")
    
    logger.info("‚úÖ –†–æ—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_app()

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    "app",
    "create_app",
    "setup_middleware",
    "setup_exception_handlers", 
    "register_routes"
]