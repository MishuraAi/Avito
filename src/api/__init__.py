"""
üåê FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã REST API:
- main.py        - –ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
- routes/        - –†–æ—É—Ç—ã API (endpoints)
- middleware/    - Middleware –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- dependencies/  - Dependency injection
- schemas/       - Pydantic —Å—Ö–µ–º—ã –¥–ª—è API

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/api/__init__.py
"""

from typing import Dict, Any, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è
try:
    from .main import app, create_app
    MAIN_APP_AVAILABLE = True
except ImportError:
    MAIN_APP_AVAILABLE = False

try:
    from .routes import *
    ROUTES_AVAILABLE = True
except ImportError:
    ROUTES_AVAILABLE = False

try:
    from .middleware import *
    MIDDLEWARE_AVAILABLE = True
except ImportError:
    MIDDLEWARE_AVAILABLE = False

try:
    from .dependencies import *
    DEPENDENCIES_AVAILABLE = True
except ImportError:
    DEPENDENCIES_AVAILABLE = False

try:
    from .schemas import *
    SCHEMAS_AVAILABLE = True
except ImportError:
    SCHEMAS_AVAILABLE = False


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
AVAILABLE_API_COMPONENTS = {
    "main_app": MAIN_APP_AVAILABLE,
    "routes": ROUTES_AVAILABLE,
    "middleware": MIDDLEWARE_AVAILABLE,
    "dependencies": DEPENDENCIES_AVAILABLE,
    "schemas": SCHEMAS_AVAILABLE
}

# –í–µ—Ä—Å–∏—è API
__version__ = "1.0.0"
API_VERSION = "v1"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ API
API_METADATA = {
    "title": "Avito AI Responder API",
    "description": """
    ü§ñ **–£–º–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –ê–≤–∏—Ç–æ**
    
    –≠—Ç–æ—Ç API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±—â–µ–Ω–∏—è –Ω–∞ –ê–≤–∏—Ç–æ:
    
    ## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    * **üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏** - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    * **üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π** - –ø–æ–ª—É—á–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
    * **ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ Gemini
    * **üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, –º–µ—Ç—Ä–∏–∫–∏
    * **‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏** - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞
    * **üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏** - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–≤–∏—Ç–æ API
    
    ## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    
    API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
    
    ## üìà Rate Limiting
    
    –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
    """,
    "version": __version__,
    "contact": {
        "name": "Avito AI Responder Support",
        "email": "support@avito-ai-responder.com"
    },
    "license": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
}

# –¢–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ endpoints
API_TAGS = [
    {
        "name": "auth",
        "description": "üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    },
    {
        "name": "users", 
        "description": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏"
    },
    {
        "name": "sellers",
        "description": "üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
    },
    {
        "name": "messages",
        "description": "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏"
    },
    {
        "name": "conversations",
        "description": "üó®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏"
    },
    {
        "name": "templates", 
        "description": "üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"
    },
    {
        "name": "ai",
        "description": "ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤"
    },
    {
        "name": "analytics",
        "description": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    },
    {
        "name": "integrations",
        "description": "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
    },
    {
        "name": "system",
        "description": "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ health checks"
    }
]

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    "__version__",
    "API_VERSION", 
    "API_METADATA",
    "API_TAGS",
    "AVAILABLE_API_COMPONENTS"
]

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç
if MAIN_APP_AVAILABLE:
    __all__.extend([
        "app",
        "create_app"
    ])


def get_api_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API"""
    
    return {
        "version": __version__,
        "api_version": API_VERSION,
        "available_components": AVAILABLE_API_COMPONENTS,
        "total_tags": len(API_TAGS),
        "metadata": API_METADATA
    }


def get_all_tags() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ API"""
    
    return [tag["name"] for tag in API_TAGS]


def get_health_status() -> Dict[str, Any]:
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    return {
        "api_status": "healthy",
        "components": AVAILABLE_API_COMPONENTS,
        "version": __version__
    }


logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: %s", AVAILABLE_API_COMPONENTS)