"""
üîß Dependency Injection –¥–ª—è FastAPI

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ dependencies –¥–ª—è FastAPI endpoints:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- Rate limiting
- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
- –ò–Ω—ä–µ–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/api/dependencies.py
"""

import jwt
import time
from datetime import datetime, timezone, timedelta
from typing import Optional, Generator, Dict, Any

from fastapi import Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from pydantic import BaseModel

from ..database import get_db, db_manager
from ..database.crud.users import seller_crud, SellerCRUD
from ..database.models.users import Seller, SellerTier
from ..core import create_ai_consultant, AIConsultant
from ..integrations import integration_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
JWT_SECRET_KEY = "your-secret-key-change-in-production"  # TODO: –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
JWT_ALGORITHM = "HS256"
JWT_EXPIRATION_HOURS = 24

# HTTP Bearer —Å—Ö–µ–º–∞ –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤
security = HTTPBearer()


class TokenData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    seller_id: str
    email: str
    tier: str
    exp: int


class RateLimitInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    requests_remaining: int
    reset_time: int
    limit: int


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_database() -> Generator[Session, None, None]:
    """
    üóÑÔ∏è Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Yields:
        Session: –°–µ—Å—Å–∏—è SQLAlchemy
    """
    return get_db()


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_current_seller(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_database)
) -> Seller:
    """
    üë§ Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
    
    Args:
        credentials: JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        Seller: –¢–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        payload = jwt.decode(
            credentials.credentials, 
            JWT_SECRET_KEY, 
            algorithms=[JWT_ALGORITHM]
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        seller_id: str = payload.get("sub")
        if seller_id is None:
            raise credentials_exception
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        exp = payload.get("exp")
        if exp and datetime.fromtimestamp(exp, tz=timezone.utc) < datetime.now(timezone.utc):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        token_data = TokenData(
            seller_id=seller_id,
            email=payload.get("email"),
            tier=payload.get("tier"),
            exp=exp
        )
        
    except jwt.PyJWTError:
        raise credentials_exception
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    seller = seller_crud.get(db, id=token_data.seller_id)
    if seller is None:
        raise credentials_exception
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
    if seller.status != "active":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    seller.last_login_at = datetime.now(timezone.utc)
    db.commit()
    
    return seller


# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def require_active_subscription(
    current_seller: Seller = Depends(get_current_seller)
) -> Seller:
    """
    üí≥ Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        current_seller: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü
        
    Returns:
        Seller: –ü—Ä–æ–¥–∞–≤–µ—Ü —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    """
    
    if not current_seller.is_subscription_active:
        raise HTTPException(
            status_code=status.HTTP_402_PAYMENT_REQUIRED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        )
    
    return current_seller


# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_quota(
    current_seller: Seller = Depends(require_active_subscription),
    db: Session = Depends(get_database)
) -> Seller:
    """
    üì® Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        current_seller: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        Seller: –ü—Ä–æ–¥–∞–≤–µ—Ü —Å –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–≤–æ—Ç–æ–π
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞
    """
    
    if not current_seller.can_send_messages:
        remaining_quota = current_seller.messages_remaining
        raise HTTPException(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail=f"–ò—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_quota}"
        )
    
    return current_seller


# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
def require_tier(required_tiers: list[SellerTier]):
    """
    üéØ –§–∞–±—Ä–∏–∫–∞ dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    
    Args:
        required_tiers: –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
        
    Returns:
        Dependency function
    """
    
    def tier_dependency(
        current_seller: Seller = Depends(get_current_seller)
    ) -> Seller:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        
        if current_seller.tier not in required_tiers:
            tier_names = [tier.value for tier in required_tiers]
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞—Ä–∏—Ñ: {', '.join(tier_names)}"
            )
        
        return current_seller
    
    return tier_dependency


# Shortcut dependencies –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
require_premium = require_tier([SellerTier.PREMIUM, SellerTier.ENTERPRISE])
require_enterprise = require_tier([SellerTier.ENTERPRISE])


# Dependency –¥–ª—è Rate Limiting
class RateLimiter:
    """
    ‚è±Ô∏è Rate Limiter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    def __init__(self, requests_per_minute: int = 60):
        self.requests_per_minute = requests_per_minute
        self.requests = {}  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
    
    def __call__(self, request: Request) -> RateLimitInfo:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å
            
        Returns:
            RateLimitInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö
            
        Raises:
            HTTPException: –ï—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        client_id = self._get_client_id(request)
        current_time = int(time.time())
        window_start = current_time - 60  # –û–∫–Ω–æ –≤ 1 –º–∏–Ω—É—Ç—É
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if client_id not in self.requests:
            self.requests[client_id] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[client_id] = [
            timestamp for timestamp in self.requests[client_id]
            if timestamp > window_start
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        current_requests = len(self.requests[client_id])
        
        if current_requests >= self.requests_per_minute:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                headers={"Retry-After": "60"}
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[client_id].append(current_time)
        
        return RateLimitInfo(
            requests_remaining=self.requests_per_minute - current_requests - 1,
            reset_time=window_start + 60,
            limit=self.requests_per_minute
        )
    
    def _get_client_id(self, request: Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT sub –∏–ª–∏ API key
        return request.client.host if request.client else "unknown"


# –≠–∫–∑–µ–º–ø–ª—è—Ä—ã rate limiter –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
standard_rate_limiter = RateLimiter(requests_per_minute=60)
strict_rate_limiter = RateLimiter(requests_per_minute=10)


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
async def get_ai_consultant() -> AIConsultant:
    """
    ü§ñ Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    
    Returns:
        AIConsultant: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    
    try:
        # TODO: –ü–æ–ª—É—á–∞—Ç—å API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = "your-gemini-api-key"  
        consultant = await create_ai_consultant(api_key)
        return consultant
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"–ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
        )


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
def get_integration_manager():
    """
    üîó Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    
    Returns:
        IntegrationManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    
    if not integration_manager:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        )
    
    return integration_manager


# Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT
def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """
    üîê –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
        expires_delta: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        
    Returns:
        str: JWT —Ç–æ–∫–µ–Ω
    """
    
    to_encode = data.copy()
    
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(hours=JWT_EXPIRATION_HOURS)
    
    to_encode.update({"exp": expire})
    
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    return encoded_jwt


def verify_token(token: str) -> Optional[Dict[str, Any]]:
    """
    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    
    Args:
        token: JWT —Ç–æ–∫–µ–Ω
        
    Returns:
        Optional[Dict]: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ None
    """
    
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.PyJWTError:
        return None


# Dependency –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def require_admin(current_seller: Seller = Depends(get_current_seller)) -> Seller:
    """
    üëë Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
    
    Args:
        current_seller: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü
        
    Returns:
        Seller: –ü—Ä–æ–¥–∞–≤–µ—Ü —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ is_admin –≤ –º–æ–¥–µ–ª—å Seller
    # if not current_seller.is_admin:
    #     raise HTTPException(
    #         status_code=status.HTTP_403_FORBIDDEN,
    #         detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    #     )
    
    return current_seller


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ dependencies
    "get_database",
    "get_current_seller",
    "require_active_subscription",
    "check_message_quota",
    "get_ai_consultant",
    "get_integration_manager",
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
    "require_tier",
    "require_premium", 
    "require_enterprise",
    "require_admin",
    
    # Rate limiting
    "RateLimiter",
    "standard_rate_limiter",
    "strict_rate_limiter",
    
    # JWT —É—Ç–∏–ª–∏—Ç—ã
    "create_access_token",
    "verify_token",
    
    # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    "TokenData",
    "RateLimitInfo"
]