"""
üß† –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞ –±–∞–∑–µ Google Gemini –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–¥ —Å–∏—Ç—É–∞—Ü–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/core/ai_consultant.py
"""

import asyncio
import json
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta

import google.generativeai as genai
from pydantic import BaseModel

from .config import AIConfig, ResponseStyle, MessageType, CoreConfig


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class ProductContext(BaseModel):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    title: str
    price: Optional[int] = None
    description: Optional[str] = None
    category: Optional[str] = None
    condition: Optional[str] = None  # –Ω–æ–≤—ã–π, –±/—É, –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    location: Optional[str] = None
    seller_name: Optional[str] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    delivery_available: bool = False
    negotiable: bool = True
    urgent_sale: bool = False


class UserContext(BaseModel):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    user_id: str
    name: Optional[str] = None
    message_history: List[str] = []
    last_interaction: Optional[datetime] = None
    
    # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    is_serious_buyer: bool = True
    preferred_style: Optional[ResponseStyle] = None
    blocked: bool = False


class ConversationAnalysis(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    message_type: MessageType
    confidence: float
    intent: str
    sentiment: str  # positive, negative, neutral
    urgency: str   # low, medium, high
    keywords_found: List[str]
    requires_human: bool = False


class AIConsultant:
    """
    üß† –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API
    - –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π  
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—é —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
    """
    
    def __init__(self, config: AIConfig, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò
            api_key: API –∫–ª—é—á Google Gemini
        """
        self.config = config
        self.api_key = api_key
        self._setup_gemini()
        
        # –ö–µ—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        self._response_cache: Dict[str, Tuple[str, datetime]] = {}
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self.metrics = {
            "total_requests": 0,
            "cache_hits": 0,
            "gemini_calls": 0,
            "errors": 0,
            "avg_response_time": 0.0
        }
        
        logger.info("–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é %s", config.model_name)
    
    def _setup_gemini(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API"""
        try:
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel(self.config.model_name)
            logger.info("Gemini API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API: %s", e)
            raise
    
    async def analyze_message(
        self,
        message: str,
        user_context: UserContext,
        product_context: ProductContext
    ) -> ConversationAnalysis:
        """
        üîç –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç:
        - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, etc.)
        - –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        - –°—Ä–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            ConversationAnalysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        self.metrics["total_requests"] += 1
        start_time = datetime.now()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompt = self._create_analysis_prompt(message, user_context, product_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            response = await self._call_gemini(analysis_prompt)
            analysis_data = self._parse_analysis_response(response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.metrics["gemini_calls"] += 1
            self._update_response_time(start_time)
            
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: —Ç–∏–ø=%s, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å=%.2f", 
                       analysis_data.message_type, analysis_data.confidence)
            
            return analysis_data
            
        except Exception as e:
            self.metrics["errors"] += 1
            logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return ConversationAnalysis(
                message_type=MessageType.GENERAL_QUESTION,
                confidence=0.5,
                intent="unknown",
                sentiment="neutral", 
                urgency="medium",
                keywords_found=[],
                requires_human=True
            )
    
    async def generate_response(
        self,
        message: str,
        analysis: ConversationAnalysis,
        user_context: UserContext,
        product_context: ProductContext
    ) -> str:
        """
        üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        –°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —É—á–∏—Ç—ã–≤–∞—è:
        - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ó–∞–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
        - –ò—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = self._generate_cache_key(message, analysis, product_context)
            
            if self.config.cache_responses:
                cached_response = self._get_cached_response(cache_key)
                if cached_response:
                    self.metrics["cache_hits"] += 1
                    logger.debug("–û—Ç–≤–µ—Ç –≤–∑—è—Ç –∏–∑ –∫–µ—à–∞")
                    return cached_response
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            response_prompt = self._create_response_prompt(
                message, analysis, user_context, product_context
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
            raw_response = await self._call_gemini(response_prompt)
            formatted_response = self._format_response(raw_response, analysis, product_context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            if self.config.cache_responses:
                self._cache_response(cache_key, formatted_response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.metrics["gemini_calls"] += 1
            self._update_response_time(start_time)
            
            logger.info("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(formatted_response))
            return formatted_response
            
        except Exception as e:
            self.metrics["errors"] += 1
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %s", e)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return self._get_fallback_response(analysis.message_type, product_context)
    
    def _create_analysis_prompt(
        self,
        message: str,
        user_context: UserContext,
        product_context: ProductContext
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ê–≤–∏—Ç–æ.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–ö–û–ù–¢–ï–ö–°–¢ –¢–û–í–ê–†–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {product_context.title}
- –¶–µ–Ω–∞: {product_context.price or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±.
- –û–ø–∏—Å–∞–Ω–∏–µ: {product_context.description or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_context.category or '–æ–±—â–∞—è'}

–°–û–û–ë–©–ï–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–Ø:
"{message}"

–ò–°–¢–û–†–ò–Ø –û–ë–©–ï–ù–ò–Ø:
{user_context.message_history[-3:] if user_context.message_history else "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}

–û–ø—Ä–µ–¥–µ–ª–∏ –∏ –≤–µ—Ä–Ω–∏ –≤ JSON:
1. message_type - —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (price_question, availability, product_info, meeting_request, delivery_question, general_question, greeting, complaint, spam)
2. confidence - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (0.0-1.0)
3. intent - –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-2 —Å–ª–æ–≤–∞)
4. sentiment - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞ (positive, negative, neutral)
5. urgency - —Å—Ä–æ—á–Ω–æ—Å—Ç—å (low, medium, high)
6. keywords_found - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–º–∞—Å—Å–∏–≤)
7. requires_human - –Ω—É–∂–Ω–æ –ª–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞ (true/false)

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
        
        return prompt.strip()
    
    def _create_response_prompt(
        self,
        message: str,
        analysis: ConversationAnalysis,
        user_context: UserContext,
        product_context: ProductContext
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
        style_instructions = self._get_style_instructions(self.config.response_style)
        
        prompt = f"""
–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞ –ê–≤–∏—Ç–æ, –æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø: {style_instructions}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {product_context.title}
- –¶–µ–Ω–∞: {product_context.price or '–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è'} —Ä—É–±.
- –°–æ—Å—Ç–æ—è–Ω–∏–µ: {product_context.condition or '—Ö–æ—Ä–æ—à–µ–µ'}
- –û–ø–∏—Å–∞–Ω–∏–µ: {product_context.description or '—Å–º. –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}
- –î–æ—Å—Ç–∞–≤–∫–∞: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if product_context.delivery_available else '—Å–∞–º–æ–≤—ã–≤–æ–∑'}
- –¢–æ—Ä–≥: {'–≤–æ–∑–º–æ–∂–µ–Ω' if product_context.negotiable else '–Ω–µ—É–º–µ—Å—Ç–µ–Ω'}

–ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–Ø:
- –¢–∏–ø: {analysis.message_type}
- –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {analysis.intent}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis.sentiment}
- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {analysis.urgency}

–°–û–û–ë–©–ï–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–Ø:
"{message}"

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:
1. –û—Ç–≤–µ—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
2. –ò—Å–ø–æ–ª—å–∑—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
3. –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
4. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 50-200 —Å–∏–º–≤–æ–ª–æ–≤
5. –ï—Å–ª–∏ –º–æ–∂–µ—à—å - –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Å—Ç—Ä–µ—á—É/–æ—Å–º–æ—Ç—Ä
6. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç:
"""
        
        return prompt.strip()
    
    def _get_style_instructions(self, style: ResponseStyle) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        
        style_map = {
            ResponseStyle.PROFESSIONAL: "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π '–í—ã'",
            ResponseStyle.FRIENDLY: "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ç–µ–ø–ª—ã–π, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '—Ç—ã'", 
            ResponseStyle.CASUAL: "–ü—Ä–æ—Å—Ç–æ–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º",
            ResponseStyle.SALES: "–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–¥–∞—é—â–∏–π, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤—ã–≥–æ–¥—ã"
        }
        
        return style_map.get(style, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π")
    
    async def _call_gemini(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ Gemini API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_config = {
                "temperature": self.config.temperature,
                "max_output_tokens": self.config.max_tokens,
            }
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            response = await asyncio.wait_for(
                self.model.generate_content_async(
                    prompt,
                    generation_config=generation_config
                ),
                timeout=self.config.response_timeout
            )
            
            return response.text
            
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API")
            raise
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: %s", e)
            raise
    
    def _parse_analysis_response(self, response: str) -> ConversationAnalysis:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Gemini"""
        
        try:
            data = json.loads(response.strip())
            return ConversationAnalysis(**data)
        except json.JSONDecodeError as e:
            logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: %s", e)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            return ConversationAnalysis(
                message_type=MessageType.GENERAL_QUESTION,
                confidence=0.5,
                intent="unclear",
                sentiment="neutral",
                urgency="medium", 
                keywords_found=[]
            )
    
    def _format_response(
        self,
        raw_response: str,
        analysis: ConversationAnalysis,
        product_context: ProductContext
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        
        response = raw_response.strip()
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã
        if product_context.price:
            response = response.replace("{price}", str(product_context.price))
        
        if product_context.seller_name:
            response = response.replace("{seller_name}", product_context.seller_name)
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(response) > 500:
            response = response[:497] + "..."
        
        return response
    
    def _generate_cache_key(
        self,
        message: str,
        analysis: ConversationAnalysis,
        product_context: ProductContext
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞"""
        
        key_parts = [
            analysis.message_type.value,
            str(product_context.price or 0),
            product_context.category or "general",
            str(hash(message.lower().strip()))[:8]
        ]
        
        return ":".join(key_parts)
    
    def _get_cached_response(self, cache_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫–µ—à–∞"""
        
        if cache_key in self._response_cache:
            response, timestamp = self._response_cache[cache_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ TTL
            if datetime.now() - timestamp < timedelta(seconds=self.config.cache_ttl):
                return response
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à
                del self._response_cache[cache_key]
        
        return None
    
    def _cache_response(self, cache_key: str, response: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–µ—à"""
        
        self._response_cache[cache_key] = (response, datetime.now())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if len(self._response_cache) > 1000:
            # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            old_keys = sorted(
                self._response_cache.keys(),
                key=lambda k: self._response_cache[k][1]
            )[:200]
            
            for key in old_keys:
                del self._response_cache[key]
    
    def _get_fallback_response(
        self,
        message_type: MessageType,
        product_context: ProductContext
    ) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        
        fallback_responses = {
            MessageType.PRICE_QUESTION: f"–¶–µ–Ω–∞ {product_context.price or '—É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏'} —Ä—É–±. –¢–æ—Ä–≥ –≤–æ–∑–º–æ–∂–µ–Ω!",
            MessageType.AVAILABILITY: "–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏. –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!",
            MessageType.GREETING: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            MessageType.GENERAL_QUESTION: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –û—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã."
        }
        
        return fallback_responses.get(
            message_type,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
    
    def _update_response_time(self, start_time: datetime) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        response_time = (datetime.now() - start_time).total_seconds()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        current_avg = self.metrics["avg_response_time"]
        total_requests = self.metrics["total_requests"]
        
        self.metrics["avg_response_time"] = (
            (current_avg * (total_requests - 1) + response_time) / total_requests
        )
    
    def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        
        cache_hit_rate = 0.0
        if self.metrics["total_requests"] > 0:
            cache_hit_rate = self.metrics["cache_hits"] / self.metrics["total_requests"]
        
        return {
            **self.metrics,
            "cache_hit_rate": cache_hit_rate,
            "cache_size": len(self._response_cache)
        }
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        
        self._response_cache.clear()
        logger.info("–ö–µ—à –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")


async def create_ai_consultant(api_key: str, config: Optional[AIConfig] = None) -> AIConsultant:
    """
    üè≠ –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    
    Args:
        api_key: API –∫–ª—é—á Google Gemini
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        AIConsultant: –ì–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
    """
    
    if not config:
        config = AIConfig()
    
    consultant = AIConsultant(config, api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        test_response = await consultant._call_gemini("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å 'OK'")
        logger.info("–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω: %s", test_response[:50])
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞: %s", e)
        raise
    
    return consultant