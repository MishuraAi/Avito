"""
üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã Avito AI Responder

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞,
–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/core/config.py
"""

import os
from enum import Enum
from typing import Dict, List, Optional
from pydantic import BaseModel, Field
from pydantic_settings import BaseSettings
from functools import lru_cache


class ResponseStyle(str, Enum):
    """–°—Ç–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    PROFESSIONAL = "professional"       # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
    FRIENDLY = "friendly"              # –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ç–µ–ø–ª—ã–π —Å—Ç–∏–ª—å
    CASUAL = "casual"                  # –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–ª—å
    SALES = "sales"                    # –ü—Ä–æ–¥–∞—é—â–∏–π, —É–±–µ–∂–¥–∞—é—â–∏–π —Å—Ç–∏–ª—å


class MessageType(str, Enum):
    """–¢–∏–ø—ã –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    PRICE_QUESTION = "price_question"           # –í–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ
    AVAILABILITY = "availability"               # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    PRODUCT_INFO = "product_info"              # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
    MEETING_REQUEST = "meeting_request"         # –ó–∞–ø—Ä–æ—Å –≤—Å—Ç—Ä–µ—á–∏
    DELIVERY_QUESTION = "delivery_question"    # –í–æ–ø—Ä–æ—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    GENERAL_QUESTION = "general_question"      # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    GREETING = "greeting"                      # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    COMPLAINT = "complaint"                    # –ñ–∞–ª–æ–±–∞
    SPAM = "spam"                             # –°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ


class Settings(BaseSettings):
    """–ì–ª–∞–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    debug: bool = Field(default=False, env="DEBUG")
    environment: str = Field(default="development", env="ENVIRONMENT")
    secret_key: str = Field(env="SECRET_KEY")
    jwt_secret_key: str = Field(env="JWT_SECRET_KEY")
    jwt_access_token_expire_minutes: int = Field(default=30, env="JWT_ACCESS_TOKEN_EXPIRE_MINUTES")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database_url: str = Field(env="DATABASE_URL")
    test_database_url: Optional[str] = Field(default=None, env="TEST_DATABASE_URL")
    
    # Redis
    redis_url: Optional[str] = Field(default=None, env="REDIS_URL")
    
    # API –∫–ª—é—á–∏
    gemini_api_key: str = Field(env="GEMINI_API_KEY")
    gemini_model: str = Field(default="gemini-pro", env="GEMINI_MODEL")
    
    avito_client_id: Optional[str] = Field(default=None, env="AVITO_CLIENT_ID")
    avito_client_secret: Optional[str] = Field(default=None, env="AVITO_CLIENT_SECRET")
    avito_api_base_url: str = Field(default="https://api.avito.ru", env="AVITO_API_BASE_URL")
    
    # CORS –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    cors_origins: str = Field(default="http://localhost:3000,http://localhost:8000", env="CORS_ORIGINS")
    cors_methods: str = Field(default="GET,POST,PUT,DELETE,OPTIONS,PATCH", env="CORS_METHODS")
    cors_headers: str = Field(default="*", env="CORS_HEADERS")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level: str = Field(default="INFO", env="LOG_LEVEL")
    log_file_path: str = Field(default="data/logs/app.log", env="LOG_FILE_PATH")
    log_max_size_mb: int = Field(default=10, env="LOG_MAX_SIZE_MB")
    log_backup_count: int = Field(default=5, env="LOG_BACKUP_COUNT")
    
    # Rate limiting
    rate_limit_free_requests_per_minute: int = Field(default=10, env="RATE_LIMIT_FREE_REQUESTS_PER_MINUTE")
    rate_limit_premium_requests_per_minute: int = Field(default=100, env="RATE_LIMIT_PREMIUM_REQUESTS_PER_MINUTE")
    rate_limit_enterprise_requests_per_minute: int = Field(default=1000, env="RATE_LIMIT_ENTERPRISE_REQUESTS_PER_MINUTE")
    
    # –°–µ—Ä–≤–µ—Ä
    server_port: int = Field(default=8000, env="SERVER_PORT")
    server_host: str = Field(default="0.0.0.0", env="SERVER_HOST")
    workers_count: int = Field(default=1, env="WORKERS_COUNT")
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    avito_parse_interval_seconds: int = Field(default=300, env="AVITO_PARSE_INTERVAL_SECONDS")
    avito_max_messages_per_request: int = Field(default=50, env="AVITO_MAX_MESSAGES_PER_REQUEST")
    
    # AI –æ–±—Ä–∞–±–æ—Ç–∫–∞
    ai_response_timeout_seconds: int = Field(default=30, env="AI_RESPONSE_TIMEOUT_SECONDS")
    ai_max_tokens_per_request: int = Field(default=1000, env="AI_MAX_TOKENS_PER_REQUEST")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    enable_metrics: bool = Field(default=True, env="ENABLE_METRICS")
    enable_health_checks: bool = Field(default=True, env="ENABLE_HEALTH_CHECKS")
    sentry_dsn: Optional[str] = Field(default=None, env="SENTRY_DSN")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    testing_mode: bool = Field(default=False, env="TESTING_MODE")
    
    # –î–∞–Ω–Ω—ã–µ
    upload_folder: str = Field(default="data/uploads", env="UPLOAD_FOLDER")
    max_upload_size_mb: int = Field(default=10, env="MAX_UPLOAD_SIZE_MB")
    temp_folder: str = Field(default="data/temp", env="TEMP_FOLDER")
    
    # –§—Ä–æ–Ω—Ç–µ–Ω–¥
    frontend_url: str = Field(default="http://localhost:3000", env="FRONTEND_URL")
    static_files_dir: str = Field(default="frontend/build", env="STATIC_FILES_DIR")
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False
        
    @property
    def cors_origins_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ CORS origins"""
        return [origin.strip() for origin in self.cors_origins.split(",")]
    
    @property
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return self.environment.lower() == "development"
    
    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º"""
        return self.environment.lower() == "production"
    
    @property
    def is_testing(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.testing_mode or self.environment.lower() == "testing"


class AIConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Gemini
    model_name: str = Field(default="gemini-pro", description="–ú–æ–¥–µ–ª—å Gemini")
    temperature: float = Field(default=0.7, ge=0.0, le=1.0, description="–¢–≤–æ—Ä—á–µ—Å–∫–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤")
    max_tokens: int = Field(default=2048, gt=0, description="–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")

    # –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    response_style: ResponseStyle = Field(default=ResponseStyle.FRIENDLY)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    response_timeout: int = Field(default=30, gt=0, description="–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")

    # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    cache_responses: bool = Field(default=True, description="–ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã")
    cache_ttl: int = Field(default=3600, gt=0, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")


class MessageHandlerConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    min_message_length: int = Field(default=2, ge=1, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    max_message_length: int = Field(default=1000, gt=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    confidence_threshold: float = Field(default=0.7, ge=0.0, le=1.0)

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    spam_detection: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é —Å–ø–∞–º–∞")
    rate_limit_messages: int = Field(default=5, gt=0, description="–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    rate_limit_window: int = Field(default=300, gt=0, description="–û–∫–Ω–æ –ª–∏–º–∏—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")


class ResponseGeneratorConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤"""

    # –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
    use_templates: bool = Field(default=True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã")
    template_probability: float = Field(default=0.3, ge=0.0, le=1.0, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")

    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    include_user_name: bool = Field(default=True, description="–í–∫–ª—é—á–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    include_product_details: bool = Field(default=True, description="–í–∫–ª—é—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞")

    # –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
    min_response_length: int = Field(default=10, ge=1, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞")
    max_response_length: int = Field(default=500, gt=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞")


class CoreConfig(BaseModel):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ai: AIConfig = Field(default_factory=AIConfig)
    message_handler: MessageHandlerConfig = Field(default_factory=MessageHandlerConfig)
    response_generator: ResponseGeneratorConfig = Field(default_factory=ResponseGeneratorConfig)

    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    debug_mode: bool = Field(default=False, description="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    log_level: str = Field(default="INFO", description="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    # –ú–µ—Ç—Ä–∏–∫–∏
    collect_metrics: bool = Field(default=True, description="–°–æ–±–∏—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
    metrics_interval: int = Field(default=60, gt=0, description="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")


# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_KEYWORDS: Dict[MessageType, List[str]] = {
    MessageType.PRICE_QUESTION: [
        "—Ü–µ–Ω–∞", "—Å–∫–æ–ª—å–∫–æ", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–æ—Ä–æ–≥–æ", "–¥–µ—à–µ–≤–æ", "—Ä—É–±–ª—å", "—Ç—ã—Å—è—á",
        "—Ç–æ—Ä–≥", "—Å–∫–∏–¥–∫–∞", "—Ü–µ–Ω—É", "—Å—Ç–æ–∏—Ç", "—Ä—É–±", "–¥–æ—Ä–æ–∂–µ", "–¥–µ—à–µ–≤–ª–µ"
    ],

    MessageType.AVAILABILITY: [
        "–µ—Å—Ç—å", "–¥–æ—Å—Ç—É–ø–µ–Ω", "–Ω–∞–ª–∏—á–∏", "–æ—Å—Ç–∞–ª—Å—è", "–ø—Ä–æ–¥–∞–Ω", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω",
        "—Å–≤–æ–±–æ–¥–µ–Ω", "–∑–∞–Ω—è—Ç", "–∞–∫—Ç—É–∞–ª–µ–Ω", "–ø—Ä–æ–¥–∞–µ—Ç—Å—è", "–∏–º–µ–µ—Ç—Å—è"
    ],

    MessageType.PRODUCT_INFO: [
        "—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "—Ä–∞–∑–º–µ—Ä", "—Ü–≤–µ—Ç", "–º–∞—Ç–µ—Ä–∏–∞–ª", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "–¥–µ—Ñ–µ–∫—Ç", "—Ü–∞—Ä–∞–ø–∏–Ω", "–Ω–æ–≤—ã–π", "–±/—É", "–ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã–π", "–∫–∞—á–µ—Å—Ç–≤–æ"
    ],

    MessageType.MEETING_REQUEST: [
        "–≤—Å—Ç—Ä–µ—á", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "–ø—Ä–∏–µ—Ö–∞—Ç—å", "–∑–∞–±—Ä–∞—Ç—å", "–æ—Å–º–æ—Ç—Ä", "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ",
        "–≤—Ä–µ–º—è", "–∞–¥—Ä–µ—Å", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è", "–≤—Å—Ç—Ä–µ—á–∞", "–ø—Ä–∏–µ–∑–∂–∞–π—Ç–µ"
    ],

    MessageType.DELIVERY_QUESTION: [
        "–¥–æ—Å—Ç–∞–≤–∫–∞", "–ø—Ä–∏–≤–µ–∑–µ—Ç–µ", "–æ—Ç–ø—Ä–∞–≤–∫–∞", "–ø–æ—á—Ç–∞", "–∫—É—Ä—å–µ—Ä", "—Å–∞–º–æ–≤—ã–≤–æ–∑",
        "–¥–æ—Å—Ç–∞–≤–∏—Ç—å", "–ø—Ä–∏–≤–µ–∑—Ç–∏", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ø–æ–ª—É—á–µ–Ω–∏–µ", "–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç"
    ],

    MessageType.GREETING: [
        "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π", "–¥–æ–±—Ä–æ–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
        "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—Å–∞–ª—é—Ç", "—Ö–∞–π"
    ],

    MessageType.COMPLAINT: [
        "–∂–∞–ª–æ–±–∞", "–Ω–µ–¥–æ–≤–æ–ª–µ–Ω", "–ø–ª–æ—Ö–æ", "–æ–±–º–∞–Ω", "–º–æ—à–µ–Ω–Ω–∏–∫", "–≤–µ—Ä–Ω–∏—Ç–µ",
        "–≤–æ–∑–≤—Ä–∞—Ç", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "—Å–ª–æ–º–∞–Ω–Ω—ã–π"
    ],

    MessageType.SPAM: [
        "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–∑–∞–π–º", "–∫—Ä–µ–¥–∏—Ç",
        "–º–ª–º", "—Å–µ—Ç–µ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ø–∏—Ä–∞–º–∏–¥–∞", "–±–∏—Ç–∫–æ–∏–Ω"
    ]
}

# –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
RESPONSE_TEMPLATES: Dict[MessageType, List[str]] = {
    MessageType.PRICE_QUESTION: [
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ - {price} —Ä—É–±–ª–µ–π. –¢–æ—Ä–≥ –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ!",
        "–¶–µ–Ω–∞ {price} —Ä—É–±–ª–µ–π. –ú–æ–≥—É –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç—É–ø–∏—Ç—å –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–µ.",
        "–ó–∞ {price} —Ä—É–±–ª–µ–π –æ—Ç–¥–∞–º. –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –ø–æ–∂–∞–ª–µ–µ—Ç–µ!"
    ],

    MessageType.AVAILABILITY: [
        "–î–∞, —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! –ö–æ–≥–¥–∞ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        "–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –∏ –æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
        "–°–≤–æ–±–æ–¥–µ–Ω, –Ω–∏–∫—Ç–æ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª. –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ!"
    ],

    MessageType.GREETING: [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –æ —Ç–æ–≤–∞—Ä–µ?",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
    ],

    MessageType.MEETING_REQUEST: [
        "–ú–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ 18:00. –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤ –ª–∏—á–∫—É.",
        "–ó–∞–≤—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–µ–Ω –≤–µ—Å—å –¥–µ–Ω—å. –í–æ —Å–∫–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ –ø—Ä–∏–µ—Ö–∞—Ç—å?",
        "–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è —É –º–µ—Ç—Ä–æ –∏–ª–∏ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–∞. –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ?"
    ]
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CORE_CONFIG = CoreConfig()

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@lru_cache()
def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    return Settings()


def get_keywords_for_type(message_type: MessageType) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return MESSAGE_KEYWORDS.get(message_type, [])


def get_templates_for_type(message_type: MessageType) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return RESPONSE_TEMPLATES.get(message_type, [])


def validate_config(config: CoreConfig) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —è–¥—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        assert 0.0 <= config.ai.temperature <= 1.0
        assert config.ai.max_tokens > 0
        assert config.message_handler.min_message_length > 0
        assert config.response_generator.min_response_length > 0

        return True
    except (AssertionError, ValueError):
        return False


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_core_config() -> CoreConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return DEFAULT_CORE_CONFIG