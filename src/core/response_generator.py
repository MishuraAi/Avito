"""
üí¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –§–∏–Ω–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤
- –ê–¥–∞–ø—Ç–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/core/response_generator.py
"""

import random
import re
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

from pydantic import BaseModel

from .config import (
    ResponseGeneratorConfig, ResponseStyle, MessageType, 
    RESPONSE_TEMPLATES, get_templates_for_type
)
from .ai_consultant import (
    ConversationAnalysis, UserContext, ProductContext
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


@dataclass
class ResponseVariant:
    """–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    text: str
    style: ResponseStyle
    template_used: bool
    personalization_level: float  # 0.0-1.0
    estimated_engagement: float   # 0.0-1.0


class ResponseMetrics(BaseModel):
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
    
    length: int
    readability_score: float     # 0.0-1.0 (–ø—Ä–æ—Å—Ç–æ—Ç–∞ —á—Ç–µ–Ω–∏—è)
    politeness_score: float      # 0.0-1.0 (–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å)
    urgency_match: float         # 0.0-1.0 (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)
    personalization_score: float # 0.0-1.0 (–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    predicted_response_rate: float    # 0.0-1.0
    predicted_conversion_rate: float  # 0.0-1.0


class ResponseContext(BaseModel):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
    
    conversation_stage: str      # initial, negotiation, closing, post_sale
    conversation_length: int     # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
    time_since_last_message: int # —Å–µ–∫—É–Ω–¥—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_engagement_level: float # 0.0-1.0 (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    
    # –ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    is_urgent_sale: bool = False
    competitor_pressure: bool = False
    seasonal_demand: str = "normal"  # low, normal, high


class PersonalizationEngine:
    """–î–≤–∏–∂–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–µ–Ω–∏
        self.name_patterns = [
            "{name}, ",
            "{name}! ",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! ",
            "{name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
        ]
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.emoji_map = {
            MessageType.GREETING: ["üëã", "üòä", "ü§ù"],
            MessageType.PRICE_QUESTION: ["üí∞", "üíµ", "üí≥"],
            MessageType.AVAILABILITY: ["‚úÖ", "üëç", "üì¶"],
            MessageType.MEETING_REQUEST: ["üìÖ", "üè†", "üöó"],
            MessageType.PRODUCT_INFO: ["üìã", "‚ÑπÔ∏è", "üìù"],
            MessageType.DELIVERY_QUESTION: ["üöö", "üì¶", "üè†"]
        }
        
        # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã
        self.closing_phrases = [
            "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!",
            "–ñ–¥—É –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!",
            "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ!",
            "–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
            "–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!"
        ]
    
    def personalize_response(
        self,
        base_response: str,
        user_context: UserContext,
        message_type: MessageType,
        style: ResponseStyle
    ) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        response = base_response
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_context.name and random.random() < 0.7:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            name_pattern = random.choice(self.name_patterns)
            response = name_pattern.format(name=user_context.name) + response
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∏–ª—è)
        if style in [ResponseStyle.FRIENDLY, ResponseStyle.CASUAL]:
            if message_type in self.emoji_map and random.random() < 0.4:
                emoji = random.choice(self.emoji_map[message_type])
                response = f"{emoji} {response}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if len(response) > 100 and random.random() < 0.3:
            closing = random.choice(self.closing_phrases)
            response = f"{response} {closing}"
        
        return response
    
    def calculate_personalization_score(
        self,
        response: str,
        user_context: UserContext,
        product_context: ProductContext
    ) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏
        if user_context.name and user_context.name.lower() in response.lower():
            score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if product_context.title.lower() in response.lower():
            score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ü–µ–Ω—ã
        if product_context.price and str(product_context.price) in response:
            score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ –∏—Å—Ç–æ—Ä–∏—é
        if len(user_context.message_history) > 1:
            score += 0.1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å
        emoji_count = len(re.findall(r'[üòäüëã‚úÖüí∞üì¶üööüìÖ]', response))
        if emoji_count > 0:
            score += min(emoji_count * 0.1, 0.2)
        
        return min(score, 1.0)


class TemplateEngine:
    """–î–≤–∏–∂–æ–∫ —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.template_cache = {}
        self.usage_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    
    def select_template(
        self,
        message_type: MessageType,
        product_context: ProductContext,
        user_context: UserContext
    ) -> Optional[str]:
        """–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        
        templates = get_templates_for_type(message_type)
        
        if not templates:
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        suitable_templates = []
        
        for template in templates:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            if "{price}" in template and not product_context.price:
                continue
            
            suitable_templates.append(template)
        
        if not suitable_templates:
            return random.choice(templates)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±–æ–π
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ)
        template_weights = []
        for template in suitable_templates:
            usage_count = self.usage_stats.get(template, 0)
            weight = max(1.0 - (usage_count * 0.1), 0.1)  # –ú–µ–Ω—å—à–µ –≤–µ—Å–∞ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö
            template_weights.append(weight)
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        selected = random.choices(suitable_templates, weights=template_weights)[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.usage_stats[selected] = self.usage_stats.get(selected, 0) + 1
        
        return selected
    
    def fill_template(
        self,
        template: str,
        product_context: ProductContext,
        user_context: UserContext
    ) -> str:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏"""
        
        replacements = {
            "{price}": str(product_context.price) if product_context.price else "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è",
            "{title}": product_context.title,
            "{condition}": product_context.condition or "—Ö–æ—Ä–æ—à–µ–µ",
            "{seller_name}": product_context.seller_name or "–ø—Ä–æ–¥–∞–≤–µ—Ü",
            "{location}": product_context.location or "—É–∫–∞–∑–∞–Ω–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏",
            "{user_name}": user_context.name or ""
        }
        
        result = template
        for placeholder, value in replacements.items():
            result = result.replace(placeholder, value)
        
        return result


class QualityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        # –°–ª–æ–≤–∞ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏
        self.politeness_words = {
            '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', 
            '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '—Ä–∞–¥', '–≥–æ—Ç–æ–≤', '–ø–æ–º–æ—á—å'
        }
        
        # –°–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        self.complex_words = {
            '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '–æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å', '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å', '—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å',
            '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', '–ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å'
        }
    
    def analyze_response_quality(
        self,
        response: str,
        analysis: ConversationAnalysis,
        user_context: UserContext
    ) -> ResponseMetrics:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        length = len(response)
        words = response.lower().split()
        
        # –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–æ—Ç–∞ —è–∑—ã–∫–∞)
        complex_count = sum(1 for word in words if word in self.complex_words)
        readability_score = max(0.0, 1.0 - (complex_count / len(words)) * 2)
        
        # –í–µ–∂–ª–∏–≤–æ—Å—Ç—å
        polite_count = sum(1 for word in words if word in self.politeness_words)
        politeness_score = min(polite_count * 0.3, 1.0)
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency_words = ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–∫–æ—Ä–µ–µ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']
        has_urgency = any(word in response.lower() for word in urgency_words)
        
        urgency_match = 1.0
        if analysis.urgency == "high" and not has_urgency:
            urgency_match = 0.5
        elif analysis.urgency == "low" and has_urgency:
            urgency_match = 0.7
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        personalization_score = self._calculate_personalization_in_response(
            response, user_context
        )
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
        predicted_response_rate = (
            readability_score * 0.3 +
            politeness_score * 0.2 +
            urgency_match * 0.2 +
            personalization_score * 0.3
        )
        
        predicted_conversion_rate = predicted_response_rate * 0.7  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        return ResponseMetrics(
            length=length,
            readability_score=readability_score,
            politeness_score=politeness_score,
            urgency_match=urgency_match,
            personalization_score=personalization_score,
            predicted_response_rate=predicted_response_rate,
            predicted_conversion_rate=predicted_conversion_rate
        )
    
    def _calculate_personalization_in_response(
        self,
        response: str,
        user_context: UserContext
    ) -> float:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ"""
        
        score = 0.0
        response_lower = response.lower()
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_context.name and user_context.name.lower() in response_lower:
            score += 0.4
        
        # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
        if len(user_context.message_history) > 0:
            last_message = user_context.message_history[-1].lower()
            common_words = set(last_message.split()) & set(response_lower.split())
            if len(common_words) > 2:
                score += 0.3
        
        # –≠–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å
        if re.search(r'[üòäüëã‚úÖüí∞üì¶üööüìÖ]', response):
            score += 0.2
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        specific_words = ['—Ü–µ–Ω–∞', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—Å—Ç—Ä–µ—á–∞', '–æ—Å–º–æ—Ç—Ä']
        if any(word in response_lower for word in specific_words):
            score += 0.1
        
        return min(score, 1.0)


class ResponseGenerator:
    """
    üí¨ –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:
    1. –í—ã–±–æ—Ä –º–µ–∂–¥—É –ò–ò –∏ —à–∞–±–ª–æ–Ω–∞–º–∏
    2. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    4. A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    5. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    """
    
    def __init__(self, config: ResponseGeneratorConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        """
        self.config = config
        
        # –î–≤–∏–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.personalizer = PersonalizationEngine()
        self.template_engine = TemplateEngine()
        self.quality_analyzer = QualityAnalyzer()
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics = {
            "responses_generated": 0,
            "templates_used": 0,
            "ai_responses_used": 0,
            "avg_quality_score": 0.0,
            "avg_personalization_score": 0.0
        }
        
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def generate_response(
        self,
        ai_response: str,
        analysis: ConversationAnalysis,
        user_context: UserContext,
        product_context: ProductContext,
        response_context: Optional[ResponseContext] = None
    ) -> Tuple[str, ResponseMetrics]:
        """
        üéØ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            ai_response: –û—Ç–≤–µ—Ç –æ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
            analysis: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
            response_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Tuple[str, ResponseMetrics]: (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç, –º–µ—Ç—Ä–∏–∫–∏_–∫–∞—á–µ—Å—Ç–≤–∞)
        """
        self.metrics["responses_generated"] += 1
        
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ %s", analysis.message_type)
        
        try:
            # 1. –†–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω –∏–ª–∏ –ò–ò –æ—Ç–≤–µ—Ç
            use_template = (
                self.config.use_templates and
                random.random() < self.config.template_probability
            )
            
            base_response = ai_response
            template_used = False
            
            if use_template:
                template = self.template_engine.select_template(
                    analysis.message_type, product_context, user_context
                )
                
                if template:
                    base_response = self.template_engine.fill_template(
                        template, product_context, user_context
                    )
                    template_used = True
                    self.metrics["templates_used"] += 1
                    logger.debug("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ %s", analysis.message_type)
                else:
                    self.metrics["ai_responses_used"] += 1
            else:
                self.metrics["ai_responses_used"] += 1
            
            # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            if self.config.include_user_name or self.config.include_product_details:
                personalized_response = self.personalizer.personalize_response(
                    base_response,
                    user_context,
                    analysis.message_type,
                    ResponseStyle.FRIENDLY  # TODO: –±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
            else:
                personalized_response = base_response
            
            # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
            final_response = self._format_and_validate_response(
                personalized_response,
                analysis,
                user_context,
                product_context
            )
            
            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality_metrics = self.quality_analyzer.analyze_response_quality(
                final_response, analysis, user_context
            )
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._update_metrics(quality_metrics, template_used)
            
            logger.info("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –∫–∞—á–µ—Å—Ç–≤–æ: %.2f, –¥–ª–∏–Ω–∞: %d", 
                       quality_metrics.predicted_response_rate, quality_metrics.length)
            
            return final_response, quality_metrics
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %s", e)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            fallback_response = self._get_fallback_response(analysis.message_type)
            fallback_metrics = ResponseMetrics(
                length=len(fallback_response),
                readability_score=0.8,
                politeness_score=0.7,
                urgency_match=0.5,
                personalization_score=0.0,
                predicted_response_rate=0.6,
                predicted_conversion_rate=0.4
            )
            
            return fallback_response, fallback_metrics
    
    def generate_ab_variants(
        self,
        ai_response: str,
        analysis: ConversationAnalysis,
        user_context: UserContext,
        product_context: ProductContext,
        num_variants: int = 2
    ) -> List[ResponseVariant]:
        """
        üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            ai_response: –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            analysis: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
            num_variants: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            
        Returns:
            List[ResponseVariant]: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        """
        variants = []
        
        styles = [ResponseStyle.FRIENDLY, ResponseStyle.PROFESSIONAL, ResponseStyle.SALES]
        
        for i in range(min(num_variants, len(styles))):
            style = styles[i]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if i % 2 == 0:
                # –í–∞—Ä–∏–∞–Ω—Ç —Å —à–∞–±–ª–æ–Ω–æ–º
                template = self.template_engine.select_template(
                    analysis.message_type, product_context, user_context
                )
                
                if template:
                    response_text = self.template_engine.fill_template(
                        template, product_context, user_context
                    )
                    template_used = True
                else:
                    response_text = ai_response
                    template_used = False
            else:
                # –í–∞—Ä–∏–∞–Ω—Ç —Å –ò–ò –æ—Ç–≤–µ—Ç–æ–º
                response_text = ai_response
                template_used = False
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            personalized = self.personalizer.personalize_response(
                response_text, user_context, analysis.message_type, style
            )
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            personalization_level = self.personalizer.calculate_personalization_score(
                personalized, user_context, product_context
            )
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            engagement = self._estimate_engagement(personalized, analysis, style)
            
            variant = ResponseVariant(
                text=personalized,
                style=style,
                template_used=template_used,
                personalization_level=personalization_level,
                estimated_engagement=engagement
            )
            
            variants.append(variant)
        
        return variants
    
    def _format_and_validate_response(
        self,
        response: str,
        analysis: ConversationAnalysis,
        user_context: UserContext,
        product_context: ProductContext
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        formatted = re.sub(r'\s+', ' ', response.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(formatted) < self.config.min_response_length:
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            formatted += " –ë—É–¥—É —Ä–∞–¥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"
        
        if len(formatted) > self.config.max_response_length:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            formatted = formatted[:self.config.max_response_length - 3] + "..."
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if not formatted.endswith(('.', '!', '?')):
            formatted += '.'
        
        # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
        if formatted:
            formatted = formatted[0].upper() + formatted[1:]
        
        return formatted
    
    def _estimate_engagement(
        self,
        response: str,
        analysis: ConversationAnalysis,
        style: ResponseStyle
    ) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
        
        score = 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
        if 50 <= len(response) <= 200:
            score += 0.2
        
        # –°—Ç–∏–ª—å –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if style == ResponseStyle.FRIENDLY and analysis.sentiment == "positive":
            score += 0.2
        elif style == ResponseStyle.SALES and analysis.message_type == MessageType.PRICE_QUESTION:
            score += 0.2
        
        # –ù–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥)
        if '?' in response:
            score += 0.1
        
        # –≠–º–æ–¥–∑–∏
        if re.search(r'[üòäüëã‚úÖüí∞üì¶üööüìÖ]', response):
            score += 0.1
        
        return min(score, 1.0)
    
    def _get_fallback_response(self, message_type: MessageType) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        
        fallbacks = {
            MessageType.GREETING: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é.",
            MessageType.PRICE_QUESTION: "–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏.",
            MessageType.AVAILABILITY: "–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
            MessageType.MEETING_REQUEST: "–ú–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ.",
            MessageType.PRODUCT_INFO: "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            MessageType.DELIVERY_QUESTION: "–ü–æ –¥–æ—Å—Ç–∞–≤–∫–µ –º–æ–∂–µ–º –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ."
        }
        
        return fallbacks.get(
            message_type,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—Ç–≤–µ—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    
    def _update_metrics(self, quality_metrics: ResponseMetrics, template_used: bool) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        current_avg_quality = self.metrics["avg_quality_score"]
        total_responses = self.metrics["responses_generated"]
        
        new_quality = quality_metrics.predicted_response_rate
        self.metrics["avg_quality_score"] = (
            (current_avg_quality * (total_responses - 1) + new_quality) / total_responses
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
        current_avg_pers = self.metrics["avg_personalization_score"]
        new_pers = quality_metrics.personalization_score
        self.metrics["avg_personalization_score"] = (
            (current_avg_pers * (total_responses - 1) + new_pers) / total_responses
        )
    
    def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        template_usage_rate = 0.0
        if self.metrics["responses_generated"] > 0:
            template_usage_rate = self.metrics["templates_used"] / self.metrics["responses_generated"]
        
        return {
            **self.metrics,
            "template_usage_rate": template_usage_rate,
            "template_stats": dict(self.template_engine.usage_stats)
        }
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        self.template_engine.template_cache.clear()
        self.template_engine.usage_stats.clear()
        
        logger.info("–ö–µ—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã")


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def create_response_generator(config: Optional[ResponseGeneratorConfig] = None) -> ResponseGenerator:
    """
    üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        ResponseGenerator: –ì–æ—Ç–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    """
    
    if not config:
        config = ResponseGeneratorConfig()
    
    generator = ResponseGenerator(config)
    
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    return generator