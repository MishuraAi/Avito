"""
üì® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ü—Ä–∏–µ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/core/message_handler.py
"""

import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Tuple
from collections import defaultdict, deque

from pydantic import BaseModel

from .config import (
    MessageHandlerConfig, MessageType, MESSAGE_KEYWORDS,
    get_keywords_for_type
)
from .ai_consultant import (
    AIConsultant, UserContext, ProductContext, ConversationAnalysis
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class IncomingMessage(BaseModel):
    """–ú–æ–¥–µ–ª—å –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    message_id: str
    user_id: str
    product_id: str
    text: str
    timestamp: datetime
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    user_name: Optional[str] = None
    platform: str = "avito"  # avito, direct, etc
    is_read: bool = False
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    raw_data: Optional[Dict] = None


class ProcessedMessage(BaseModel):
    """–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    
    original: IncomingMessage
    analysis: ConversationAnalysis
    response: Optional[str] = None
    processing_time: float = 0.0
    
    # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status: str = "pending"  # pending, processed, error, blocked
    error_message: Optional[str] = None
    
    # –ú–µ—Ç–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    is_spam: bool = False
    is_duplicate: bool = False
    requires_human: bool = False


class RateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, max_messages: int, window_seconds: int):
        self.max_messages = max_messages
        self.window_seconds = window_seconds
        self.user_messages: Dict[str, deque] = defaultdict(deque)
    
    def is_allowed(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        now = datetime.now()
        user_queue = self.user_messages[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        while user_queue and (now - user_queue[0]).total_seconds() > self.window_seconds:
            user_queue.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_queue) >= self.max_messages:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_queue.append(now)
        return True
    
    def get_remaining_time(self, user_id: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        
        user_queue = self.user_messages[user_id]
        if not user_queue or len(user_queue) < self.max_messages:
            return 0
        
        oldest_message = user_queue[0]
        elapsed = (datetime.now() - oldest_message).total_seconds()
        
        return max(0, int(self.window_seconds - elapsed))


class SpamDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞
        self.spam_patterns = [
            r'\b(?:–∑–∞—Ä–∞–±|–¥–æ—Ö–æ–¥|–∏–Ω–≤–µ—Å—Ç|–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç|–±–∏—Ç–∫–æ–∏–Ω)\w*',
            r'\b(?:–∑–∞–π–º|–∫—Ä–µ–¥–∏—Ç|–¥–µ–Ω—å–≥–∏)\s+(?:–±—ã—Å—Ç—Ä–æ|—Å—Ä–æ—á–Ω–æ)',
            r'\bMLM\b|—Å–µ—Ç–µ–≤–æ–π\s+–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            r'(?:https?://|www\.)\w+',  # –°—Å—ã–ª–∫–∏
            r'\b(?:–ø–∏—Ä–∞–º–∏–¥|—Å—Ö–µ–º)\w*',
            r'(?:—Ç–µ–ª–µ–≥—Ä–∞–º|telegram)\s*:?\s*@?\w+',
        ]
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        self.spam_keywords = {
            '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '–±–∏—Ç–∫–æ–∏–Ω',
            '–∑–∞–π–º', '–∫—Ä–µ–¥–∏—Ç', '–±—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏', '–º–ª–º', '–ø–∏—Ä–∞–º–∏–¥–∞',
            '—Å—Ö–µ–º–∞', '—Ç–µ–ª–µ–≥—Ä–∞–º', 'whatsapp', 'viber'
        }
        
        # –ö–µ—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self._spam_cache: Dict[str, bool] = {}
    
    def is_spam(self, message: str, user_context: Optional[UserContext] = None) -> Tuple[bool, float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º
        
        Returns:
            Tuple[bool, float]: (is_spam, confidence_score)
        """
        
        message_lower = message.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if message_lower in self._spam_cache:
            return self._spam_cache[message_lower], 1.0
        
        spam_score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.spam_patterns:
            if re.search(pattern, message_lower, re.IGNORECASE):
                spam_score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword in self.spam_keywords:
            if keyword in message_lower:
                spam_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ)
        if len(message) < 3 or len(message) > 1000:
            spam_score += 0.1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if len(set(message)) < len(message) * 0.3:
            spam_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_context and user_context.blocked:
            spam_score += 0.5
        
        is_spam = spam_score > 0.7
        
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._spam_cache[message_lower] = is_spam
        
        return is_spam, min(spam_score, 1.0)


class MessageClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.keywords_cache = {
            msg_type: [kw.lower() for kw in keywords]
            for msg_type, keywords in MESSAGE_KEYWORDS.items()
        }
    
    def classify_message(self, message: str) -> Tuple[MessageType, float]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            Tuple[MessageType, float]: (message_type, confidence)
        """
        
        message_lower = message.lower().strip()
        scores = defaultdict(float)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for msg_type, keywords in self.keywords_cache.items():
            for keyword in keywords:
                if keyword in message_lower:
                    # –ë–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                    if f' {keyword} ' in f' {message_lower} ':
                        scores[msg_type] += 1.0
                    else:
                        scores[msg_type] += 0.5
        
        if not scores:
            return MessageType.GENERAL_QUESTION, 0.5
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–ø —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        best_type = max(scores.keys(), key=lambda x: scores[x])
        max_score = scores[best_type]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        total_keywords = len(self.keywords_cache[best_type])
        confidence = min(max_score / total_keywords, 1.0)
        
        return best_type, confidence


class MessageHandler:
    """
    üì® –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ –∏ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    3. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π  
    4. –ü–µ—Ä–µ–¥–∞—á–∞ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    5. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    """
    
    def __init__(
        self,
        config: MessageHandlerConfig,
        ai_consultant: AIConsultant
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            ai_consultant: –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        self.config = config
        self.ai_consultant = ai_consultant
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.rate_limiter = RateLimiter(
            config.rate_limit_messages,
            config.rate_limit_window
        )
        self.spam_detector = SpamDetector()
        self.classifier = MessageClassifier()
        
        # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.message_queue: asyncio.Queue = asyncio.Queue()
        self.processing_active = False
        
        # –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
        self.user_contexts: Dict[str, UserContext] = {}
        self.product_contexts: Dict[str, ProductContext] = {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics = {
            "messages_received": 0,
            "messages_processed": 0,
            "messages_blocked": 0,
            "spam_detected": 0,
            "errors": 0,
            "avg_processing_time": 0.0
        }
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_message(
        self,
        message: IncomingMessage,
        user_context: Optional[UserContext] = None,
        product_context: Optional[ProductContext] = None
    ) -> ProcessedMessage:
        """
        üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            product_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            ProcessedMessage: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.metrics["messages_received"] += 1
        start_time = datetime.now()
        
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", 
                   message.message_id, message.user_id)
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            validation_result = self._validate_message(message)
            if not validation_result.is_valid:
                return ProcessedMessage(
                    original=message,
                    analysis=ConversationAnalysis(
                        message_type=MessageType.GENERAL_QUESTION,
                        confidence=0.0,
                        intent="invalid",
                        sentiment="neutral",
                        urgency="low",
                        keywords_found=[]
                    ),
                    status="blocked",
                    error_message=validation_result.error_message
                )
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            user_ctx = user_context or self._get_user_context(message.user_id)
            product_ctx = product_context or self._get_product_context(message.product_id)
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            if not self.rate_limiter.is_allowed(message.user_id):
                self.metrics["messages_blocked"] += 1
                remaining_time = self.rate_limiter.get_remaining_time(message.user_id)
                
                return ProcessedMessage(
                    original=message,
                    analysis=ConversationAnalysis(
                        message_type=MessageType.GENERAL_QUESTION,
                        confidence=0.0,
                        intent="rate_limited",
                        sentiment="neutral",
                        urgency="low",
                        keywords_found=[]
                    ),
                    status="blocked",
                    error_message=f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥."
                )
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
            if self.config.spam_detection:
                is_spam, spam_confidence = self.spam_detector.is_spam(message.text, user_ctx)
                
                if is_spam:
                    self.metrics["spam_detected"] += 1
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.user_id)
                    
                    return ProcessedMessage(
                        original=message,
                        analysis=ConversationAnalysis(
                            message_type=MessageType.SPAM,
                            confidence=spam_confidence,
                            intent="spam",
                            sentiment="negative",
                            urgency="low",
                            keywords_found=[]
                        ),
                        status="blocked",
                        is_spam=True,
                        error_message="–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Å–ø–∞–º"
                    )
            
            # 5. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_type, type_confidence = self.classifier.classify_message(message.text)
            
            # 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò
            analysis = await self.ai_consultant.analyze_message(
                message.text, user_ctx, product_ctx
            )
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if type_confidence > analysis.confidence:
                analysis.message_type = message_type
                analysis.confidence = type_confidence
            
            # 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.ai_consultant.generate_response(
                message.text, analysis, user_ctx, product_ctx
            )
            
            # 8. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._update_user_context(user_ctx, message.text, analysis)
            
            # 9. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            processing_time = (datetime.now() - start_time).total_seconds()
            
            processed = ProcessedMessage(
                original=message,
                analysis=analysis,
                response=response,
                processing_time=processing_time,
                status="processed",
                requires_human=analysis.requires_human
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.metrics["messages_processed"] += 1
            self._update_avg_processing_time(processing_time)
            
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ %.2f —Å–µ–∫, —Ç–∏–ø: %s", 
                       processing_time, analysis.message_type)
            
            return processed
            
        except Exception as e:
            self.metrics["errors"] += 1
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %s: %s", message.message_id, e)
            
            return ProcessedMessage(
                original=message,
                analysis=ConversationAnalysis(
                    message_type=MessageType.GENERAL_QUESTION,
                    confidence=0.0,
                    intent="error",
                    sentiment="neutral",
                    urgency="high",
                    keywords_found=[]
                ),
                status="error",
                error_message=str(e),
                requires_human=True
            )
    
    def _validate_message(self, message: IncomingMessage) -> 'ValidationResult':
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(message.text) < self.config.min_message_length:
            return ValidationResult(
                False, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º {self.config.min_message_length} —Å–∏–º–≤–æ–ª–æ–≤)"
            )
        
        if len(message.text) > self.config.max_message_length:
            return ValidationResult(
                False, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {self.config.max_message_length} —Å–∏–º–≤–æ–ª–æ–≤)"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if not message.text.strip():
            return ValidationResult(False, "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not message.user_id or not message.product_id:
            return ValidationResult(False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        return ValidationResult(True, "OK")
    
    def _get_user_context(self, user_id: str) -> UserContext:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = UserContext(
                user_id=user_id,
                message_history=[],
                last_interaction=datetime.now(),
                is_serious_buyer=True
            )
        
        return self.user_contexts[user_id]
    
    def _get_product_context(self, product_id: str) -> ProductContext:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
        
        if product_id not in self.product_contexts:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            self.product_contexts[product_id] = ProductContext(
                title="–¢–æ–≤–∞—Ä –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                description="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"
            )
        
        return self.product_contexts[product_id]
    
    def _update_user_context(
        self, 
        user_context: UserContext, 
        message: str, 
        analysis: ConversationAnalysis
    ) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_context.message_history.append(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(user_context.message_history) > 10:
            user_context.message_history = user_context.message_history[-10:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        user_context.last_interaction = datetime.now()
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if analysis.message_type == MessageType.SPAM:
            user_context.is_serious_buyer = False
        elif analysis.message_type in [MessageType.MEETING_REQUEST, MessageType.PRICE_QUESTION]:
            user_context.is_serious_buyer = True
    
    def _update_avg_processing_time(self, processing_time: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        current_avg = self.metrics["avg_processing_time"]
        total_processed = self.metrics["messages_processed"]
        
        self.metrics["avg_processing_time"] = (
            (current_avg * (total_processed - 1) + processing_time) / total_processed
        )
    
    async def start_background_processing(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        if self.processing_active:
            logger.warning("–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.processing_active = True
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        while self.processing_active:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message_data = await asyncio.wait_for(
                    self.message_queue.get(), timeout=1.0
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.handle_message(message_data["message"])
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s", e)
    
    def stop_background_processing(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        self.processing_active = False
        logger.info("–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        
        success_rate = 0.0
        if self.metrics["messages_received"] > 0:
            success_rate = self.metrics["messages_processed"] / self.metrics["messages_received"]
        
        return {
            **self.metrics,
            "success_rate": success_rate,
            "queue_size": self.message_queue.qsize(),
            "user_contexts_count": len(self.user_contexts),
            "product_contexts_count": len(self.product_contexts)
        }
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
        
        self.user_contexts.clear()
        self.product_contexts.clear()
        self.spam_detector._spam_cache.clear()
        
        logger.info("–ö–µ—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–∏—â–µ–Ω—ã")


class ValidationResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    is_valid: bool
    error_message: Optional[str] = None


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def create_message_handler(
    config: MessageHandlerConfig,
    ai_consultant: AIConsultant
) -> MessageHandler:
    """
    üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        ai_consultant: –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
        
    Returns:
        MessageHandler: –ì–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    """
    
    handler = MessageHandler(config, ai_consultant)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    return handler