"""
üìã CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏:
- base.py         - –ë–∞–∑–æ–≤—ã–π CRUD –∫–ª–∞—Å—Å —Å –æ–±—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
- users.py        - CRUD –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
- messages.py     - CRUD –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —à–∞–±–ª–æ–Ω–æ–≤
- conversations.py - CRUD –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/crud/__init__.py
"""

from typing import Dict, Any, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è
try:
    from .base import BaseCRUD
    BASE_CRUD_AVAILABLE = True
except ImportError:
    BASE_CRUD_AVAILABLE = False

try:
    from .users import UserCRUD, SellerCRUD, UserProfileCRUD, SellerSettingsCRUD
    USER_CRUD_AVAILABLE = True
except ImportError:
    USER_CRUD_AVAILABLE = False

try:
    from .messages import MessageCRUD, MessageTemplateCRUD
    MESSAGE_CRUD_AVAILABLE = True
except ImportError:
    MESSAGE_CRUD_AVAILABLE = False

try:
    from .conversations import ConversationCRUD
    CONVERSATION_CRUD_AVAILABLE = True
except ImportError:
    CONVERSATION_CRUD_AVAILABLE = False


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
AVAILABLE_CRUD = {
    "base": BASE_CRUD_AVAILABLE,
    "users": USER_CRUD_AVAILABLE,
    "messages": MESSAGE_CRUD_AVAILABLE,
    "conversations": CONVERSATION_CRUD_AVAILABLE
}

# –í–µ—Ä—Å–∏—è CRUD –ø–∞–∫–µ—Ç–∞
__version__ = "0.1.0"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    "AVAILABLE_CRUD",
    "__version__"
]

# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ CRUD –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if BASE_CRUD_AVAILABLE:
    __all__.extend([
        "BaseCRUD"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º CRUD –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if USER_CRUD_AVAILABLE:
    __all__.extend([
        "UserCRUD",
        "SellerCRUD",
        "UserProfileCRUD", 
        "SellerSettingsCRUD"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º CRUD —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if MESSAGE_CRUD_AVAILABLE:
    __all__.extend([
        "MessageCRUD",
        "MessageTemplateCRUD"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º CRUD –¥–∏–∞–ª–æ–≥–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if CONVERSATION_CRUD_AVAILABLE:
    __all__.extend([
        "ConversationCRUD"
    ])


def get_crud_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"""
    
    return {
        "version": __version__,
        "available_crud": AVAILABLE_CRUD,
        "total_crud_classes": len(__all__) - 2,  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        "crud_categories": {
            "base": ["BaseCRUD"] if BASE_CRUD_AVAILABLE else [],
            "users": ["UserCRUD", "SellerCRUD", "UserProfileCRUD", "SellerSettingsCRUD"] if USER_CRUD_AVAILABLE else [],
            "messages": ["MessageCRUD", "MessageTemplateCRUD"] if MESSAGE_CRUD_AVAILABLE else [],
            "conversations": ["ConversationCRUD"] if CONVERSATION_CRUD_AVAILABLE else []
        }
    }


def get_all_crud_classes() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CRUD –∫–ª–∞—Å—Å–æ–≤"""
    
    crud_classes = []
    
    if BASE_CRUD_AVAILABLE:
        crud_classes.extend(["BaseCRUD"])
    
    if USER_CRUD_AVAILABLE:
        crud_classes.extend(["UserCRUD", "SellerCRUD", "UserProfileCRUD", "SellerSettingsCRUD"])
    
    if MESSAGE_CRUD_AVAILABLE:
        crud_classes.extend(["MessageCRUD", "MessageTemplateCRUD"])
    
    if CONVERSATION_CRUD_AVAILABLE:
        crud_classes.extend(["ConversationCRUD"])
    
    return crud_classes


def get_crud_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    status = {
        "initialized": True,
        "available_modules": [],
        "missing_modules": [],
        "total_classes": len(get_all_crud_classes())
    }
    
    for module_name, is_available in AVAILABLE_CRUD.items():
        if is_available:
            status["available_modules"].append(module_name)
        else:
            status["missing_modules"].append(module_name)
    
    return status


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã CRUD –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def create_crud_instances():
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ CRUD –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    instances = {}
    
    try:
        if BASE_CRUD_AVAILABLE:
            # BaseCRUD - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Å–æ–∑–¥–∞–µ–º
            pass
        
        if USER_CRUD_AVAILABLE:
            instances['user_crud'] = UserCRUD()
            instances['seller_crud'] = SellerCRUD()
            instances['user_profile_crud'] = UserProfileCRUD()
            instances['seller_settings_crud'] = SellerSettingsCRUD()
        
        if MESSAGE_CRUD_AVAILABLE:
            instances['message_crud'] = MessageCRUD()
            instances['message_template_crud'] = MessageTemplateCRUD()
        
        if CONVERSATION_CRUD_AVAILABLE:
            instances['conversation_crud'] = ConversationCRUD()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(instances)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ CRUD")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ CRUD: {e}")
        instances = {}
    
    return instances


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã CRUD (—Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
try:
    CRUD_INSTANCES = create_crud_instances()
    CRUD_INSTANCES_AVAILABLE = True
except Exception as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã CRUD: {e}")
    CRUD_INSTANCES = {}
    CRUD_INSTANCES_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –≤ —ç–∫—Å–ø–æ—Ä—Ç
__all__.extend([
    "get_crud_info",
    "get_all_crud_classes", 
    "get_crud_status",
    "create_crud_instances",
    "CRUD_INSTANCES",
    "CRUD_INSTANCES_AVAILABLE"
])

logger.info("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: %s", AVAILABLE_CRUD)
logger.info("–°–æ–∑–¥–∞–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ CRUD: %s", len(CRUD_INSTANCES) if CRUD_INSTANCES_AVAILABLE else 0)