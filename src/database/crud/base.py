"""
üìã –ë–∞–∑–æ–≤—ã–π CRUD –∫–ª–∞—Å—Å –¥–ª—è SQLAlchemy –º–æ–¥–µ–ª–µ–π

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é CRUD –æ–ø–µ—Ä–∞—Ü–∏–π:
- –°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
- –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
- –ü–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/crud/base.py
"""

import uuid
from datetime import datetime, timezone
from typing import (
    TypeVar, Generic, Type, Optional, List, Dict, Any, 
    Union, Sequence, Tuple
)

from sqlalchemy import and_, or_, desc, asc, func, text
from sqlalchemy.orm import Session, Query
from sqlalchemy.exc import SQLAlchemyError
from pydantic import BaseModel

from ..models.base import BaseModel as DBBaseModel

# –¢–∏–ø—ã –¥–ª—è Generic CRUD
ModelType = TypeVar("ModelType", bound=DBBaseModel)
CreateSchemaType = TypeVar("CreateSchemaType", bound=BaseModel)
UpdateSchemaType = TypeVar("UpdateSchemaType", bound=BaseModel)


class CRUDFilter(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    field: str
    value: Any
    operator: str = "eq"  # eq, ne, gt, gte, lt, lte, like, ilike, in, not_in
    
    class Config:
        arbitrary_types_allowed = True


class CRUDSort(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    
    field: str
    direction: str = "asc"  # asc, desc


class PaginationParams(BaseModel):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    
    skip: int = 0
    limit: int = 100
    
    class Config:
        validate_assignment = True


class PaginatedResponse(BaseModel, Generic[ModelType]):
    """–û—Ç–≤–µ—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    
    items: List[ModelType]
    total: int
    skip: int
    limit: int
    has_next: bool
    has_prev: bool
    
    class Config:
        arbitrary_types_allowed = True


class BaseCRUD(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):
    """
    üìã –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—é–±–æ–π –º–æ–¥–µ–ª–∏:
    - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (Create, Read, Update, Delete)
    - –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    - –ü–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    - –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    - –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    """
    
    def __init__(self, model: Type[ModelType]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CRUD
        
        Args:
            model: SQLAlchemy –º–æ–¥–µ–ª—å
        """
        self.model = model
        self.model_name = model.__name__
    
    def create(self, db: Session, *, obj_in: CreateSchemaType) -> ModelType:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            obj_in: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            
        Returns:
            ModelType: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ dict
            if isinstance(obj_in, BaseModel):
                obj_data = obj_in.dict(exclude_unset=True)
            else:
                obj_data = obj_in
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
            db_obj = self.model(**obj_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db.add(db_obj)
            db.commit()
            db.refresh(db_obj)
            
            return db_obj
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e
    
    def get(self, db: Session, id: uuid.UUID) -> Optional[ModelType]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            id: UUID –∑–∞–ø–∏—Å–∏
            
        Returns:
            Optional[ModelType]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        """
        return db.query(self.model).filter(self.model.id == id).first()
    
    def get_multi(
        self,
        db: Session,
        *,
        skip: int = 0,
        limit: int = 100,
        filters: Optional[List[CRUDFilter]] = None,
        sort: Optional[List[CRUDSort]] = None,
        include_deleted: bool = False
    ) -> List[ModelType]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            sort: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            include_deleted: –í–∫–ª—é—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            
        Returns:
            List[ModelType]: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        """
        query = db.query(self.model)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if not include_deleted and hasattr(self.model, 'is_deleted'):
            query = query.filter(self.model.is_deleted == False)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if filters:
            query = self._apply_filters(query, filters)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if sort:
            query = self._apply_sorting(query, sort)
        
        return query.offset(skip).limit(limit).all()
    
    def get_paginated(
        self,
        db: Session,
        *,
        pagination: PaginationParams,
        filters: Optional[List[CRUDFilter]] = None,
        sort: Optional[List[CRUDSort]] = None,
        include_deleted: bool = False
    ) -> PaginatedResponse[ModelType]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            pagination: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            sort: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            include_deleted: –í–∫–ª—é—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            
        Returns:
            PaginatedResponse[ModelType]: –û–±—ä–µ–∫—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        query = db.query(self.model)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if not include_deleted and hasattr(self.model, 'is_deleted'):
            query = query.filter(self.model.is_deleted == False)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if filters:
            query = self._apply_filters(query, filters)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total = query.count()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if sort:
            query = self._apply_sorting(query, sort)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
        items = query.offset(pagination.skip).limit(pagination.limit).all()
        
        return PaginatedResponse(
            items=items,
            total=total,
            skip=pagination.skip,
            limit=pagination.limit,
            has_next=pagination.skip + pagination.limit < total,
            has_prev=pagination.skip > 0
        )
    
    def update(
        self,
        db: Session,
        *,
        db_obj: ModelType,
        obj_in: Union[UpdateSchemaType, Dict[str, Any]]
    ) -> ModelType:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_obj: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            obj_in: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            ModelType: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(obj_in, BaseModel):
                update_data = obj_in.dict(exclude_unset=True)
            else:
                update_data = obj_in
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            for field, value in update_data.items():
                if hasattr(db_obj, field):
                    setattr(db_obj, field, value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            if hasattr(db_obj, 'updated_at'):
                db_obj.updated_at = datetime.now(timezone.utc)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
            if hasattr(db_obj, 'version'):
                db_obj.version += 1
            
            db.commit()
            db.refresh(db_obj)
            
            return db_obj
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e
    
    def delete(self, db: Session, *, id: uuid.UUID, hard_delete: bool = False) -> Optional[ModelType]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            id: UUID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            hard_delete: –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–Ω–µ –º—è–≥–∫–æ–µ)
            
        Returns:
            Optional[ModelType]: –£–¥–∞–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        """
        try:
            obj = self.get(db, id)
            if not obj:
                return None
            
            if hard_delete or not hasattr(obj, 'soft_delete'):
                # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                db.delete(obj)
            else:
                # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                obj.soft_delete()
            
            db.commit()
            return obj
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e
    
    def restore(self, db: Session, *, id: uuid.UUID) -> Optional[ModelType]:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º—è–≥–∫–æ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            id: UUID –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            Optional[ModelType]: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
        """
        try:
            obj = db.query(self.model).filter(
                and_(
                    self.model.id == id,
                    self.model.is_deleted == True
                )
            ).first()
            
            if not obj or not hasattr(obj, 'restore'):
                return None
            
            obj.restore()
            db.commit()
            db.refresh(obj)
            
            return obj
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e
    
    def count(
        self,
        db: Session,
        *,
        filters: Optional[List[CRUDFilter]] = None,
        include_deleted: bool = False
    ) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            include_deleted: –í–∫–ª—é—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        """
        query = db.query(func.count(self.model.id))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if not include_deleted and hasattr(self.model, 'is_deleted'):
            query = query.filter(self.model.is_deleted == False)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if filters:
            query = self._apply_filters(query, filters)
        
        return query.scalar()
    
    def exists(self, db: Session, *, id: uuid.UUID) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            id: UUID –∑–∞–ø–∏—Å–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        return db.query(
            db.query(self.model).filter(self.model.id == id).exists()
        ).scalar()
    
    def bulk_create(self, db: Session, *, objs_in: List[CreateSchemaType]) -> List[ModelType]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            objs_in: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            
        Returns:
            List[ModelType]: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        """
        try:
            db_objs = []
            
            for obj_in in objs_in:
                if isinstance(obj_in, BaseModel):
                    obj_data = obj_in.dict(exclude_unset=True)
                else:
                    obj_data = obj_in
                
                db_obj = self.model(**obj_data)
                db_objs.append(db_obj)
            
            db.add_all(db_objs)
            db.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            for db_obj in db_objs:
                db.refresh(db_obj)
            
            return db_objs
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e
    
    def bulk_update(
        self,
        db: Session,
        *,
        updates: List[Tuple[uuid.UUID, Dict[str, Any]]]
    ) -> List[ModelType]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            updates: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, update_data)
            
        Returns:
            List[ModelType]: –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        """
        try:
            updated_objs = []
            
            for obj_id, update_data in updates:
                obj = self.get(db, obj_id)
                if obj:
                    for field, value in update_data.items():
                        if hasattr(obj, field):
                            setattr(obj, field, value)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    if hasattr(obj, 'updated_at'):
                        obj.updated_at = datetime.now(timezone.utc)
                    
                    updated_objs.append(obj)
            
            db.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            for obj in updated_objs:
                db.refresh(obj)
            
            return updated_objs
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e
    
    def search(
        self,
        db: Session,
        *,
        query_text: str,
        search_fields: List[str],
        skip: int = 0,
        limit: int = 100
    ) -> List[ModelType]:
        """
        –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            query_text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_fields: –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[ModelType]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        """
        query = db.query(self.model)
        
        # –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        search_conditions = []
        for field in search_fields:
            if hasattr(self.model, field):
                field_attr = getattr(self.model, field)
                search_conditions.append(
                    field_attr.ilike(f"%{query_text}%")
                )
        
        if search_conditions:
            query = query.filter(or_(*search_conditions))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if hasattr(self.model, 'is_deleted'):
            query = query.filter(self.model.is_deleted == False)
        
        return query.offset(skip).limit(limit).all()
    
    def _apply_filters(self, query: Query, filters: List[CRUDFilter]) -> Query:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–∞–ø—Ä–æ—Å—É"""
        
        for filter_item in filters:
            if not hasattr(self.model, filter_item.field):
                continue
            
            field_attr = getattr(self.model, filter_item.field)
            
            if filter_item.operator == "eq":
                query = query.filter(field_attr == filter_item.value)
            elif filter_item.operator == "ne":
                query = query.filter(field_attr != filter_item.value)
            elif filter_item.operator == "gt":
                query = query.filter(field_attr > filter_item.value)
            elif filter_item.operator == "gte":
                query = query.filter(field_attr >= filter_item.value)
            elif filter_item.operator == "lt":
                query = query.filter(field_attr < filter_item.value)
            elif filter_item.operator == "lte":
                query = query.filter(field_attr <= filter_item.value)
            elif filter_item.operator == "like":
                query = query.filter(field_attr.like(f"%{filter_item.value}%"))
            elif filter_item.operator == "ilike":
                query = query.filter(field_attr.ilike(f"%{filter_item.value}%"))
            elif filter_item.operator == "in":
                query = query.filter(field_attr.in_(filter_item.value))
            elif filter_item.operator == "not_in":
                query = query.filter(~field_attr.in_(filter_item.value))
        
        return query
    
    def _apply_sorting(self, query: Query, sort_params: List[CRUDSort]) -> Query:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–ø—Ä–æ—Å—É"""
        
        for sort_item in sort_params:
            if not hasattr(self.model, sort_item.field):
                continue
            
            field_attr = getattr(self.model, sort_item.field)
            
            if sort_item.direction.lower() == "desc":
                query = query.order_by(desc(field_attr))
            else:
                query = query.order_by(asc(field_attr))
        
        return query
    
    def get_or_create(
        self,
        db: Session,
        *,
        defaults: Optional[Dict[str, Any]] = None,
        **kwargs
    ) -> Tuple[ModelType, bool]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            defaults: –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            **kwargs: –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            Tuple[ModelType, bool]: (–æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω_–ª–∏)
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            filters = [
                CRUDFilter(field=key, value=value, operator="eq")
                for key, value in kwargs.items()
            ]
            
            query = db.query(self.model)
            query = self._apply_filters(query, filters)
            
            obj = query.first()
            
            if obj:
                return obj, False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            create_data = {**kwargs}
            if defaults:
                create_data.update(defaults)
            
            obj = self.model(**create_data)
            db.add(obj)
            db.commit()
            db.refresh(obj)
            
            return obj, True
            
        except SQLAlchemyError as e:
            db.rollback()
            raise e


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    "BaseCRUD",
    "CRUDFilter",
    "CRUDSort", 
    "PaginationParams",
    "PaginatedResponse",
    "ModelType",
    "CreateSchemaType",
    "UpdateSchemaType"
]