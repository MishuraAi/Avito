"""
üë• CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è:
- User - –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å –ê–≤–∏—Ç–æ
- Seller - –ø—Ä–æ–¥–∞–≤—Ü—ã (–Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã)  
- UserProfile - –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- SellerSettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/crud/users.py
"""

import uuid
from datetime import datetime, timezone, timedelta
from typing import Optional, List, Dict, Any

from sqlalchemy import and_, or_, func
from sqlalchemy.orm import Session
from pydantic import BaseModel

from .base import BaseCRUD, CRUDFilter, PaginationParams
from ..models.users import (
    User, Seller, UserProfile, SellerSettings,
    UserType, SellerTier, ActivityLevel
)


# Pydantic —Å—Ö–µ–º—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
class UserCreate(BaseModel):
    """–°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    avito_user_id: str
    username: Optional[str] = None
    display_name: Optional[str] = None
    phone: Optional[str] = None
    email: Optional[str] = None


class UserUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username: Optional[str] = None
    display_name: Optional[str] = None
    phone: Optional[str] = None
    email: Optional[str] = None
    activity_level: Optional[ActivityLevel] = None
    is_verified: Optional[bool] = None
    trust_score: Optional[float] = None
    spam_score: Optional[float] = None


class SellerCreate(BaseModel):
    """–°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    email: str
    password_hash: str
    full_name: str
    company_name: Optional[str] = None
    phone: Optional[str] = None


class SellerUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    full_name: Optional[str] = None
    company_name: Optional[str] = None
    phone: Optional[str] = None
    avito_client_id: Optional[str] = None
    avito_client_secret: Optional[str] = None
    tier: Optional[SellerTier] = None


class UserCRUD(BaseCRUD[User, UserCreate, UserUpdate]):
    """
    üë§ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ User (–ø–æ–∫—É–ø–∞—Ç–µ–ª–∏)
    """
    
    def __init__(self):
        super().__init__(User)
    
    def get_by_avito_id(self, db: Session, *, avito_user_id: str) -> Optional[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Avito ID
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            avito_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ê–≤–∏—Ç–æ
            
        Returns:
            Optional[User]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None
        """
        return db.query(User).filter(
            and_(
                User.avito_user_id == avito_user_id,
                User.is_deleted == False
            )
        ).first()
    
    def get_by_email(self, db: Session, *, email: str) -> Optional[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[User]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None
        """
        return db.query(User).filter(
            and_(
                User.email == email,
                User.is_deleted == False
            )
        ).first()
    
    def get_active_users(
        self,
        db: Session,
        *,
        activity_levels: Optional[List[ActivityLevel]] = None,
        skip: int = 0,
        limit: int = 100
    ) -> List[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            activity_levels: –£—Ä–æ–≤–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[User]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        query = db.query(User).filter(
            and_(
                User.status == "active",
                User.is_blocked == False,
                User.is_deleted == False
            )
        )
        
        if activity_levels:
            query = query.filter(User.activity_level.in_(activity_levels))
        
        return query.offset(skip).limit(limit).all()
    
    def get_by_trust_score_range(
        self,
        db: Session,
        *,
        min_score: float = 0.0,
        max_score: float = 100.0,
        skip: int = 0,
        limit: int = 100
    ) -> List[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –∏–Ω–¥–µ–∫—Å–∞ –¥–æ–≤–µ—Ä–∏—è
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            min_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–≤–µ—Ä–∏—è
            max_score: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–≤–µ—Ä–∏—è
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[User]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        return db.query(User).filter(
            and_(
                User.trust_score >= min_score,
                User.trust_score <= max_score,
                User.is_deleted == False
            )
        ).offset(skip).limit(limit).all()
    
    def update_activity_stats(
        self,
        db: Session,
        *,
        user_id: uuid.UUID,
        message_count_increment: int = 1,
        conversation_count_increment: int = 0
    ) -> Optional[User]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_count_increment: –ü—Ä–∏—Ä–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            conversation_count_increment: –ü—Ä–∏—Ä–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            
        Returns:
            Optional[User]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        user = self.get(db, user_id)
        if not user:
            return None
        
        user.message_count += message_count_increment
        user.conversation_count += conversation_count_increment
        user.last_seen_at = datetime.now(timezone.utc)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user.update_activity_level()
        
        db.commit()
        db.refresh(user)
        
        return user
    
    def get_spam_candidates(
        self,
        db: Session,
        *,
        spam_threshold: float = 70.0,
        skip: int = 0,
        limit: int = 100
    ) -> List[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–ø–∞–º
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            spam_threshold: –ü–æ—Ä–æ–≥ –∏–Ω–¥–µ–∫—Å–∞ —Å–ø–∞–º–∞
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[User]: –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        return db.query(User).filter(
            and_(
                User.spam_score >= spam_threshold,
                User.is_blocked == False,
                User.is_deleted == False
            )
        ).order_by(User.spam_score.desc()).offset(skip).limit(limit).all()


class SellerCRUD(BaseCRUD[Seller, SellerCreate, SellerUpdate]):
    """
    üè™ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ Seller (–ø—Ä–æ–¥–∞–≤—Ü—ã)
    """
    
    def __init__(self):
        super().__init__(Seller)
    
    def get_by_email(self, db: Session, *, email: str) -> Optional[Seller]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ email
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            email: Email –ø—Ä–æ–¥–∞–≤—Ü–∞
            
        Returns:
            Optional[Seller]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ None
        """
        return db.query(Seller).filter(
            and_(
                Seller.email == email,
                Seller.is_deleted == False
            )
        ).first()
    
    def get_by_avito_user_id(self, db: Session, *, avito_user_id: str) -> Optional[Seller]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ Avito User ID
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            avito_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ê–≤–∏—Ç–æ
            
        Returns:
            Optional[Seller]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ None
        """
        return db.query(Seller).filter(
            and_(
                Seller.avito_user_id == avito_user_id,
                Seller.is_deleted == False
            )
        ).first()
    
    def get_by_tier(
        self,
        db: Session,
        *,
        tier: SellerTier,
        skip: int = 0,
        limit: int = 100
    ) -> List[Seller]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            tier: –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[Seller]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        """
        return db.query(Seller).filter(
            and_(
                Seller.tier == tier,
                Seller.is_deleted == False
            )
        ).offset(skip).limit(limit).all()
    
    def get_active_subscriptions(
        self,
        db: Session,
        *,
        skip: int = 0,
        limit: int = 100
    ) -> List[Seller]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[Seller]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        """
        now = datetime.now(timezone.utc)
        
        return db.query(Seller).filter(
            and_(
                or_(
                    Seller.subscription_ends_at.is_(None),  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
                    Seller.subscription_ends_at > now       # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                ),
                Seller.status == "active",
                Seller.is_deleted == False
            )
        ).offset(skip).limit(limit).all()
    
    def get_expiring_subscriptions(
        self,
        db: Session,
        *,
        days_ahead: int = 7,
        skip: int = 0,
        limit: int = 100
    ) -> List[Seller]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            days_ahead: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[Seller]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        """
        now = datetime.now(timezone.utc)
        expiry_date = now + timedelta(days=days_ahead)
        
        return db.query(Seller).filter(
            and_(
                Seller.subscription_ends_at.between(now, expiry_date),
                Seller.status == "active",
                Seller.is_deleted == False
            )
        ).order_by(Seller.subscription_ends_at).offset(skip).limit(limit).all()
    
    def update_message_usage(
        self,
        db: Session,
        *,
        seller_id: uuid.UUID,
        messages_used: int = 1
    ) -> Optional[Seller]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–≤–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            seller_id: ID –ø—Ä–æ–¥–∞–≤—Ü–∞
            messages_used: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            Optional[Seller]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü
        """
        seller = self.get(db, seller_id)
        if not seller:
            return None
        
        if seller.use_message_quota(messages_used):
            db.commit()
            db.refresh(seller)
            return seller
        
        return None  # –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞
    
    def reset_monthly_quotas(self, db: Session) -> int:
        """
        –°–±—Ä–æ—Å –º–µ—Å—è—á–Ω—ã—Ö –∫–≤–æ—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        """
        updated_count = db.query(Seller).filter(
            Seller.is_deleted == False
        ).update({
            "monthly_messages_used": 0
        })
        
        db.commit()
        return updated_count
    
    def get_usage_statistics(self, db: Session) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        stats = db.query(
            func.count(Seller.id).label("total_sellers"),
            func.sum(Seller.monthly_messages_used).label("total_messages_used"),
            func.sum(Seller.total_conversations).label("total_conversations"),
            func.sum(Seller.total_sales).label("total_sales")
        ).filter(Seller.is_deleted == False).first()
        
        tier_stats = db.query(
            Seller.tier,
            func.count(Seller.id).label("count")
        ).filter(
            Seller.is_deleted == False
        ).group_by(Seller.tier).all()
        
        return {
            "total_sellers": stats.total_sellers or 0,
            "total_messages_used": int(stats.total_messages_used or 0),
            "total_conversations": int(stats.total_conversations or 0),
            "total_sales": int(stats.total_sales or 0),
            "tier_distribution": {tier: count for tier, count in tier_stats}
        }


class UserProfileCRUD(BaseCRUD[UserProfile, Dict[str, Any], Dict[str, Any]]):
    """
    üìù CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ UserProfile
    """
    
    def __init__(self):
        super().__init__(UserProfile)
    
    def get_by_user_id(self, db: Session, *, user_id: uuid.UUID) -> Optional[UserProfile]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[UserProfile]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ None
        """
        return db.query(UserProfile).filter(
            and_(
                UserProfile.user_id == user_id,
                UserProfile.is_deleted == False
            )
        ).first()
    
    def get_or_create_profile(
        self,
        db: Session,
        *,
        user_id: uuid.UUID,
        defaults: Optional[Dict[str, Any]] = None
    ) -> UserProfile:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            defaults: –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            UserProfile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        profile = self.get_by_user_id(db, user_id=user_id)
        
        if not profile:
            create_data = {"user_id": user_id}
            if defaults:
                create_data.update(defaults)
            
            profile = UserProfile(**create_data)
            db.add(profile)
            db.commit()
            db.refresh(profile)
        
        return profile


class SellerSettingsCRUD(BaseCRUD[SellerSettings, Dict[str, Any], Dict[str, Any]]):
    """
    ‚öôÔ∏è CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ SellerSettings
    """
    
    def __init__(self):
        super().__init__(SellerSettings)
    
    def get_by_seller_id(self, db: Session, *, seller_id: uuid.UUID) -> Optional[SellerSettings]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ ID –ø—Ä–æ–¥–∞–≤—Ü–∞
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            seller_id: ID –ø—Ä–æ–¥–∞–≤—Ü–∞
            
        Returns:
            Optional[SellerSettings]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ None
        """
        return db.query(SellerSettings).filter(
            and_(
                SellerSettings.seller_id == seller_id,
                SellerSettings.is_deleted == False
            )
        ).first()
    
    def get_or_create_settings(
        self,
        db: Session,
        *,
        seller_id: uuid.UUID,
        defaults: Optional[Dict[str, Any]] = None
    ) -> SellerSettings:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            seller_id: ID –ø—Ä–æ–¥–∞–≤—Ü–∞
            defaults: –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            SellerSettings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        """
        settings = self.get_by_seller_id(db, seller_id=seller_id)
        
        if not settings:
            create_data = {"seller_id": seller_id}
            if defaults:
                create_data.update(defaults)
            
            settings = SellerSettings(**create_data)
            db.add(settings)
            db.commit()
            db.refresh(settings)
        
        return settings
    
    def get_auto_respond_enabled(
        self,
        db: Session,
        *,
        skip: int = 0,
        limit: int = 100
    ) -> List[SellerSettings]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            List[SellerSettings]: –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        return db.query(SellerSettings).filter(
            and_(
                SellerSettings.auto_respond_enabled == True,
                SellerSettings.is_deleted == False
            )
        ).offset(skip).limit(limit).all()


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ CRUD –∫–ª–∞—Å—Å–æ–≤
user_crud = UserCRUD()
seller_crud = SellerCRUD()
user_profile_crud = UserProfileCRUD()
seller_settings_crud = SellerSettingsCRUD()

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –°—Ö–µ–º—ã
    "UserCreate",
    "UserUpdate",
    "SellerCreate", 
    "SellerUpdate",
    
    # CRUD –∫–ª–∞—Å—Å—ã
    "UserCRUD",
    "SellerCRUD",
    "UserProfileCRUD",
    "SellerSettingsCRUD",
    
    # –≠–∫–∑–µ–º–ø–ª—è—Ä—ã
    "user_crud",
    "seller_crud",
    "user_profile_crud",
    "seller_settings_crud"
]