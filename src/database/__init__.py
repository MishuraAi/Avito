"""
üóÑÔ∏è –ü–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Avito AI Responder

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL:
- models/    - SQLAlchemy –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
- crud/      - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
- session.py - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
- config.py  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/__init__.py
"""

from typing import Optional, Dict, Any
import logging
from sqlalchemy import create_engine, event
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import StaticPool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–∫–∞ –∏ —Å–µ—Å—Å–∏–π
engine = None
SessionLocal = None

# –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è
try:
    from .models import *
    MODELS_AVAILABLE = True
except ImportError:
    MODELS_AVAILABLE = False

try:
    from .crud import *
    CRUD_AVAILABLE = True
except ImportError:
    CRUD_AVAILABLE = False

try:
    from .session import DatabaseManager, get_db
    SESSION_AVAILABLE = True
except ImportError:
    SESSION_AVAILABLE = False


class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(
        self,
        database_url: str,
        echo: bool = False,
        pool_size: int = 5,
        max_overflow: int = 10,
        pool_timeout: int = 30,
        pool_recycle: int = 3600,
        isolation_level: str = "READ_COMMITTED"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î
        
        Args:
            database_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
            echo: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã
            pool_size: –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            max_overflow: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞
            pool_timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            pool_recycle: –í—Ä–µ–º—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–µ–∫)
            isolation_level: –£—Ä–æ–≤–µ–Ω—å –∏–∑–æ–ª—è—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        
        self.database_url = database_url
        self.echo = echo
        self.pool_size = pool_size
        self.max_overflow = max_overflow
        self.pool_timeout = pool_timeout
        self.pool_recycle = pool_recycle
        self.isolation_level = isolation_level
    
    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        if not self.database_url:
            return False
        
        if not self.database_url.startswith(('postgresql://', 'postgresql+psycopg2://')):
            return False
        
        if self.pool_size <= 0 or self.max_overflow < 0:
            return False
        
        return True
    
    def to_engine_kwargs(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è create_engine"""
        
        return {
            "echo": self.echo,
            "pool_size": self.pool_size,
            "max_overflow": self.max_overflow,
            "pool_timeout": self.pool_timeout,
            "pool_recycle": self.pool_recycle,
            "isolation_level": self.isolation_level
        }


def init_database(config: DatabaseConfig) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    
    global engine, SessionLocal
    
    try:
        if not config.validate():
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = create_engine(
            config.database_url,
            **config.to_engine_kwargs()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        @event.listens_for(engine, "connect")
        def set_sqlite_pragma(dbapi_connection, connection_record):
            """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
            logger.debug("–ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        @event.listens_for(engine, "checkout")
        def receive_checkout(dbapi_connection, connection_record, connection_proxy):
            """–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∑—è—Ç–æ –∏–∑ –ø—É–ª–∞"""
            logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∑—è—Ç–æ –∏–∑ –ø—É–ª–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        SessionLocal = sessionmaker(
            autocommit=False,
            autoflush=False,
            bind=engine
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        with engine.connect() as conn:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", e)
        return False


def create_tables() -> bool:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    
    global engine
    
    if not engine:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: %s", e)
        return False


def drop_tables() -> bool:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    
    global engine
    
    if not engine:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False
    
    try:
        Base.metadata.drop_all(bind=engine)
        logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: %s", e)
        return False


def get_database_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    global engine, SessionLocal
    
    info = {
        "initialized": engine is not None,
        "session_factory": SessionLocal is not None,
        "available_components": {
            "models": MODELS_AVAILABLE,
            "crud": CRUD_AVAILABLE,
            "session": SESSION_AVAILABLE
        }
    }
    
    if engine:
        info.update({
            "url": str(engine.url).replace(str(engine.url.password), "***"),
            "pool_size": engine.pool.size(),
            "checked_out": engine.pool.checkedout(),
            "overflow": engine.pool.overflow(),
        })
    
    return info


def health_check() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
    """
    
    global engine
    
    if not engine:
        return False
    
    try:
        with engine.connect() as conn:
            conn.execute("SELECT 1")
        return True
        
    except Exception as e:
        logger.error("Health check –ë–î –Ω–µ—É–¥–∞—á–µ–Ω: %s", e)
        return False


# –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
__version__ = "0.1.0"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    "Base",
    "DatabaseConfig",
    
    # –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    "init_database",
    "create_tables",
    "drop_tables",
    "get_database_info",
    "health_check",
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    "engine",
    "SessionLocal",
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    "MODELS_AVAILABLE",
    "CRUD_AVAILABLE", 
    "SESSION_AVAILABLE",
    
    # –í–µ—Ä—Å–∏—è
    "__version__"
]

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç
if MODELS_AVAILABLE:
    __all__.extend([
        # –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π
    ])

if CRUD_AVAILABLE:
    __all__.extend([
        # –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CRUD
    ])

if SESSION_AVAILABLE:
    __all__.extend([
        "DatabaseManager",
        "get_db"
    ])