"""
üë• –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
- User - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–∑ –ê–≤–∏—Ç–æ)
- Seller - –º–æ–¥–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–Ω–∞—à –∫–ª–∏–µ–Ω—Ç)
- UserProfile - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
- SellerSettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/models/users.py
"""

from datetime import datetime, timezone
from typing import Optional, List, Dict, Any
from enum import Enum

from sqlalchemy import (
    Column, String, Integer, Boolean, DateTime, Text, 
    Numeric, ForeignKey, UniqueConstraint, Index
)
from sqlalchemy.dialects.postgresql import UUID, JSONB, ENUM
from sqlalchemy.orm import relationship, validates
from sqlalchemy.ext.hybrid import hybrid_property

from .base import BaseModel, AuditMixin, AnalyticsMixin, StatusEnum


class UserType(str, Enum):
    """–¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    BUYER = "buyer"           # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –ê–≤–∏—Ç–æ
    SELLER = "seller"         # –ü—Ä–æ–¥–∞–≤–µ—Ü (–Ω–∞—à –∫–ª–∏–µ–Ω—Ç)
    ADMIN = "admin"           # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã


class SellerTier(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
    
    FREE = "free"             # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
    BASIC = "basic"           # –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
    PREMIUM = "premium"       # –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω
    ENTERPRISE = "enterprise" # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω


class ActivityLevel(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    INACTIVE = "inactive"     # –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
    LOW = "low"              # –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    MEDIUM = "medium"        # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
    HIGH = "high"            # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    VERY_HIGH = "very_high"  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å


class User(BaseModel, AnalyticsMixin):
    """
    üë§ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –ê–≤–∏—Ç–æ)
    
    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞–º
    """
    
    __tablename__ = "users"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    avito_user_id = Column(
        String(50),
        nullable=False,
        unique=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –ê–≤–∏—Ç–æ"
    )
    
    username = Column(
        String(100),
        nullable=True,
        comment="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ê–≤–∏—Ç–æ"
    )
    
    display_name = Column(
        String(200),
        nullable=True,
        comment="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    user_type = Column(
        ENUM(UserType, name="user_type_enum"),
        nullable=False,
        default=UserType.BUYER,
        comment="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    phone = Column(
        String(20),
        nullable=True,
        comment="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )
    
    email = Column(
        String(255),
        nullable=True,
        comment="Email –∞–¥—Ä–µ—Å"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    status = Column(
        String(20),
        nullable=False,
        default=StatusEnum.ACTIVE,
        comment="–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    activity_level = Column(
        ENUM(ActivityLevel, name="activity_level_enum"),
        nullable=False,
        default=ActivityLevel.LOW,
        comment="–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    )
    
    is_verified = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    
    is_blocked = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    
    blocked_reason = Column(
        Text,
        nullable=True,
        comment="–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
    )
    
    blocked_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
    )
    
    # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    message_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    
    conversation_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤"
    )
    
    purchase_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫"
    )
    
    last_seen_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    )
    
    # –û—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è
    rating = Column(
        Numeric(3, 2),
        nullable=True,
        comment="–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0.00-5.00)"
    )
    
    trust_score = Column(
        Numeric(5, 2),
        nullable=False,
        default=50.00,
        comment="–ò–Ω–¥–µ–∫—Å –¥–æ–≤–µ—Ä–∏—è (0.00-100.00)"
    )
    
    spam_score = Column(
        Numeric(5, 2),
        nullable=False,
        default=0.00,
        comment="–ò–Ω–¥–µ–∫—Å —Å–ø–∞–º–∞ (0.00-100.00)"
    )
    
    # –°–≤—è–∑–∏
    conversations = relationship(
        "Conversation",
        back_populates="user",
        cascade="all, delete-orphan"
    )
    
    messages = relationship(
        "Message",
        back_populates="user",
        cascade="all, delete-orphan"
    )
    
    user_profile = relationship(
        "UserProfile",
        back_populates="user",
        uselist=False,
        cascade="all, delete-orphan"
    )
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_users_avito_id", "avito_user_id"),
        Index("idx_users_status", "status"),
        Index("idx_users_activity", "activity_level"),
        Index("idx_users_last_seen", "last_seen_at"),
    )
    
    @hybrid_property
    def is_active_buyer(self) -> bool:
        """–ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"""
        return (
            self.status == StatusEnum.ACTIVE and
            not self.is_blocked and
            self.activity_level in [ActivityLevel.MEDIUM, ActivityLevel.HIGH, ActivityLevel.VERY_HIGH]
        )
    
    @hybrid_property
    def avg_messages_per_conversation(self) -> float:
        """–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ª–æ–≥"""
        if self.conversation_count == 0:
            return 0.0
        return self.message_count / self.conversation_count
    
    def update_activity_level(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        
        if self.message_count == 0:
            self.activity_level = ActivityLevel.INACTIVE
        elif self.message_count < 5:
            self.activity_level = ActivityLevel.LOW
        elif self.message_count < 20:
            self.activity_level = ActivityLevel.MEDIUM
        elif self.message_count < 50:
            self.activity_level = ActivityLevel.HIGH
        else:
            self.activity_level = ActivityLevel.VERY_HIGH
    
    def block_user(self, reason: str) -> None:
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.is_blocked = True
        self.blocked_reason = reason
        self.blocked_at = datetime.now(timezone.utc)
        self.status = StatusEnum.INACTIVE
    
    def unblock_user(self) -> None:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.is_blocked = False
        self.blocked_reason = None
        self.blocked_at = None
        self.status = StatusEnum.ACTIVE
    
    @validates('rating')
    def validate_rating(self, key: str, rating: Optional[float]) -> Optional[float]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        if rating is not None and (rating < 0 or rating > 5):
            raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 5")
        return rating
    
    @validates('trust_score', 'spam_score')
    def validate_scores(self, key: str, score: float) -> float:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤"""
        if score < 0 or score > 100:
            raise ValueError(f"{key} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
        return score


class Seller(BaseModel, AuditMixin):
    """
    üè™ –ú–æ–¥–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ (–Ω–∞—à –∫–ª–∏–µ–Ω—Ç)
    
    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞—à —Å–µ—Ä–≤–∏—Å
    """
    
    __tablename__ = "sellers"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    email = Column(
        String(255),
        nullable=False,
        unique=True,
        comment="Email –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )
    
    password_hash = Column(
        String(255),
        nullable=False,
        comment="–•–µ—à –ø–∞—Ä–æ–ª—è"
    )
    
    full_name = Column(
        String(200),
        nullable=False,
        comment="–ü–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )
    
    company_name = Column(
        String(200),
        nullable=True,
        comment="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
    )
    
    phone = Column(
        String(20),
        nullable=True,
        comment="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )
    
    # –ê–≤–∏—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    avito_user_id = Column(
        String(50),
        nullable=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ê–≤–∏—Ç–æ"
    )
    
    avito_client_id = Column(
        String(100),
        nullable=True,
        comment="Client ID –¥–ª—è –ê–≤–∏—Ç–æ API"
    )
    
    avito_client_secret = Column(
        String(255),
        nullable=True,
        comment="Client Secret –¥–ª—è –ê–≤–∏—Ç–æ API (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω)"
    )
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏ —Ç–∞—Ä–∏—Ñ
    tier = Column(
        ENUM(SellerTier, name="seller_tier_enum"),
        nullable=False,
        default=SellerTier.FREE,
        comment="–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"
    )
    
    subscription_starts_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏"
    )
    
    subscription_ends_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    status = Column(
        String(20),
        nullable=False,
        default=StatusEnum.ACTIVE,
        comment="–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )
    
    is_email_verified = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email"
    )
    
    is_avito_connected = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫ –ê–≤–∏—Ç–æ API"
    )
    
    monthly_message_limit = Column(
        Integer,
        nullable=False,
        default=100,
        comment="–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü"
    )
    
    monthly_messages_used = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_conversations = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤"
    )
    
    total_messages_sent = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    
    total_sales = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂"
    )
    
    last_login_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"
    )
    
    # –°–≤—è–∑–∏
    products = relationship(
        "Product",
        back_populates="seller",
        cascade="all, delete-orphan"
    )
    
    conversations = relationship(
        "Conversation",
        back_populates="seller",
        cascade="all, delete-orphan"
    )
    
    seller_settings = relationship(
        "SellerSettings",
        back_populates="seller",
        uselist=False,
        cascade="all, delete-orphan"
    )
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_sellers_email", "email"),
        Index("idx_sellers_tier", "tier"),
        Index("idx_sellers_status", "status"),
        Index("idx_sellers_subscription", "subscription_ends_at"),
    )
    
    @hybrid_property
    def is_subscription_active(self) -> bool:
        """–ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞"""
        if not self.subscription_ends_at:
            return self.tier == SellerTier.FREE
        return datetime.now(timezone.utc) < self.subscription_ends_at
    
    @hybrid_property
    def messages_remaining(self) -> int:
        """–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return max(0, self.monthly_message_limit - self.monthly_messages_used)
    
    @hybrid_property
    def can_send_messages(self) -> bool:
        """–ú–æ–∂–µ—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return (
            self.status == StatusEnum.ACTIVE and
            self.is_subscription_active and
            self.messages_remaining > 0
        )
    
    def use_message_quota(self, count: int = 1) -> bool:
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–≤–æ—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç
        """
        if self.messages_remaining >= count:
            self.monthly_messages_used += count
            return True
        return False
    
    def reset_monthly_quota(self) -> None:
        """–°–±—Ä–æ—Å –º–µ—Å—è—á–Ω–æ–π –∫–≤–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.monthly_messages_used = 0
    
    def upgrade_tier(self, new_tier: SellerTier, months: int = 1) -> None:
        """
        –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        
        Args:
            new_tier: –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
            months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
        """
        self.tier = new_tier
        
        now = datetime.now(timezone.utc)
        if self.subscription_ends_at and self.subscription_ends_at > now:
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            from dateutil.relativedelta import relativedelta
            self.subscription_ends_at += relativedelta(months=months)
        else:
            # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            self.subscription_starts_at = now
            from dateutil.relativedelta import relativedelta
            self.subscription_ends_at = now + relativedelta(months=months)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
        tier_limits = {
            SellerTier.FREE: 100,
            SellerTier.BASIC: 1000,
            SellerTier.PREMIUM: 5000,
            SellerTier.ENTERPRISE: 50000
        }
        self.monthly_message_limit = tier_limits.get(new_tier, 100)


class UserProfile(BaseModel):
    """
    üìù –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    
    __tablename__ = "user_profiles"
    
    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = Column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        unique=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    age_group = Column(
        String(20),
        nullable=True,
        comment="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
    )
    
    gender = Column(
        String(10),
        nullable=True,
        comment="–ü–æ–ª"
    )
    
    location = Column(
        String(200),
        nullable=True,
        comment="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
    )
    
    # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    preferred_communication_style = Column(
        String(20),
        nullable=True,
        comment="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"
    )
    
    typical_response_time = Column(
        Integer,
        nullable=True,
        comment="–¢–∏–ø–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"
    )
    
    preferred_contact_hours = Column(
        JSONB,
        nullable=True,
        comment="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —á–∞—Å—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"
    )
    
    # –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    interested_categories = Column(
        JSONB,
        nullable=True,
        comment="–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    
    price_sensitivity = Column(
        String(20),
        nullable=True,
        comment="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ü–µ–Ω–µ (low/medium/high)"
    )
    
    buying_patterns = Column(
        JSONB,
        nullable=True,
        comment="–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∫—É–ø–æ–∫"
    )
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="user_profile")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_user_profiles_user_id", "user_id"),
        Index("idx_user_profiles_location", "location"),
    )


class SellerSettings(BaseModel):
    """
    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
    
    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    
    __tablename__ = "seller_settings"
    
    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    seller_id = Column(
        UUID(as_uuid=True),
        ForeignKey("sellers.id", ondelete="CASCADE"),
        nullable=False,
        unique=True,
        comment="ID –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
    ai_response_style = Column(
        String(20),
        nullable=False,
        default="friendly",
        comment="–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò"
    )
    
    ai_temperature = Column(
        Numeric(3, 2),
        nullable=False,
        default=0.7,
        comment="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ò–ò (—Ç–≤–æ—Ä—á–µ—Å–∫–æ—Å—Ç—å)"
    )
    
    use_templates = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤"
    )
    
    template_probability = Column(
        Numeric(3, 2),
        nullable=False,
        default=0.3,
        comment="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"
    )
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    auto_respond_enabled = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã"
    )
    
    auto_respond_delay = Column(
        Integer,
        nullable=False,
        default=60,
        comment="–ó–∞–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    working_hours_start = Column(
        Integer,
        nullable=True,
        comment="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (0-23)"
    )
    
    working_hours_end = Column(
        Integer,
        nullable=True,
        comment="–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (0-23)"
    )
    
    weekend_responses = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–û—Ç–≤–µ—á–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ"
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è
    spam_filter_enabled = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–í–∫–ª—é—á–µ–Ω –ª–∏ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä"
    )
    
    minimum_message_length = Column(
        Integer,
        nullable=False,
        default=3,
        comment="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    blocked_keywords = Column(
        JSONB,
        nullable=True,
        comment="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
    )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    seller_name = Column(
        String(100),
        nullable=True,
        comment="–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤"
    )
    
    company_info = Column(
        Text,
        nullable=True,
        comment="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
    )
    
    custom_greeting = Column(
        Text,
        nullable=True,
        comment="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    )
    
    custom_signature = Column(
        Text,
        nullable=True,
        comment="–ü–æ–¥–ø–∏—Å—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    email_notifications = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    notification_types = Column(
        JSONB,
        nullable=True,
        comment="–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    
    # –°–≤—è–∑–∏
    seller = relationship("Seller", back_populates="seller_settings")
    
    @validates('ai_temperature')
    def validate_temperature(self, key: str, temperature: float) -> float:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ò–ò"""
        if temperature < 0 or temperature > 1:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
        return temperature
    
    @validates('working_hours_start', 'working_hours_end')
    def validate_working_hours(self, key: str, hour: Optional[int]) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        if hour is not None and (hour < 0 or hour > 23):
            raise ValueError("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")
        return hour


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –ï–Ω—É–º—ã
    "UserType",
    "SellerTier", 
    "ActivityLevel",
    
    # –ú–æ–¥–µ–ª–∏
    "User",
    "Seller",
    "UserProfile",
    "SellerSettings"
]