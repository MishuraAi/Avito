"""
üìã –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è SQLAlchemy

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö:
- Base - –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ SQLAlchemy  
- BaseModel - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–±—â–∏–º–∏ –ø–æ–ª—è–º–∏
- TimestampMixin - –º–∏–∫—Å–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
- –û–±—â–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É—Ç–∏–ª–∏—Ç—ã

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/models/base.py
"""

import uuid
from datetime import datetime, timezone
from typing import Dict, Any, Optional, List

from sqlalchemy import Column, String, DateTime, Boolean, Text, Integer, BigInteger
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.ext.declarative import declarative_base, declared_attr
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.orm import validates

# –°–æ–∑–¥–∞–µ–º –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—É—é –±–∞–∑—É SQLAlchemy
Base = declarative_base()


class TimestampMixin:
    """
    üïí –ú–∏–∫—Å–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è:
    - created_at: –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    - updated_at: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    
    created_at = Column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc),
        comment="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    )
    
    updated_at = Column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc),
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    )
    
    @hybrid_property
    def age_seconds(self) -> int:
        """–í–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return int((datetime.now(timezone.utc) - self.created_at).total_seconds())
    
    @hybrid_property
    def is_fresh(self) -> bool:
        """–°–≤–µ–∂–∞—è –ª–∏ –∑–∞–ø–∏—Å—å (–º–ª–∞–¥—à–µ 24 —á–∞—Å–æ–≤)"""
        return self.age_seconds < 86400  # 24 —á–∞—Å–∞


class SoftDeleteMixin:
    """
    üóëÔ∏è –ú–∏–∫—Å–∏–Ω –¥–ª—è –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è:
    - is_deleted: —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è
    - deleted_at: –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    
    is_deleted = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–§–ª–∞–≥ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
    )
    
    deleted_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    )
    
    def soft_delete(self) -> None:
        """–ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        self.is_deleted = True
        self.deleted_at = datetime.now(timezone.utc)
    
    def restore(self) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        self.is_deleted = False
        self.deleted_at = None


class BaseModel(Base, TimestampMixin, SoftDeleteMixin):
    """
    üìã –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    - –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON
    - –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    """
    
    __abstract__ = True
    
    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á UUID
    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        default=uuid.uuid4,
        comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    metadata_ = Column(
        "metadata",  # –ò–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å SQLAlchemy metadata
        JSONB,
        nullable=True,
        default=dict,
        comment="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON"
    )
    
    # –í–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    version = Column(
        Integer,
        nullable=False,
        default=1,
        comment="–í–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏"
    )
    
    @declared_attr
    def __tablename__(cls) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CamelCase –≤ snake_case
        import re
        name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', cls.__name__)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()
    
    def to_dict(self, include_relations: bool = False) -> Dict[str, Any]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            include_relations: –í–∫–ª—é—á–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª–∏
        """
        
        result = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        for column in self.__table__.columns:
            value = getattr(self, column.name)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
            if isinstance(value, uuid.UUID):
                value = str(value)
            elif isinstance(value, datetime):
                value = value.isoformat()
            
            result[column.name] = value
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if include_relations:
            for relationship in self.__mapper__.relationships:
                related_obj = getattr(self, relationship.key)
                
                if related_obj is not None:
                    if hasattr(related_obj, 'to_dict'):
                        result[relationship.key] = related_obj.to_dict()
                    elif isinstance(related_obj, list):
                        result[relationship.key] = [
                            obj.to_dict() if hasattr(obj, 'to_dict') else str(obj)
                            for obj in related_obj
                        ]
                    else:
                        result[relationship.key] = str(related_obj)
        
        return result
    
    def update_from_dict(self, data: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        
        for key, value in data.items():
            if hasattr(self, key) and key not in ['id', 'created_at']:
                setattr(self, key, value)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
        self.version += 1
    
    def set_metadata(self, key: str, value: Any) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
        Args:
            key: –ö–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
        """
        
        if self.metadata_ is None:
            self.metadata_ = {}
        
        self.metadata_[key] = value
    
    def get_metadata(self, key: str, default: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
        Args:
            key: –ö–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            Any: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ default
        """
        
        if self.metadata_ is None:
            return default
        
        return self.metadata_.get(key, default)
    
    def add_tag(self, tag: str) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        
        Args:
            tag: –¢–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        
        if self.metadata_ is None:
            self.metadata_ = {}
        
        if 'tags' not in self.metadata_:
            self.metadata_['tags'] = []
        
        if tag not in self.metadata_['tags']:
            self.metadata_['tags'].append(tag)
    
    def remove_tag(self, tag: str) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
        Args:
            tag: –¢–µ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        
        if (self.metadata_ and 
            'tags' in self.metadata_ and 
            tag in self.metadata_['tags']):
            self.metadata_['tags'].remove(tag)
    
    def has_tag(self, tag: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–∞
        
        Args:
            tag: –¢–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–µ–≥ –µ—Å—Ç—å
        """
        
        return (self.metadata_ and 
                'tags' in self.metadata_ and 
                tag in self.metadata_['tags'])
    
    def get_tags(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        """
        
        if self.metadata_ and 'tags' in self.metadata_:
            return self.metadata_['tags'].copy()
        
        return []
    
    @validates('version')
    def validate_version(self, key: str, version: int) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ –∑–∞–ø–∏—Å–∏"""
        if version < 1:
            raise ValueError("–í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return version
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        return f"<{self.__class__.__name__}(id={self.id})>"
    
    def __str__(self) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return f"{self.__class__.__name__} {str(self.id)[:8]}"


class AuditMixin:
    """
    üìù –ú–∏–∫—Å–∏–Ω –¥–ª—è –∞—É–¥–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è:
    - created_by: –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å
    - updated_by: –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª
    """
    
    created_by = Column(
        UUID(as_uuid=True),
        nullable=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–ø–∏—Å—å"
    )
    
    updated_by = Column(
        UUID(as_uuid=True),
        nullable=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏–∑–º–µ–Ω–∏–≤—à–µ–≥–æ –∑–∞–ø–∏—Å—å"
    )


class AnalyticsMixin:
    """
    üìä –ú–∏–∫—Å–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è:
    - view_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    - interaction_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    - last_accessed: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    """
    
    view_count = Column(
        BigInteger,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    )
    
    interaction_count = Column(
        BigInteger,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"
    )
    
    last_accessed_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
    )
    
    def increment_views(self) -> None:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        self.view_count += 1
        self.last_accessed_at = datetime.now(timezone.utc)
    
    def increment_interactions(self) -> None:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        self.interaction_count += 1
        self.last_accessed_at = datetime.now(timezone.utc)


# –û–±—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –µ–Ω—É–º—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö
class StatusEnum:
    """–û–±—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
    
    ACTIVE = "active"
    INACTIVE = "inactive"
    PENDING = "pending"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class PriorityEnum:
    """–£—Ä–æ–≤–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    "Base",  # –î–æ–±–∞–≤–ª—è–µ–º Base –≤ —ç–∫—Å–ø–æ—Ä—Ç
    "BaseModel",
    
    # –ú–∏–∫—Å–∏–Ω—ã
    "TimestampMixin",
    "SoftDeleteMixin", 
    "AuditMixin",
    "AnalyticsMixin",
    
    # –ï–Ω—É–º—ã
    "StatusEnum",
    "PriorityEnum"
]