"""
üìã –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ SQLAlchemy –º–æ–¥–µ–ª–∏:
- base.py      - –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–±—â–∏–º–∏ –ø–æ–ª—è–º–∏
- users.py     - –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
- messages.py  - –ú–æ–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∏–∞–ª–æ–≥–æ–≤
- products.py  - –ú–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
- settings.py  - –ú–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
- analytics.py - –ú–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/models/__init__.py
"""

from typing import List, Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
try:
    from .base import Base, BaseModel, TimestampMixin
    BASE_AVAILABLE = True
except ImportError:
    BASE_AVAILABLE = False

# –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è
try:
    from .users import User, Seller, UserProfile
    USERS_AVAILABLE = True
except ImportError:
    USERS_AVAILABLE = False

try:
    from .messages import Message, Conversation, MessageTemplate
    MESSAGES_AVAILABLE = True
except ImportError:
    MESSAGES_AVAILABLE = False

try:
    from .products import Product, ProductImage, ProductCategory
    PRODUCTS_AVAILABLE = True
except ImportError:
    PRODUCTS_AVAILABLE = False

try:
    from .settings import SystemSettings, UserSettings, IntegrationSettings
    SETTINGS_AVAILABLE = True
except ImportError:
    SETTINGS_AVAILABLE = False

try:
    from .analytics import MessageAnalytics, ConversationMetrics, SystemMetrics
    ANALYTICS_AVAILABLE = True
except ImportError:
    ANALYTICS_AVAILABLE = False


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = {
    "base": BASE_AVAILABLE,
    "users": USERS_AVAILABLE,
    "messages": MESSAGES_AVAILABLE,
    "products": PRODUCTS_AVAILABLE,
    "settings": SETTINGS_AVAILABLE,
    "analytics": ANALYTICS_AVAILABLE
}

# –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–µ–π
__version__ = "0.1.0"

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    "AVAILABLE_MODELS",
    "__version__"
]

# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if BASE_AVAILABLE:
    __all__.extend([
        "Base",  # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º Base –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π!
        "BaseModel",
        "TimestampMixin"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if USERS_AVAILABLE:
    __all__.extend([
        "User",
        "Seller", 
        "UserProfile"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if MESSAGES_AVAILABLE:
    __all__.extend([
        "Message",
        "Conversation",
        "MessageTemplate"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if PRODUCTS_AVAILABLE:
    __all__.extend([
        "Product",
        "ProductImage",
        "ProductCategory"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if SETTINGS_AVAILABLE:
    __all__.extend([
        "SystemSettings",
        "UserSettings",
        "IntegrationSettings"
    ])

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if ANALYTICS_AVAILABLE:
    __all__.extend([
        "MessageAnalytics",
        "ConversationMetrics",
        "SystemMetrics"
    ])


def get_all_models() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    models = []
    
    if BASE_AVAILABLE:
        models.extend(["Base", "BaseModel", "TimestampMixin"])
    
    if USERS_AVAILABLE:
        models.extend(["User", "Seller", "UserProfile"])
    
    if MESSAGES_AVAILABLE:
        models.extend(["Message", "Conversation", "MessageTemplate"])
    
    if PRODUCTS_AVAILABLE:
        models.extend(["Product", "ProductImage", "ProductCategory"])
    
    if SETTINGS_AVAILABLE:
        models.extend(["SystemSettings", "UserSettings", "IntegrationSettings"])
    
    if ANALYTICS_AVAILABLE:
        models.extend(["MessageAnalytics", "ConversationMetrics", "SystemMetrics"])
    
    return models


def get_models_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö"""
    
    return {
        "version": __version__,
        "available_models": AVAILABLE_MODELS,
        "total_models": len(get_all_models()),
        "model_categories": {
            "base": ["Base", "BaseModel", "TimestampMixin"] if BASE_AVAILABLE else [],
            "users": ["User", "Seller", "UserProfile"] if USERS_AVAILABLE else [],
            "messages": ["Message", "Conversation", "MessageTemplate"] if MESSAGES_AVAILABLE else [],
            "products": ["Product", "ProductImage", "ProductCategory"] if PRODUCTS_AVAILABLE else [],
            "settings": ["SystemSettings", "UserSettings", "IntegrationSettings"] if SETTINGS_AVAILABLE else [],
            "analytics": ["MessageAnalytics", "ConversationMetrics", "SystemMetrics"] if ANALYTICS_AVAILABLE else []
        }
    }


logger.info("–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: %s", AVAILABLE_MODELS)