"""
üí¨ –ú–æ–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –¥–∏–∞–ª–æ–≥–∞–º–∏:
- Message - –º–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
- Conversation - –º–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–∞/—á–∞—Ç–∞
- MessageTemplate - —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
- MessageAnalytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/models/messages.py
"""

from datetime import datetime, timezone
from typing import Optional, List, Dict, Any
from enum import Enum

from sqlalchemy import (
    Column, String, Integer, Boolean, DateTime, Text, 
    Numeric, ForeignKey, UniqueConstraint, Index, text
)
from sqlalchemy.dialects.postgresql import UUID, JSONB, ENUM
from sqlalchemy.orm import relationship, validates
from sqlalchemy.ext.hybrid import hybrid_property

from .base import BaseModel, AnalyticsMixin, StatusEnum, PriorityEnum


class MessageType(str, Enum):
    """–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    PRICE_QUESTION = "price_question"
    AVAILABILITY = "availability" 
    PRODUCT_INFO = "product_info"
    MEETING_REQUEST = "meeting_request"
    DELIVERY_QUESTION = "delivery_question"
    GENERAL_QUESTION = "general_question"
    GREETING = "greeting"
    COMPLAINT = "complaint"
    SPAM = "spam"


class MessageStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    RECEIVED = "received"         # –ü–æ–ª—É—á–µ–Ω–æ
    PROCESSING = "processing"     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    RESPONDED = "responded"       # –û—Ç–≤–µ—á–µ–Ω–æ
    FAILED = "failed"            # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    IGNORED = "ignored"          # –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ


class MessageDirection(str, Enum):
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    INCOMING = "incoming"         # –í—Ö–æ–¥—è—â–µ–µ (–æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
    OUTGOING = "outgoing"        # –ò—Å—Ö–æ–¥—è—â–µ–µ (–æ—Ç –±–æ—Ç–∞/–ø—Ä–æ–¥–∞–≤—Ü–∞)


class ConversationStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    ACTIVE = "active"            # –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    WAITING = "waiting"          # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
    COMPLETED = "completed"      # –ó–∞–≤–µ—Ä—à–µ–Ω
    ARCHIVED = "archived"        # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
    BLOCKED = "blocked"          # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω


class Message(BaseModel, AnalyticsMixin):
    """
    üí¨ –ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
    
    –•—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ (–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ)
    """
    
    __tablename__ = "messages"
    
    # –°–≤—è–∑–∏
    conversation_id = Column(
        UUID(as_uuid=True),
        ForeignKey("conversations.id", ondelete="CASCADE"),
        nullable=False,
        comment="ID –¥–∏–∞–ª–æ–≥–∞"
    )
    
    user_id = Column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"
    )
    
    seller_id = Column(
        UUID(as_uuid=True),
        ForeignKey("sellers.id", ondelete="CASCADE"),
        nullable=True,
        comment="ID –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    avito_message_id = Column(
        String(100),
        nullable=True,
        comment="ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ê–≤–∏—Ç–æ"
    )
    
    direction = Column(
        ENUM(MessageDirection, name="message_direction_enum"),
        nullable=False,
        comment="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    message_type = Column(
        ENUM(MessageType, name="message_type_enum"),
        nullable=True,
        comment="–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)"
    )
    
    content = Column(
        Text,
        nullable=False,
        comment="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    original_content = Column(
        Text,
        nullable=True,
        comment="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏)"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    status = Column(
        ENUM(MessageStatus, name="message_status_enum"),
        nullable=False,
        default=MessageStatus.RECEIVED,
        comment="–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    priority = Column(
        String(20),
        nullable=False,
        default=PriorityEnum.MEDIUM,
        comment="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    is_automated = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–°–æ–∑–¥–∞–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    )
    
    is_template_based = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–û—Å–Ω–æ–≤–∞–Ω–æ –ª–∏ –Ω–∞ —à–∞–±–ª–æ–Ω–µ"
    )
    
    template_id = Column(
        UUID(as_uuid=True),
        ForeignKey("message_templates.id"),
        nullable=True,
        comment="ID –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    sent_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    )
    
    delivered_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
    
    read_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è"
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò
    ai_analysis = Column(
        JSONB,
        nullable=True,
        comment="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ò–ò"
    )
    
    ai_confidence = Column(
        Numeric(5, 4),
        nullable=True,
        comment="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò –≤ –∞–Ω–∞–ª–∏–∑–µ (0-1)"
    )
    
    processing_time_ms = Column(
        Integer,
        nullable=True,
        comment="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    sentiment = Column(
        String(20),
        nullable=True,
        comment="–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞ (positive/negative/neutral)"
    )
    
    sentiment_score = Column(
        Numeric(5, 4),
        nullable=True,
        comment="–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (-1 –¥–æ 1)"
    )
    
    urgency_level = Column(
        String(20),
        nullable=True,
        comment="–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (low/medium/high)"
    )
    
    # –í–ª–æ–∂–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞
    attachments = Column(
        JSONB,
        nullable=True,
        comment="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö"
    )
    
    has_attachments = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–ï—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è"
    )
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    response_time_seconds = Column(
        Integer,
        nullable=True,
        comment="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    user_satisfaction = Column(
        Integer,
        nullable=True,
        comment="–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)"
    )
    
    # –°–≤—è–∑–∏
    conversation = relationship("Conversation", back_populates="messages")
    user = relationship("User", back_populates="messages")
    seller = relationship("Seller")
    template = relationship("MessageTemplate", back_populates="messages")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_messages_conversation", "conversation_id"),
        Index("idx_messages_status", "status"),
        Index("idx_messages_type", "message_type"),
        Index("idx_messages_direction", "direction"),
        Index("idx_messages_created_at", "created_at"),
        Index("idx_messages_avito_id", "avito_message_id"),
        Index("idx_messages_sentiment", "sentiment"),
    )
    
    @hybrid_property
    def is_incoming(self) -> bool:
        """–í—Ö–æ–¥—è—â–µ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.direction == MessageDirection.INCOMING
    
    @hybrid_property
    def is_outgoing(self) -> bool:
        """–ò—Å—Ö–æ–¥—è—â–µ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.direction == MessageDirection.OUTGOING
    
    @hybrid_property
    def is_processed(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.status in [MessageStatus.RESPONDED, MessageStatus.FAILED, MessageStatus.IGNORED]
    
    @hybrid_property
    def word_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        return len(self.content.split()) if self.content else 0
    
    def mark_as_sent(self) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        self.sent_at = datetime.now(timezone.utc)
        if self.status == MessageStatus.PROCESSING:
            self.status = MessageStatus.RESPONDED
    
    def mark_as_delivered(self) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        self.delivered_at = datetime.now(timezone.utc)
    
    def mark_as_read(self) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        self.read_at = datetime.now(timezone.utc)
    
    def set_ai_analysis(self, analysis_data: Dict[str, Any], confidence: float) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
        """
        self.ai_analysis = analysis_data
        self.ai_confidence = confidence
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        if 'message_type' in analysis_data:
            self.message_type = MessageType(analysis_data['message_type'])
        
        if 'sentiment' in analysis_data:
            self.sentiment = analysis_data['sentiment']
        
        if 'sentiment_score' in analysis_data:
            self.sentiment_score = analysis_data['sentiment_score']
        
        if 'urgency' in analysis_data:
            self.urgency_level = analysis_data['urgency']
    
    @validates('sentiment_score')
    def validate_sentiment_score(self, key: str, score: Optional[float]) -> Optional[float]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if score is not None and (score < -1 or score > 1):
            raise ValueError("–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -1 –¥–æ 1")
        return score
    
    @validates('user_satisfaction')
    def validate_satisfaction(self, key: str, rating: Optional[int]) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if rating is not None and (rating < 1 or rating > 5):
            raise ValueError("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        return rating


class Conversation(BaseModel, AnalyticsMixin):
    """
    üí¨ –ú–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–∞/—á–∞—Ç–∞
    
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
    """
    
    __tablename__ = "conversations"
    
    # –°–≤—è–∑–∏
    user_id = Column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è)"
    )
    
    seller_id = Column(
        UUID(as_uuid=True),
        ForeignKey("sellers.id", ondelete="CASCADE"),
        nullable=False,
        comment="ID –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )
    
    product_id = Column(
        UUID(as_uuid=True),
        ForeignKey("products.id", ondelete="SET NULL"),
        nullable=True,
        comment="ID —Ç–æ–≤–∞—Ä–∞"
    )
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ê–≤–∏—Ç–æ
    avito_chat_id = Column(
        String(100),
        nullable=True,
        unique=True,
        comment="ID —á–∞—Ç–∞ –≤ –ê–≤–∏—Ç–æ"
    )
    
    avito_item_id = Column(
        String(100),
        nullable=True,
        comment="ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ê–≤–∏—Ç–æ"
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = Column(
        String(500),
        nullable=True,
        comment="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞"
    )
    
    status = Column(
        ENUM(ConversationStatus, name="conversation_status_enum"),
        nullable=False,
        default=ConversationStatus.ACTIVE,
        comment="–°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞"
    )
    
    priority = Column(
        String(20),
        nullable=False,
        default=PriorityEnum.MEDIUM,
        comment="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∏–∞–ª–æ–≥–∞"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    
    incoming_message_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    
    outgoing_message_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    
    automated_response_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    first_message_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    last_message_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    last_user_message_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    last_response_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    is_ai_enabled = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–í–∫–ª—é—á–µ–Ω –ª–∏ –ò–ò –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"
    )
    
    is_auto_respond_enabled = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã"
    )
    
    is_monitored = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥"
    )
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞
    outcome = Column(
        String(50),
        nullable=True,
        comment="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞ (sale/no_sale/pending)"
    )
    
    sale_amount = Column(
        Numeric(10, 2),
        nullable=True,
        comment="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏"
    )
    
    conversion_score = Column(
        Numeric(5, 4),
        nullable=True,
        comment="–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (0-1)"
    )
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–∞
    avg_response_time = Column(
        Integer,
        nullable=True,
        comment="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    user_satisfaction_avg = Column(
        Numeric(3, 2),
        nullable=True,
        comment="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    ai_effectiveness_score = Column(
        Numeric(5, 4),
        nullable=True,
        comment="–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–ò"
    )
    
    # –¢–µ–≥–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    tags = Column(
        JSONB,
        nullable=True,
        comment="–¢–µ–≥–∏ –¥–∏–∞–ª–æ–≥–∞"
    )
    
    conversation_summary = Column(
        Text,
        nullable=True,
        comment="–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"
    )
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="conversations")
    seller = relationship("Seller", back_populates="conversations") 
    product = relationship("Product", back_populates="conversations")
    messages = relationship(
        "Message", 
        back_populates="conversation",
        cascade="all, delete-orphan",
        order_by="Message.created_at"
    )
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_conversations_user", "user_id"),
        Index("idx_conversations_seller", "seller_id"),
        Index("idx_conversations_product", "product_id"),
        Index("idx_conversations_status", "status"),
        Index("idx_conversations_avito_chat", "avito_chat_id"),
        Index("idx_conversations_last_message", "last_message_at"),
        Index("idx_conversations_outcome", "outcome"),
        UniqueConstraint("avito_chat_id", name="uq_conversations_avito_chat"),
    )
    
    @hybrid_property
    def is_active(self) -> bool:
        """–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–∏–∞–ª–æ–≥"""
        return self.status == ConversationStatus.ACTIVE
    
    @hybrid_property
    def is_stale(self) -> bool:
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –ª–∏ –¥–∏–∞–ª–æ–≥ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ > 7 –¥–Ω–µ–π)"""
        if not self.last_message_at:
            return True
        
        days_since_last_message = (
            datetime.now(timezone.utc) - self.last_message_at
        ).days
        
        return days_since_last_message > 7
    
    @hybrid_property
    def response_rate(self) -> float:
        """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤"""
        if self.incoming_message_count == 0:
            return 0.0
        return self.outgoing_message_count / self.incoming_message_count
    
    @hybrid_property
    def automation_rate(self) -> float:
        """–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        if self.outgoing_message_count == 0:
            return 0.0
        return self.automated_response_count / self.outgoing_message_count
    
    def add_message(self, message: 'Message') -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.message_count += 1
        
        if message.direction == MessageDirection.INCOMING:
            self.incoming_message_count += 1
            self.last_user_message_at = message.created_at
        else:
            self.outgoing_message_count += 1
            self.last_response_at = message.created_at
            
            if message.is_automated:
                self.automated_response_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if not self.first_message_at:
            self.first_message_at = message.created_at
        
        self.last_message_at = message.created_at
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not self.title and message.content:
            self.title = message.content[:100] + ("..." if len(message.content) > 100 else "")
    
    def calculate_avg_response_time(self) -> None:
        """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        if self.outgoing_message_count > 0:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞
            total_response_time = sum(
                msg.response_time_seconds for msg in self.messages
                if msg.response_time_seconds and msg.direction == MessageDirection.OUTGOING
            )
            
            count_with_response_time = len([
                msg for msg in self.messages
                if msg.response_time_seconds and msg.direction == MessageDirection.OUTGOING
            ])
            
            if count_with_response_time > 0:
                self.avg_response_time = total_response_time // count_with_response_time
    
    def archive(self, reason: Optional[str] = None) -> None:
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        self.status = ConversationStatus.ARCHIVED
        
        if reason:
            self.set_metadata("archive_reason", reason)
        
        self.set_metadata("archived_at", datetime.now(timezone.utc).isoformat())
    
    def mark_as_sale(self, amount: Optional[float] = None) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–∂—É"""
        self.outcome = "sale"
        self.sale_amount = amount
        self.conversion_score = 1.0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞
        if self.seller:
            self.seller.total_sales += 1
    
    def block(self, reason: str) -> None:
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        self.status = ConversationStatus.BLOCKED
        self.is_ai_enabled = False
        self.is_auto_respond_enabled = False
        
        self.set_metadata("block_reason", reason)
        self.set_metadata("blocked_at", datetime.now(timezone.utc).isoformat())


class MessageTemplate(BaseModel):
    """
    üìù –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
    
    –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    """
    
    __tablename__ = "message_templates"
    
    # –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    seller_id = Column(
        UUID(as_uuid=True),
        ForeignKey("sellers.id", ondelete="CASCADE"),
        nullable=True,
        comment="ID –ø—Ä–æ–¥–∞–≤—Ü–∞ (NULL –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤)"
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    name = Column(
        String(200),
        nullable=False,
        comment="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
    )
    
    description = Column(
        Text,
        nullable=True,
        comment="–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
    )
    
    template_text = Column(
        Text,
        nullable=False,
        comment="–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"
    )
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    message_type = Column(
        ENUM(MessageType, name="template_message_type_enum"),
        nullable=False,
        comment="–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞"
    )
    
    category = Column(
        String(100),
        nullable=True,
        comment="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    is_active = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —à–∞–±–ª–æ–Ω"
    )
    
    is_system = Column(
        Boolean,
        nullable=False,
        default=False,
        comment="–°–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏ —à–∞–±–ª–æ–Ω"
    )
    
    priority = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_count = Column(
        Integer,
        nullable=False,
        default=0,
        comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
    )
    
    success_rate = Column(
        Numeric(5, 4),
        nullable=True,
        comment="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"
    )
    
    avg_user_rating = Column(
        Numeric(3, 2),
        nullable=True,
        comment="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    last_used_at = Column(
        DateTime(timezone=True),
        nullable=True,
        comment="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    )
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
    template_variables = Column(
        JSONB,
        nullable=True,
        comment="–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ"
    )
    
    # –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    conditions = Column(
        JSONB,
        nullable=True,
        comment="–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"
    )
    
    # –°–≤—è–∑–∏
    seller = relationship("Seller")
    messages = relationship("Message", back_populates="template")
    
    # –ò–Ω–¥–µ–∫—Å—ã
    __table_args__ = (
        Index("idx_templates_seller", "seller_id"),
        Index("idx_templates_type", "message_type"),
        Index("idx_templates_active", "is_active"),
        Index("idx_templates_system", "is_system"),
        Index("idx_templates_usage", "usage_count"),
    )
    
    def increment_usage(self) -> None:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.usage_count += 1
        self.last_used_at = datetime.now(timezone.utc)
    
    def update_success_rate(self, success: bool) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        if self.success_rate is None:
            self.success_rate = 1.0 if success else 0.0
        else:
            # –í–µ—Å –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            weight = 0.1
            new_value = 1.0 if success else 0.0
            self.success_rate = (1 - weight) * self.success_rate + weight * new_value
    
    def format_template(self, variables: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        
        Args:
            variables: –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        
        try:
            return self.template_text.format(**variables)
        except KeyError as e:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {e}")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –ï–Ω—É–º—ã
    "MessageType",
    "MessageStatus", 
    "MessageDirection",
    "ConversationStatus",
    
    # –ú–æ–¥–µ–ª–∏
    "Message",
    "Conversation",
    "MessageTemplate"
]