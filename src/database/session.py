"""
üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Avito AI Responder

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å –ë–î:
- DatabaseManager - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
- get_db - dependency –¥–ª—è FastAPI
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/database/session.py
"""

import logging
from contextlib import contextmanager, asynccontextmanager
from typing import Generator, AsyncGenerator, Optional, Dict, Any

from sqlalchemy import create_engine, event, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.pool import QueuePool
from sqlalchemy.exc import SQLAlchemyError

from . import DatabaseConfig, engine, SessionLocal, Base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class DatabaseManager:
    """
    üóÑÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏, —Å–µ—Å—Å–∏—è–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    
    def __init__(self, config: DatabaseConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.config = config
        self.engine = None
        self.session_factory = None
        self.async_engine = None
        self.async_session_factory = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_connections": 0,
            "active_connections": 0,
            "total_transactions": 0,
            "failed_transactions": 0,
            "total_queries": 0
        }
        
        logger.info("DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_sync(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
            self.engine = create_engine(
                self.config.database_url,
                **self.config.to_engine_kwargs(),
                poolclass=QueuePool,
                pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                pool_recycle=self.config.pool_recycle
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self._setup_event_listeners(self.engine)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
            self.session_factory = sessionmaker(
                bind=self.engine,
                autocommit=False,
                autoflush=False,
                expire_on_commit=False
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %s", e)
            return False
    
    def initialize_async(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è asyncpg
            async_url = self.config.database_url.replace(
                "postgresql://", "postgresql+asyncpg://"
            ).replace(
                "postgresql+psycopg2://", "postgresql+asyncpg://"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
            self.async_engine = create_async_engine(
                async_url,
                echo=self.config.echo,
                pool_size=self.config.pool_size,
                max_overflow=self.config.max_overflow,
                pool_timeout=self.config.pool_timeout,
                pool_recycle=self.config.pool_recycle
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            self.async_session_factory = async_sessionmaker(
                bind=self.async_engine,
                class_=AsyncSession,
                autocommit=False,
                autoflush=False,
                expire_on_commit=False
            )
            
            logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %s", e)
            return False
    
    def _setup_event_listeners(self, engine) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π SQLAlchemy"""
        
        @event.listens_for(engine, "connect")
        def on_connect(dbapi_connection, connection_record):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
            self.stats["total_connections"] += 1
            self.stats["active_connections"] += 1
            logger.debug("–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        
        @event.listens_for(engine, "checkout")
        def on_checkout(dbapi_connection, connection_record, connection_proxy):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
            logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∑—è—Ç–æ –∏–∑ –ø—É–ª–∞")
        
        @event.listens_for(engine, "checkin")
        def on_checkin(dbapi_connection, connection_record):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª"""
            logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –ø—É–ª")
        
        @event.listens_for(engine, "close")
        def on_close(dbapi_connection, connection_record):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
            self.stats["active_connections"] -= 1
            logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        @event.listens_for(engine, "before_cursor_execute")
        def on_before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞"""
            self.stats["total_queries"] += 1
            context._query_start_time = datetime.now()
        
        @event.listens_for(engine, "after_cursor_execute")
        def on_after_cursor_execute(conn, cursor, statement, parameters, context, executemany):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
            if hasattr(context, '_query_start_time'):
                from datetime import datetime
                execution_time = (datetime.now() - context._query_start_time).total_seconds()
                if execution_time > 1.0:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    logger.warning("–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (%.2fs): %s", execution_time, statement[:200])
    
    @contextmanager
    def get_session(self) -> Generator[Session, None, None]:
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        
        Yields:
            Session: –°–µ—Å—Å–∏—è SQLAlchemy
        """
        if not self.session_factory:
            raise RuntimeError("–ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        session = self.session_factory()
        try:
            yield session
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: %s", e)
            session.rollback()
            raise
        finally:
            session.close()
    
    @asynccontextmanager
    async def get_async_session(self) -> AsyncGenerator[AsyncSession, None]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        
        Yields:
            AsyncSession: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
        """
        if not self.async_session_factory:
            raise RuntimeError("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        session = self.async_session_factory()
        try:
            yield session
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î: %s", e)
            await session.rollback()
            raise
        finally:
            await session.close()
    
    @contextmanager
    def transaction(self) -> Generator[Session, None, None]:
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        Yields:
            Session: –°–µ—Å—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        """
        self.stats["total_transactions"] += 1
        
        with self.get_session() as session:
            try:
                session.begin()
                yield session
                session.commit()
                logger.debug("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                self.stats["failed_transactions"] += 1
                session.rollback()
                logger.error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: %s", e)
                raise
    
    @asynccontextmanager
    async def async_transaction(self) -> AsyncGenerator[AsyncSession, None]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        Yields:
            AsyncSession: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        """
        self.stats["total_transactions"] += 1
        
        async with self.get_async_session() as session:
            try:
                await session.begin()
                yield session
                await session.commit()
                logger.debug("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                self.stats["failed_transactions"] += 1
                await session.rollback()
                logger.error("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: %s", e)
                raise
    
    async def create_tables(self) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.async_engine:
            logger.error("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            async with self.async_engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
            return True
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: %s", e)
            return False
    
    async def drop_tables(self) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.async_engine:
            logger.error("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            async with self.async_engine.begin() as conn:
                await conn.run_sync(Base.metadata.drop_all)
            
            logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
            return True
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: %s", e)
            return False
    
    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç—Ä–∏–∫–∏ –ë–î
        """
        result = {
            "sync_engine": self.engine is not None,
            "async_engine": self.async_engine is not None,
            "stats": self.stats.copy()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if self.engine:
            try:
                with self.engine.connect() as conn:
                    conn.execute(text("SELECT 1"))
                result["sync_connection"] = True
            except Exception as e:
                result["sync_connection"] = False
                result["sync_error"] = str(e)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
        if self.engine and hasattr(self.engine.pool, 'size'):
            result["pool_info"] = {
                "size": self.engine.pool.size(),
                "checked_out": self.engine.pool.checkedout(),
                "overflow": self.engine.pool.overflow(),
                "checked_in": self.engine.pool.checkedin()
            }
        
        return result
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        
        if self.engine:
            self.engine.dispose()
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–∫—Ä—ã—Ç")
        
        if self.async_engine:
            await self.async_engine.dispose()
            logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–∫—Ä—ã—Ç")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
db_manager: Optional[DatabaseManager] = None


def init_database_manager(config: DatabaseConfig) -> DatabaseManager:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        DatabaseManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    """
    global db_manager
    
    db_manager = DatabaseManager(config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not db_manager.initialize_sync():
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not db_manager.initialize_async():
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
    
    return db_manager


def get_db() -> Generator[Session, None, None]:
    """
    Dependency –¥–ª—è FastAPI - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
    
    Yields:
        Session: –°–µ—Å—Å–∏—è SQLAlchemy
    """
    if not SessionLocal:
        raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    db = SessionLocal()
    try:
        yield db
    except SQLAlchemyError as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: %s", e)
        db.rollback()
        raise
    finally:
        db.close()


async def get_async_db() -> AsyncGenerator[AsyncSession, None]:
    """
    Dependency –¥–ª—è FastAPI - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î
    
    Yields:
        AsyncSession: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
    """
    if not db_manager or not db_manager.async_session_factory:
        raise RuntimeError("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async with db_manager.get_async_session() as session:
        try:
            yield session
        except SQLAlchemyError as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î: %s", e)
            await session.rollback()
            raise


@contextmanager
def transaction() -> Generator[Session, None, None]:
    """
    –£–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    Yields:
        Session: –°–µ—Å—Å–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    if not db_manager:
        raise RuntimeError("–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    with db_manager.transaction() as session:
        yield session


@asynccontextmanager
async def async_transaction() -> AsyncGenerator[AsyncSession, None]:
    """
    –£–¥–æ–±–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    Yields:
        AsyncSession: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    if not db_manager:
        raise RuntimeError("–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async with db_manager.async_transaction() as session:
        yield session


def execute_raw_sql(sql: str, params: Optional[Dict] = None) -> Any:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        sql: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if not db_manager:
        raise RuntimeError("–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    with db_manager.get_session() as session:
        result = session.execute(text(sql), params or {})
        return result.fetchall()


async def execute_raw_sql_async(sql: str, params: Optional[Dict] = None) -> Any:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        sql: SQL –∑–∞–ø—Ä–æ—Å
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if not db_manager:
        raise RuntimeError("–ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async with db_manager.get_async_session() as session:
        result = await session.execute(text(sql), params or {})
        return result.fetchall()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
class SessionContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏"""
    
    def __init__(self, session: Session):
        self.session = session
    
    def refresh_object(self, obj) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ë–î"""
        self.session.refresh(obj)
    
    def merge_object(self, obj):
        """–°–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π"""
        return self.session.merge(obj)
    
    def flush(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î"""
        self.session.flush()


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    "DatabaseManager",
    "SessionContext",
    
    # –§—É–Ω–∫—Ü–∏–∏
    "init_database_manager",
    "get_db",
    "get_async_db",
    "transaction",
    "async_transaction",
    "execute_raw_sql",
    "execute_raw_sql_async",
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    "db_manager"
]