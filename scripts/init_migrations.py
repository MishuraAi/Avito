#!/usr/bin/env python3
"""
üîÑ –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π Alembic –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Avito AI Bot

–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –†–ï–®–ï–ù–ò–ï —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
1. ‚úÖ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (Windows/Linux/macOS)
2. ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SQLite –∏ PostgreSQL 
3. ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤—ã–∑–æ–≤—É Alembic
4. ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
5. ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: scripts/init_migrations.py
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
from typing import Optional, Dict, Any
import platform

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from src.core.config import get_settings
    from src.database.models import Base
    from sqlalchemy import create_engine, text, inspect
    from sqlalchemy.exc import OperationalError
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("   pip install -r requirements-dev.txt")
    sys.exit(1)


class CrossPlatformMigrationInitializer:
    """
    üåç –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Windows/Linux/macOS
    - SQLite/PostgreSQL
    - –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python/Alembic
    """
    
    def __init__(self):
        self.project_root = project_root
        self.migrations_dir = self.project_root / "migrations"
        self.alembic_ini = self.project_root / "alembic.ini"
        self.platform = platform.system()
        self.settings = None
        self.db_type = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.execution_stats = {
            "platform": self.platform,
            "python_version": platform.python_version(),
            "steps_completed": 0,
            "total_steps": 8,
            "warnings": [],
            "errors": []
        }
        
    def log_step(self, step_name: str, success: bool = True, warning: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if success:
            self.execution_stats["steps_completed"] += 1
            print(f"‚úÖ {step_name}")
        else:
            self.execution_stats["errors"].append(step_name)
            print(f"‚ùå {step_name}")
            
        if warning:
            self.execution_stats["warnings"].append(warning)
            print(f"‚ö†Ô∏è {warning}")
    
    def check_alembic_availability(self) -> Dict[str, Any]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Alembic
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Alembic...")
        
        result = {
            "direct_command": False,
            "python_module": False,
            "version": None,
            "recommended_method": None,
            "installation_path": None
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é –∫–æ–º–∞–Ω–¥—É alembic
        try:
            proc = subprocess.run(
                ["alembic", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if proc.returncode == 0:
                result["direct_command"] = True
                result["version"] = proc.stdout.strip()
                result["recommended_method"] = "alembic"
                print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ 'alembic' –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é")
        except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
            print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ 'alembic' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ python -m alembic
        try:
            proc = subprocess.run(
                [sys.executable, "-m", "alembic", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if proc.returncode == 0:
                result["python_module"] = True
                if not result["version"]:
                    result["version"] = proc.stdout.strip()
                if not result["recommended_method"]:
                    result["recommended_method"] = "python -m alembic"
                print("‚úÖ Alembic –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 'python -m alembic'")
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
            print("‚ùå Alembic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 'python -m alembic'")
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if not result["direct_command"] and not result["python_module"]:
            print("‚ùå Alembic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install alembic")
            return result
        
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º python -m alembic –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
        if result["python_module"]:
            result["recommended_method"] = "python -m alembic"
            print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥: {result['recommended_method']}")
        
        return result
    
    def get_alembic_command(self) -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Alembic
        
        Returns:
            list: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è subprocess
        """
        alembic_check = self.check_alembic_availability()
        
        if not alembic_check["python_module"] and not alembic_check["direct_command"]:
            raise RuntimeError("Alembic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º python -m alembic –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if alembic_check["python_module"]:
            return [sys.executable, "-m", "alembic"]
        else:
            return ["alembic"]
    
    def load_and_analyze_settings(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞...")
            
            self.settings = get_settings()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_url = self.settings.database_url.lower()
            if "sqlite" in db_url:
                self.db_type = "sqlite"
                print(f"üóÑÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SQLite –±–∞–∑–∞: {self.settings.database_url}")
            elif "postgresql" in db_url:
                self.db_type = "postgresql"
                print(f"üêò –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ PostgreSQL –±–∞–∑–∞: {self._mask_password(self.settings.database_url)}")
            else:
                self.db_type = "unknown"
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ë–î: {self._mask_password(self.settings.database_url)}")
            
            self.log_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return False
    
    def _mask_password(self, url: str) -> str:
        """–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å –≤ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        if "://" in url and "@" in url:
            parts = url.split("://")
            if len(parts) == 2:
                protocol = parts[0]
                rest = parts[1]
                if "@" in rest:
                    auth_part, host_part = rest.split("@", 1)
                    if ":" in auth_part:
                        user, _ = auth_part.split(":", 1)
                        return f"{protocol}://{user}:***@{host_part}"
        return url
    
    def test_database_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            engine = create_engine(self.settings.database_url)
            
            with engine.connect() as conn:
                if self.db_type == "sqlite":
                    result = conn.execute(text("SELECT sqlite_version()"))
                    version = result.fetchone()[0]
                    print(f"‚úÖ SQLite –≤–µ—Ä—Å–∏—è: {version}")
                    
                    # –î–ª—è SQLite –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ë–î –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
                    if ":///" in self.settings.database_url:
                        db_path = self.settings.database_url.split("///")[1]
                        if db_path != ":memory:":
                            db_file = Path(db_path)
                            db_dir = db_file.parent
                            if not db_dir.exists():
                                db_dir.mkdir(parents=True, exist_ok=True)
                                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î: {db_dir}")
                            
                elif self.db_type == "postgresql":
                    result = conn.execute(text("SELECT version()"))
                    version = result.fetchone()[0]
                    print(f"‚úÖ PostgreSQL: {version[:50]}...")
                else:
                    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    conn.execute(text("SELECT 1"))
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            
            self.log_step("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ", True)
            return True
            
        except OperationalError as e:
            self.log_step("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            
            if self.db_type == "sqlite":
                print("\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è SQLite:")
                print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∏—Å–∫ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")
                print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î –≤ .env")
            elif self.db_type == "postgresql":
                print("\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è PostgreSQL:")
                print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL —Å–µ—Ä–≤–µ—Ä")
                print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env")
                print("   3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: python scripts/setup_database.py")
            
            return False
        except Exception as e:
            self.log_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def clean_existing_migrations(self) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ–ø–æ–ª–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        """
        try:
            print("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            if not self.migrations_dir.exists():
                print("‚ÑπÔ∏è –ü–∞–ø–∫–∞ migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.log_step("–û—á–∏—Å—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", True)
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∏–≥—Ä–∞—Ü–∏–π
            required_files = ["env.py", "script.py.mako"]
            missing_files = []
            
            for file_name in required_files:
                if not (self.migrations_dir / file_name).exists():
                    missing_files.append(file_name)
            
            if missing_files:
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π")
                print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_files)}")
                
                response = input("‚ùì –£–¥–∞–ª–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ").lower().strip()
                if response == 'y':
                    shutil.rmtree(self.migrations_dir)
                    print("üóëÔ∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞")
                    self.log_step("–ù–µ–ø–æ–ª–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã", True)
                    return True
                else:
                    print("‚ö†Ô∏è –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    self.log_step("–û—á–∏—Å—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–∞", True, "–ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç")
                    return True
            else:
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–µ—Ä—Å–∏–π
                versions_dir = self.migrations_dir / "versions"
                if versions_dir.exists() and any(versions_dir.iterdir()):
                    version_files = list(versions_dir.glob("*.py"))
                    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(version_files)} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π")
                    
                    response = input("‚ùì –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º? (y/n): ").lower().strip()
                    if response != 'y':
                        print("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
                        return False
                
                self.log_step("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", True)
                return True
                
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def initialize_alembic(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic —Å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic...")
            
            if self.migrations_dir.exists() and (self.migrations_dir / "env.py").exists():
                print("‚ÑπÔ∏è Alembic —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.log_step("Alembic —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", True)
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Alembic
            alembic_cmd = self.get_alembic_command()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            init_cmd = alembic_cmd + ["init", "migrations"]
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(init_cmd)}")
            
            result = subprocess.run(
                init_cmd,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode != 0:
                self.log_step("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Alembic", False)
                print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}")
                print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
                print(f"   –í—ã–≤–æ–¥: {result.stdout}")
                return False
            
            print("‚úÖ Alembic —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.log_step("Alembic –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", True)
            return True
            
        except subprocess.TimeoutExpired:
            self.log_step("–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Alembic", False)
            print("   –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
            return False
        except Exception as e:
            self.log_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def configure_alembic_ini(self) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ alembic.ini —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ë–î
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ alembic.ini...")
            
            if not self.alembic_ini.exists():
                self.log_step("alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω", False)
                return False
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            content = self.alembic_ini.read_text(encoding='utf-8')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î
            if self.db_type == "sqlite":
                # –î–ª—è SQLite –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WAL —Ä–µ–∂–∏–º–∞
                additional_config = """
# SQLite specific settings
sqlalchemy.url = 
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_pre_ping = true

# SQLite performance settings
[sqlalchemy]
url = 
echo = false
poolclass = StaticPool
pool_pre_ping = true
connect_args = {"check_same_thread": false, "timeout": 30}
"""
            else:
                # –î–ª—è PostgreSQL —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                additional_config = """
# PostgreSQL specific settings
sqlalchemy.url = 
sqlalchemy.echo = false
sqlalchemy.pool_size = 5
sqlalchemy.max_overflow = 10
sqlalchemy.pool_timeout = 30
sqlalchemy.pool_recycle = 3600
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if "sqlalchemy.pool_pre_ping" not in content:
                content = content.replace(
                    "sqlalchemy.url = ",
                    "sqlalchemy.url = " + additional_config
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                self.alembic_ini.write_text(content, encoding='utf-8')
                print(f"‚úÖ alembic.ini –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {self.db_type}")
            else:
                print("‚ÑπÔ∏è alembic.ini —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            self.log_step("alembic.ini –Ω–∞—Å—Ç—Ä–æ–µ–Ω", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ alembic.ini", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def configure_env_py(self) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ migrations/env.py –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ migrations/env.py...")
            
            env_py_path = self.migrations_dir / "env.py"
            
            if not env_py_path.exists():
                self.log_step("env.py –Ω–µ –Ω–∞–π–¥–µ–Ω", False)
                return False
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π env.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            env_content = '''"""
üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Avito AI Responder - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- SQLite –∏ PostgreSQL
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –º–æ–¥–µ–ª–∏
try:
    from src.core.config import get_settings
    from src.database.models import Base
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ env.py: {e}")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic
config = context.config

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_metadata –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
target_metadata = Base.metadata

def get_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings = get_settings()
        return settings.database_url
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –ë–î: {e}")
        # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        return os.getenv("DATABASE_URL", "sqlite:///./avito_ai.db")

def run_migrations_offline():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ 'offline' —Ä–µ–∂–∏–º–µ"""
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
        render_as_batch=True,  # –í–∞–∂–Ω–æ –¥–ª—è SQLite
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ 'online' —Ä–µ–∂–∏–º–µ"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_url()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ë–î
    url = get_url()
    connect_args = {}
    
    if "sqlite" in url.lower():
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SQLite
        connect_args = {
            "check_same_thread": False,
            "timeout": 30
        }
        poolclass = pool.StaticPool
    else:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PostgreSQL
        poolclass = pool.NullPool
    
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=poolclass,
        connect_args=connect_args
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            render_as_batch=True,  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SQLite
        )

        with context.begin_transaction():
            context.run_migrations()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
'''
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π env.py
            env_py_path.write_text(env_content, encoding='utf-8')
            
            print("‚úÖ migrations/env.py –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
            self.log_step("env.py –Ω–∞—Å—Ç—Ä–æ–µ–Ω", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ env.py", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def create_initial_migration(self) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞
        """
        try:
            print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            versions_dir = self.migrations_dir / "versions"
            if versions_dir.exists() and any(versions_dir.glob("*.py")):
                existing_migrations = list(versions_dir.glob("*.py"))
                print(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(existing_migrations)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π")
                
                response = input("‚ùì –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é? (y/n): ").lower().strip()
                if response != 'y':
                    print("‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    self.log_step("–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ", True)
                    return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Alembic
            alembic_cmd = self.get_alembic_command()
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            revision_cmd = alembic_cmd + [
                "revision", 
                "--autogenerate", 
                "-m", 
                "Initial migration - create all tables"
            ]
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(revision_cmd)}")
            
            result = subprocess.run(
                revision_cmd,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode != 0:
                self.log_step("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏", False)
                print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}")
                print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
                print(f"   –í—ã–≤–æ–¥: {result.stdout}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if "No changes in schema detected" in result.stdout:
                    print("‚ÑπÔ∏è –í —Å—Ö–µ–º–µ –ë–î –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                    self.log_step("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", True, "–°—Ö–µ–º–∞ –ë–î –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
                    return True
                
                return False
            
            print("‚úÖ –ü–µ—Ä–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(f"üìã –î–µ—Ç–∞–ª–∏: {result.stdout.strip()}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            versions_dir = self.migrations_dir / "versions"
            if versions_dir.exists():
                migration_files = list(versions_dir.glob("*.py"))
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migration_files)}")
                for mf in migration_files[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    print(f"   - {mf.name}")
            
            self.log_step("–ü–µ—Ä–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞", True)
            return True
            
        except subprocess.TimeoutExpired:
            self.log_step("–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏", False)
            print("   –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
            return False
        except Exception as e:
            self.log_step("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def verify_migration_status(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            alembic_cmd = self.get_alembic_command()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
            current_cmd = alembic_cmd + ["current"]
            
            result = subprocess.run(
                current_cmd,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                if result.stdout.strip():
                    print(f"üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stdout.strip()}")
                else:
                    print("üìç –ú–∏–≥—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –ë–î")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
            history_cmd = alembic_cmd + ["history"]
            
            result = subprocess.run(
                history_cmd,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0 and result.stdout.strip():
                print("üìö –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                lines = result.stdout.strip().split('\n')
                for line in lines[-5:]:
                    if line.strip():
                        print(f"   {line}")
            
            self.log_step("–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            return True
    
    def run_comprehensive_initialization(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è Avito AI Bot")
        print("=" * 60)
        print(f"üåç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.platform}")
        print(f"üêç Python: {platform.python_version()}")
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {self.project_root}")
        print("=" * 60)
        
        # –®–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        steps = [
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞", self.load_and_analyze_settings),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", self.test_database_connection),
            ("–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π", self.clean_existing_migrations),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic", self.initialize_alembic),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ alembic.ini", self.configure_alembic_ini),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ env.py", self.configure_env_py),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏", self.create_initial_migration),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π", self.verify_migration_status),
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                if not step_func():
                    print(f"\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —à–∞–≥–µ: {step_name}")
                    self._print_execution_summary(False)
                    return False
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ '{step_name}': {e}")
                self._print_execution_summary(False)
                return False
        
        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self._print_execution_summary(True)
        return True
    
    def _print_execution_summary(self, success: bool):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        
        if success:
            print("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ùå –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   ‚úÖ –®–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.execution_stats['steps_completed']}/{self.execution_stats['total_steps']}")
        print(f"   üåç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.execution_stats['platform']}")
        print(f"   üêç Python: {self.execution_stats['python_version']}")
        print(f"   üóÑÔ∏è –¢–∏–ø –ë–î: {self.db_type or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
        
        if self.execution_stats['warnings']:
            print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.execution_stats['warnings'])}")
            for warning in self.execution_stats['warnings']:
                print(f"      - {warning}")
        
        if self.execution_stats['errors']:
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(self.execution_stats['errors'])}")
            for error in self.execution_stats['errors']:
                print(f"      - {error}")
        
        if success:
            print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            alembic_cmd = "python -m alembic" if self.platform == "Windows" else "alembic"
            
            print(f"1. –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–π: {alembic_cmd} history")
            print(f"2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π: {alembic_cmd} upgrade head")
            print(f"3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {alembic_cmd} current")
            print(f"4. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: uvicorn src.api.main:app --reload")
            
            print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            print(f"   - {self.migrations_dir}/env.py")
            print(f"   - {self.migrations_dir}/script.py.mako")
            print(f"   - {self.migrations_dir}/versions/*.py")
            print(f"   - {self.alembic_ini}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        initializer = CrossPlatformMigrationInitializer()
        success = initializer.run_comprehensive_initialization()
        
        if success:
            print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()