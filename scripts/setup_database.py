#!/usr/bin/env python3
"""
üõ†Ô∏è –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL
2. –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
3. –í—ã–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import subprocess
import getpass
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    import psycopg2
    from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psycopg2-binary")
    sys.exit(1)


class DatabaseSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    def __init__(self):
        self.admin_user = "postgres"
        self.admin_password = None
        self.admin_host = "localhost"
        self.admin_port = "5432"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        self.project_user = "avito_user"
        self.project_password = "avito_password"
        self.project_db = "avito_ai_db"
        self.test_db = "avito_ai_test_db"
    
    def get_admin_credentials(self):
        """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL"""
        print("üîê –í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PostgreSQL")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.admin_user}): ", end="")
        
        user_input = input().strip()
        if user_input:
            self.admin_user = user_input
        
        print(f"üåê –•–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.admin_host}): ", end="")
        host_input = input().strip()
        if host_input:
            self.admin_host = host_input
        
        print(f"üîå –ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.admin_port}): ", end="")
        port_input = input().strip()
        if port_input:
            self.admin_port = port_input
        
        self.admin_password = getpass.getpass(f"üîë –ü–∞—Ä–æ–ª—å –¥–ª—è {self.admin_user}: ")
        
        if not self.admin_password:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
        
        return True
    
    def test_admin_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.admin_user,
                password=self.admin_password,
                database="postgres"  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
            )
            
            with conn.cursor() as cursor:
                cursor.execute("SELECT version()")
                version = cursor.fetchone()[0]
            
            conn.close()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –í–µ—Ä—Å–∏—è: {version}")
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def user_exists(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.admin_user,
                password=self.admin_password,
                database="postgres"
            )
            
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM pg_roles WHERE rolname = %s",
                    (username,)
                )
                exists = cursor.fetchone() is not None
            
            conn.close()
            return exists
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def database_exists(self, dbname: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.admin_user,
                password=self.admin_password,
                database="postgres"
            )
            
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM pg_database WHERE datname = %s",
                    (dbname,)
                )
                exists = cursor.fetchone() is not None
            
            conn.close()
            return exists
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_user(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            if self.user_exists(self.project_user):
                print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{self.project_user}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.admin_user,
                password=self.admin_password,
                database="postgres"
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            
            with conn.cursor() as cursor:
                cursor.execute(f"""
                    CREATE USER {self.project_user} 
                    WITH PASSWORD '{self.project_password}'
                    CREATEDB
                """)
            
            conn.close()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{self.project_user}' —Å–æ–∑–¥–∞–Ω")
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def create_database(self, dbname: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.database_exists(dbname):
                print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{dbname}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.admin_user,
                password=self.admin_password,
                database="postgres"
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            
            with conn.cursor() as cursor:
                cursor.execute(f"""
                    CREATE DATABASE {dbname}
                    OWNER {self.project_user}
                    ENCODING 'UTF8'
                    LC_COLLATE = 'en_US.UTF-8'
                    LC_CTYPE = 'en_US.UTF-8'
                """)
            
            conn.close()
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{dbname}' —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{dbname}': {e}")
            return False
    
    def grant_privileges(self, dbname: str) -> bool:
        """–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.admin_user,
                password=self.admin_password,
                database="postgres"
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            
            with conn.cursor() as cursor:
                cursor.execute(f"""
                    GRANT ALL PRIVILEGES ON DATABASE {dbname} TO {self.project_user}
                """)
            
            conn.close()
            print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ '{dbname}' –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{self.project_user}'")
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤: {e}")
            return False
    
    def test_project_connection(self, dbname: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = psycopg2.connect(
                host=self.admin_host,
                port=self.admin_port,
                user=self.project_user,
                password=self.project_password,
                database=dbname
            )
            
            with conn.cursor() as cursor:
                cursor.execute("SELECT current_user, current_database()")
                user, db = cursor.fetchone()
            
            conn.close()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ '{db}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user}' —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def create_env_file(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            env_path = project_root / ".env"
            
            if env_path.exists():
                response = input("üìÑ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").lower().strip()
                if response != 'y':
                    print("‚ÑπÔ∏è –§–∞–π–ª .env –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
                    return True
            
            database_url = f"postgresql://{self.project_user}:{self.project_password}@{self.admin_host}:{self.admin_port}/{self.project_db}"
            test_database_url = f"postgresql://{self.project_user}:{self.project_password}@{self.admin_host}:{self.admin_port}/{self.test_db}"
            
            env_content = f"""# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Avito AI Bot
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω scripts/setup_database.py

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG=True
ENVIRONMENT=development
SECRET_KEY=change-this-secret-key-in-production
JWT_SECRET_KEY=change-this-jwt-secret-key-too
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL={database_url}
TEST_DATABASE_URL={test_database_url}

# Redis
REDIS_URL=redis://localhost:6379/0

# API –∫–ª—é—á–∏ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ü–û–õ–ù–ò–¢–ï!)
GEMINI_API_KEY=your-gemini-api-key-here
AVITO_CLIENT_ID=your-avito-client-id
AVITO_CLIENT_SECRET=your-avito-client-secret

# CORS
CORS_ORIGINS=http://localhost:3000,http://localhost:8000

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
LOG_FILE_PATH=data/logs/app.log

# Rate limiting
RATE_LIMIT_FREE_REQUESTS_PER_MINUTE=10
RATE_LIMIT_PREMIUM_REQUESTS_PER_MINUTE=100

# –°–µ—Ä–≤–µ—Ä
SERVER_PORT=8000
SERVER_HOST=0.0.0.0
"""
            
            with open(env_path, 'w', encoding='utf-8') as f:
                f.write(env_content)
            
            print(f"‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω: {env_path}")
            print("‚ö†Ô∏è –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def run_setup(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è Avito AI Bot")
        print("=" * 60)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.get_admin_credentials():
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
        if not self.test_admin_connection():
            return False
        
        # 3. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{self.project_user}'...")
        if not self.create_user():
            return False
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{self.project_db}'...")
        if not self.create_database(self.project_db):
            return False
        
        # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{self.test_db}'...")
        if not self.create_database(self.test_db):
            return False
        
        # 6. –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞
        print(f"\nüîÑ –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if not self.grant_privileges(self.project_db):
            return False
        if not self.grant_privileges(self.test_db):
            return False
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        if not self.test_project_connection(self.project_db):
            return False
        if not self.test_project_connection(self.test_db):
            return False
        
        # 8. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
        if not self.create_env_file():
            return False
        
        print("\n" + "=" * 60)
        print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.project_user}")
        print(f"   üóÑÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –ë–î: {self.project_db}")
        print(f"   üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î: {self.test_db}")
        print(f"   üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: .env")
        
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª (–¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏)")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: python scripts/check_database.py")
        print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: python scripts/init_migrations.py")
        print("4. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
        
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = DatabaseSetup()
        success = setup.run_setup()
        
        if success:
            print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()