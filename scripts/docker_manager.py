#!/usr/bin/env python3
"""
üê≥ –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –¥–ª—è Avito AI Responder
–§–∞–π–ª: scripts/docker_manager.py

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.
"""

import os
import sys
import subprocess
import argparse
import time
from pathlib import Path
from typing import List, Optional


class Colors:
    """üé® ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'


class DockerManager:
    """üê≥ –ú–µ–Ω–µ–¥–∂–µ—Ä Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.docker_dir = self.project_root / "docker"
        
    def print_banner(self):
        """üéØ –ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
        print(f"{Colors.CYAN}{Colors.BOLD}")
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                üê≥ AVITO AI RESPONDER                      ‚ïë")
        print("‚ïë                 Docker Manager v1.0                       ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print(f"{Colors.END}")

    def run_command(self, command: List[str], cwd: Optional[Path] = None) -> bool:
        """
        üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            cwd: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            cmd_str = " ".join(command)
            print(f"{Colors.BLUE}üîÑ –í—ã–ø–æ–ª–Ω—è—é: {cmd_str}{Colors.END}")
            
            result = subprocess.run(
                command,
                cwd=cwd or self.project_root,
                check=True,
                capture_output=False
            )
            
            print(f"{Colors.GREEN}‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ{Colors.END}")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}{Colors.END}")
            return False
        except FileNotFoundError:
            print(f"{Colors.RED}‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {command[0]}{Colors.END}")
            return False

    def check_docker(self) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker"""
        print(f"{Colors.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è—é Docker...{Colors.END}")
        
        if not self.run_command(["docker", "--version"]):
            print(f"{Colors.RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
            return False
            
        if not self.run_command(["docker-compose", "--version"]):
            print(f"{Colors.RED}‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}")
            return False
            
        print(f"{Colors.GREEN}‚úÖ Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ{Colors.END}")
        return True

    def build_image(self, tag: str = "latest") -> bool:
        """
        üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
        
        Args:
            tag: –¢–µ–≥ –¥–ª—è –æ–±—Ä–∞–∑–∞
        """
        print(f"{Colors.CYAN}üèóÔ∏è –°–æ–±–∏—Ä–∞—é Docker –æ–±—Ä–∞–∑...{Colors.END}")
        
        return self.run_command([
            "docker", "build",
            "-f", "docker/Dockerfile",
            "-t", f"avito-ai-responder:{tag}",
            "."
        ])

    def dev_up(self, services: Optional[List[str]] = None) -> bool:
        """
        üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            services: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (None = –≤—Å–µ)
        """
        print(f"{Colors.CYAN}üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...{Colors.END}")
        
        command = [
            "docker-compose",
            "-f", "docker/docker-compose.yml",
            "up", "-d"
        ]
        
        if services:
            command.extend(services)
            
        return self.run_command(command)

    def dev_down(self) -> bool:
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        print(f"{Colors.YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...{Colors.END}")
        
        return self.run_command([
            "docker-compose",
            "-f", "docker/docker-compose.yml",
            "down"
        ])

    def prod_deploy(self) -> bool:
        """üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
        print(f"{Colors.PURPLE}üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é –ø—Ä–æ–¥–∞–∫—à–µ–Ω...{Colors.END}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
        if not self.build_image("latest"):
            return False
            
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω
        return self.run_command([
            "docker-compose",
            "-f", "docker/docker-compose.prod.yml",
            "up", "-d"
        ])

    def prod_down(self) -> bool:
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
        print(f"{Colors.YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–¥–∞–∫—à–µ–Ω...{Colors.END}")
        
        return self.run_command([
            "docker-compose",
            "-f", "docker/docker-compose.prod.yml",
            "down"
        ])

    def logs(self, environment: str = "dev", service: Optional[str] = None, follow: bool = False) -> bool:
        """
        üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
        
        Args:
            environment: dev –∏–ª–∏ prod
            service: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ (None = –≤—Å–µ)
            follow: –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        compose_file = "docker-compose.yml" if environment == "dev" else "docker-compose.prod.yml"
        
        command = [
            "docker-compose",
            "-f", f"docker/{compose_file}",
            "logs"
        ]
        
        if follow:
            command.append("-f")
            
        if service:
            command.append(service)
            
        print(f"{Colors.BLUE}üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–≥–∏ ({environment})...{Colors.END}")
        return self.run_command(command)

    def status(self, environment: str = "dev") -> bool:
        """üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        compose_file = "docker-compose.yml" if environment == "dev" else "docker-compose.prod.yml"
        
        print(f"{Colors.BLUE}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ({environment}):${Colors.END}")
        return self.run_command([
            "docker-compose",
            "-f", f"docker/{compose_file}",
            "ps"
        ])

    def exec_shell(self, environment: str = "dev", service: str = "app") -> bool:
        """üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ shell –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        compose_file = "docker-compose.yml" if environment == "dev" else "docker-compose.prod.yml"
        
        print(f"{Colors.CYAN}üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {service} ({environment})...{Colors.END}")
        return self.run_command([
            "docker-compose",
            "-f", f"docker/{compose_file}",
            "exec", service, "/bin/bash"
        ])

    def clean(self) -> bool:
        """üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print(f"{Colors.YELLOW}üßπ –û—á–∏—â–∞—é –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã...{Colors.END}")
        
        commands = [
            ["docker", "container", "prune", "-f"],
            ["docker", "image", "prune", "-f"],
            ["docker", "volume", "prune", "-f"],
            ["docker", "network", "prune", "-f"]
        ]
        
        for command in commands:
            if not self.run_command(command):
                return False
                
        return True

    def setup_environment(self) -> bool:
        """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print(f"{Colors.CYAN}‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...{Colors.END}")
        
        env_example = self.project_root / ".env.example"
        env_file = self.project_root / ".env"
        
        if not env_file.exists() and env_example.exists():
            print(f"{Colors.YELLOW}üìã –ö–æ–ø–∏—Ä—É—é .env.example -> .env{Colors.END}")
            env_file.write_text(env_example.read_text())
            
        print(f"{Colors.GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã{Colors.END}")
        print(f"{Colors.YELLOW}‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª!{Colors.END}")
        return True

    def health_check(self, environment: str = "dev") -> bool:
        """üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print(f"{Colors.BLUE}üè• –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤ ({environment})...{Colors.END}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services = ["app", "postgres", "redis"]
        
        for service in services:
            print(f"{Colors.CYAN}üîç –ü—Ä–æ–≤–µ—Ä—è—é {service}...{Colors.END}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
            result = subprocess.run([
                "docker-compose",
                "-f", f"docker/docker-compose.yml" if environment == "dev" else "docker/docker-compose.prod.yml",
                "ps", "-q", service
            ], capture_output=True, text=True, cwd=self.project_root)
            
            if not result.stdout.strip():
                print(f"{Colors.RED}‚ùå {service} –Ω–µ –∑–∞–ø—É—â–µ–Ω{Colors.END}")
                return False
            else:
                print(f"{Colors.GREEN}‚úÖ {service} —Ä–∞–±–æ—Ç–∞–µ—Ç{Colors.END}")
                
        return True


def main():
    """üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="üê≥ Docker Manager –¥–ª—è Avito AI Responder",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ build
    subparsers.add_parser("build", help="üèóÔ∏è –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_parser = subparsers.add_parser("dev", help="üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    dev_subparsers = dev_parser.add_subparsers(dest="dev_action")
    dev_subparsers.add_parser("up", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    dev_subparsers.add_parser("down", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    dev_subparsers.add_parser("status", help="–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    dev_subparsers.add_parser("logs", help="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    prod_parser = subparsers.add_parser("prod", help="üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
    prod_subparsers = prod_parser.add_subparsers(dest="prod_action")
    prod_subparsers.add_parser("deploy", help="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω")
    prod_subparsers.add_parser("down", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω")
    prod_subparsers.add_parser("status", help="–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    prod_subparsers.add_parser("logs", help="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
    
    # –£—Ç–∏–ª–∏—Ç—ã
    subparsers.add_parser("clean", help="üßπ –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    subparsers.add_parser("setup", help="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    subparsers.add_parser("health", help="üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    args = parser.parse_args()
    
    manager = DockerManager()
    manager.print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if not manager.check_docker():
        sys.exit(1)
    
    success = True
    
    try:
        if args.command == "build":
            success = manager.build_image()
            
        elif args.command == "dev":
            if args.dev_action == "up":
                success = manager.dev_up()
            elif args.dev_action == "down":
                success = manager.dev_down()
            elif args.dev_action == "status":
                success = manager.status("dev")
            elif args.dev_action == "logs":
                success = manager.logs("dev", follow=True)
            else:
                print(f"{Colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è dev: {args.dev_action}{Colors.END}")
                success = False
                
        elif args.command == "prod":
            if args.prod_action == "deploy":
                success = manager.prod_deploy()
            elif args.prod_action == "down":
                success = manager.prod_down()
            elif args.prod_action == "status":
                success = manager.status("prod")
            elif args.prod_action == "logs":
                success = manager.logs("prod", follow=True)
            else:
                print(f"{Colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è prod: {args.prod_action}{Colors.END}")
                success = False
                
        elif args.command == "clean":
            success = manager.clean()
            
        elif args.command == "setup":
            success = manager.setup_environment()
            
        elif args.command == "health":
            success = manager.health_check()
            
        else:
            parser.print_help()
            success = False
            
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
        success = False
    except Exception as e:
        print(f"{Colors.RED}‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.END}")
        success = False
    
    if success:
        print(f"\n{Colors.GREEN}üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{Colors.END}")
        sys.exit(0)
    else:
        print(f"\n{Colors.RED}üí• –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π{Colors.END}")
        sys.exit(1)


if __name__ == "__main__":
    main()