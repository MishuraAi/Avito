#!/usr/bin/env python3
"""
üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Avito AI Bot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
import asyncio
import time
from pathlib import Path
from typing import Dict, List, Tuple, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from sqlalchemy import create_engine, text
    from alembic.config import Config
    from alembic import command
    from alembic.script import ScriptDirectory
    from alembic.runtime.environment import EnvironmentContext
    import requests
    import psutil
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements-dev.txt")
    sys.exit(1)


class CompleteSetupTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.project_root = project_root
        self.results: Dict[str, bool] = {}
        self.errors: List[str] = []
        
    def log_result(self, test_name: str, success: bool, error_msg: str = ""):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.results[test_name] = success
        if not success and error_msg:
            self.errors.append(f"{test_name}: {error_msg}")
    
    def run_command(self, command: List[str], cwd: Path = None) -> Tuple[bool, str, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        try:
            result = subprocess.run(
                command,
                cwd=cwd or self.project_root,
                capture_output=True,
                text=True,
                timeout=60
            )
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return False, "", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        except Exception as e:
            return False, "", str(e)
    
    def test_environment_setup(self) -> bool:
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîÑ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
            python_version = sys.version_info
            if python_version < (3, 11):
                self.log_result("Python –≤–µ—Ä—Å–∏—è", False, f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+, –Ω–∞–π–¥–µ–Ω–æ {python_version}")
                return False
            
            print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            env_path = self.project_root / ".env"
            if not env_path.exists():
                self.log_result(".env —Ñ–∞–π–ª", False, "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                import fastapi
                import sqlalchemy
                import alembic
                print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except ImportError as e:
                self.log_result("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
                return False
            
            self.log_result("–û–∫—Ä—É–∂–µ–Ω–∏–µ", True)
            return True
            
        except Exception as e:
            self.log_result("–û–∫—Ä—É–∂–µ–Ω–∏–µ", False, str(e))
            return False
    
    def test_database_connection(self) -> bool:
        """–¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        success, stdout, stderr = self.run_command([
            sys.executable, "scripts/check_database.py"
        ])
        
        if success:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            self.log_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", True)
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {stderr}")
            self.log_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", False, stderr)
            return False
    
    def test_migrations_initialization(self) -> bool:
        """–¢–µ—Å—Ç 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        print("üîÑ –¢–µ—Å—Ç 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ migrations
            migrations_dir = self.project_root / "migrations"
            if not migrations_dir.exists():
                print("üìÅ –ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
                
                success, stdout, stderr = self.run_command([
                    sys.executable, "scripts/init_migrations.py"
                ])
                
                if not success:
                    self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π", False, stderr)
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∏–≥—Ä–∞—Ü–∏–π
            required_files = ["env.py", "script.py.mako", "versions"]
            for req_file in required_files:
                file_path = migrations_dir / req_file
                if not file_path.exists():
                    self.log_result("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {req_file}")
                    return False
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π", True)
            return True
            
        except Exception as e:
            self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π", False, str(e))
            return False
    
    def test_migration_creation(self) -> bool:
        """–¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîÑ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Alembic
            alembic_cfg = Config(str(self.project_root / "alembic.ini"))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
            script_dir = ScriptDirectory.from_config(alembic_cfg)
            revisions = list(script_dir.walk_revisions())
            
            if not revisions:
                print("üìù –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é...")
                
                success, stdout, stderr = self.run_command([
                    "alembic", "revision", "--autogenerate", 
                    "-m", "Initial migration - test"
                ])
                
                if not success:
                    self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏", False, stderr)
                    return False
                
                print("‚úÖ –ü–µ—Ä–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(revisions)}")
            
            self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏", True)
            return True
            
        except Exception as e:
            self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏", False, str(e))
            return False
    
    def test_migration_application(self) -> bool:
        """–¢–µ—Å—Ç 5: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
        print("üîÑ –¢–µ—Å—Ç 5: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            success, stdout, stderr = self.run_command([
                "alembic", "upgrade", "head"
            ])
            
            if not success:
                self.log_result("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", False, stderr)
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
            success, stdout, stderr = self.run_command([
                "alembic", "current"
            ])
            
            if success and stdout.strip():
                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {stdout.strip()}")
                self.log_result("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", True)
                return True
            else:
                self.log_result("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", False, "–í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                return False
            
        except Exception as e:
            self.log_result("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", False, str(e))
            return False
    
    def test_database_tables(self) -> bool:
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        print("üîÑ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        
        try:
            from src.core.config import get_settings
            settings = get_settings()
            engine = create_engine(settings.database_url)
            
            expected_tables = [
                'users', 'sellers', 'user_profiles', 'seller_settings',
                'messages', 'conversations', 'message_templates',
                'alembic_version'
            ]
            
            with engine.connect() as conn:
                result = conn.execute(text("""
                    SELECT table_name FROM information_schema.tables 
                    WHERE table_schema = 'public'
                """))
                existing_tables = [row[0] for row in result.fetchall()]
            
            missing_tables = set(expected_tables) - set(existing_tables)
            
            if missing_tables:
                self.log_result("–¢–∞–±–ª–∏—Ü—ã –ë–î", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                return False
            
            print(f"‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã: {len(existing_tables)} —Ç–∞–±–ª–∏—Ü")
            self.log_result("–¢–∞–±–ª–∏—Ü—ã –ë–î", True)
            return True
            
        except Exception as e:
            self.log_result("–¢–∞–±–ª–∏—Ü—ã –ë–î", False, str(e))
            return False
    
    def test_fastapi_import(self) -> bool:
        """–¢–µ—Å—Ç 7: –ò–º–ø–æ—Ä—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üîÑ –¢–µ—Å—Ç 7: –ò–º–ø–æ—Ä—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            from src.api.main import app
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ—É—Ç–æ–≤
            routes_count = len(app.routes)
            if routes_count == 0:
                self.log_result("FastAPI –∏–º–ø–æ—Ä—Ç", False, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤")
                return False
            
            print(f"‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–æ—É—Ç–æ–≤: {routes_count}")
            self.log_result("FastAPI –∏–º–ø–æ—Ä—Ç", True)
            return True
            
        except Exception as e:
            self.log_result("FastAPI –∏–º–ø–æ—Ä—Ç", False, str(e))
            return False
    
    def test_api_server_start(self) -> bool:
        """–¢–µ—Å—Ç 8: –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîÑ –¢–µ—Å—Ç 8: –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            server_process = subprocess.Popen([
                sys.executable, "-m", "uvicorn",
                "src.api.main:app",
                "--host", "127.0.0.1",
                "--port", "8001",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                "--log-level", "error"
            ], cwd=self.project_root)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            time.sleep(5)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
                response = requests.get("http://127.0.0.1:8001/health", timeout=10)
                
                if response.status_code == 200:
                    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    self.log_result("–ó–∞–ø—É—Å–∫ API", True)
                    result = True
                else:
                    print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                    self.log_result("–ó–∞–ø—É—Å–∫ API", False, f"HTTP {response.status_code}")
                    result = False
                    
            except requests.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
                self.log_result("–ó–∞–ø—É—Å–∫ API", False, str(e))
                result = False
            
            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                server_process.terminate()
                server_process.wait(timeout=10)
            
            return result
            
        except Exception as e:
            self.log_result("–ó–∞–ø—É—Å–∫ API", False, str(e))
            return False
    
    def test_core_components(self) -> bool:
        """–¢–µ—Å—Ç 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üîÑ –¢–µ—Å—Ç 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
            modules_to_test = [
                "src.core.config",
                "src.core.ai_consultant",
                "src.integrations.avito.api_client",
                "src.integrations.gemini.client",
                "src.database.models",
                "src.services.auth_service",
                "src.services.user_service",
            ]
            
            failed_imports = []
            for module in modules_to_test:
                try:
                    __import__(module)
                except ImportError as e:
                    failed_imports.append(f"{module}: {e}")
            
            if failed_imports:
                self.log_result("–ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", False, "; ".join(failed_imports))
                return False
            
            print(f"‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è: {len(modules_to_test)} –º–æ–¥—É–ª–µ–π")
            self.log_result("–ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", True)
            return True
            
        except Exception as e:
            self.log_result("–ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", False, str(e))
            return False
    
    def run_complete_test(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò AVITO AI BOT")
        print("=" * 60)
        
        tests = [
            ("–û–∫—Ä—É–∂–µ–Ω–∏–µ", self.test_environment_setup),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_database_connection),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π", self.test_migrations_initialization),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏", self.test_migration_creation),
            ("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", self.test_migration_application),
            ("–¢–∞–±–ª–∏—Ü—ã –ë–î", self.test_database_tables),
            ("FastAPI –∏–º–ø–æ—Ä—Ç", self.test_fastapi_import),
            ("–ó–∞–ø—É—Å–∫ API", self.test_api_server_start),
            ("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", self.test_core_components),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            print(f"\nüìã {test_name}...")
            try:
                success = test_func()
                if success:
                    passed += 1
                    print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
            except Exception as e:
                print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
                self.log_result(test_name, False, str(e))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        for test_name, _ in tests:
            if test_name in self.results:
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if self.results[test_name] else "‚ùå –ü–†–û–í–ê–õ"
                print(f"   {test_name}: {status}")
        
        print(f"\nüéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   - {error}")
            if len(self.errors) > 5:
                print(f"   ... –∏ –µ—â–µ {len(self.errors) - 5} –æ—à–∏–±–æ–∫")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn src.api.main:app --reload")
            print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")
            return True
        else:
            print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = CompleteSetupTester()
        success = tester.run_complete_test()
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()