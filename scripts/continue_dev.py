#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Docker

–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º README.md:
- –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞
- –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±—ã—Å—Ç—Ä–æ–º—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ Docker

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: scripts/continue_dev.py
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class LocalDevelopmentManager:
    """
    üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
    - –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ Docker
    - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±—É–¥—É—â–µ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
    - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–∞
    """
    
    def __init__(self):
        self.project_root = project_root
        self.development_ready = False
        
    def check_local_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
            python_version = sys.version_info
            if python_version >= (3, 8):
                print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
            else:
                print(f"‚ö†Ô∏è Python {python_version.major}.{python_version.minor} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.11+)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                import fastapi
                import uvicorn
                import sqlalchemy
                import alembic
                print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except ImportError as e:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements-dev.txt")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
            env_file = self.project_root / ".env"
            if env_file.exists():
                print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π")
                self.create_basic_env()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
            required_dirs = ["src", "scripts", "migrations"]
            missing_dirs = []
            for dir_name in required_dirs:
                if not (self.project_root / dir_name).exists():
                    missing_dirs.append(dir_name)
            
            if missing_dirs:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
                return False
            else:
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–µ–¥—ã: {e}")
            return False
    
    def create_basic_env(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞"""
        env_content = """# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Avito AI Bot

DEBUG=true
ENVIRONMENT=development
SECRET_KEY=local-dev-secret-key
JWT_SECRET_KEY=local-dev-jwt-secret
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# SQLite –±–∞–∑–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DATABASE_URL=sqlite:///./avito_ai.db
TEST_DATABASE_URL=sqlite:///./avito_ai_test.db

# Redis (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
REDIS_URL=redis://localhost:6379/0

# API –∫–ª—é—á–∏ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï!)
GEMINI_API_KEY=your-real-gemini-api-key-here
AVITO_CLIENT_ID=your-real-avito-client-id-here
AVITO_CLIENT_SECRET=your-real-avito-client-secret-here

# CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000,http://127.0.0.1:8000

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=DEBUG
LOG_FILE_PATH=data/logs/app.log

# –°–µ—Ä–≤–µ—Ä
SERVER_HOST=0.0.0.0
SERVER_PORT=8000
"""
        
        env_file = self.project_root / ".env"
        env_file.write_text(env_content, encoding='utf-8')
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    
    def check_database_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            check_db_script = self.project_root / "scripts" / "check_database.py"
            if check_db_script.exists():
                result = subprocess.run(
                    [sys.executable, str(check_db_script)],
                    cwd=self.project_root,
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
                    return True
                else:
                    print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
                    print("üîß –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å...")
                    return self.fix_database()
            else:
                print("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç check_database.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    def fix_database(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            final_fix_script = self.project_root / "scripts" / "final_fix.py"
            if final_fix_script.exists():
                print("üöÄ –ó–∞–ø—É—Å–∫ final_fix.py...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
                env = os.environ.copy()
                env["PYTHONIOENCODING"] = "utf-8"
                
                result = subprocess.run(
                    [sys.executable, str(final_fix_script)],
                    cwd=self.project_root,
                    env=env,
                    input="y\n",  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º "–¥–∞" –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                    text=True,
                    timeout=60
                )
                
                if result.returncode == 0:
                    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    return True
                else:
                    print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            else:
                print("‚ö†Ô∏è final_fix.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return self.manual_db_fix()
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î: {e}")
            return self.manual_db_fix()
    
    def manual_db_fix(self) -> bool:
        """–†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üîß –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic
            result = subprocess.run(
                [sys.executable, "-m", "alembic", "current"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            if result.returncode != 0:
                print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∏–≥—Ä–∞—Ü–∏—é
                subprocess.run(
                    [sys.executable, "-m", "alembic", "revision", "-m", "initial"],
                    cwd=self.project_root,
                    capture_output=True,
                    text=True
                )
            
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: {e}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    def start_development_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            print("\nüöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –†–ê–ó–†–ê–ë–û–¢–ö–ò")
            print("=" * 50)
            
            print("üìç –°–µ—Ä–≤–µ—Ä: http://localhost:8000")
            print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
            print("üîç Health check: http://localhost:8000/health")
            print("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: http://localhost:8000/info")
            print("\n‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            def open_browser():
                time.sleep(3)
                try:
                    webbrowser.open("http://localhost:8000/docs")
                    print("\nüåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —Å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π")
                except:
                    pass
            
            import threading
            browser_thread = threading.Thread(target=open_browser)
            browser_thread.daemon = True
            browser_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            result = subprocess.run([
                sys.executable, "-m", "uvicorn", 
                "src.api.main:app", 
                "--reload", 
                "--host", "0.0.0.0", 
                "--port", "8000",
                "--log-level", "info"
            ], cwd=self.project_root)
            
            return True
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:")
            print("   python -m uvicorn src.api.main:app --reload")
            return False
    
    def show_development_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        print("\nüìä –°–¢–ê–¢–£–° –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò")
        print("=" * 50)
        
        print("‚úÖ –ì–û–¢–û–í–û:")
        print("   üêç Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
        print("   üîß –ú–∏–≥—Ä–∞—Ü–∏–∏ Alembic")
        print("   üåê FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("   üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        
        print("\n‚è≥ –û–¢–õ–û–ñ–ï–ù–û (–¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker):")
        print("   üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è")
        print("   üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –¥–µ–ø–ª–æ–π")
        print("   üîÑ CI/CD –ø–∞–π–ø–ª–∞–π–Ω")
        
        print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("   üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        print("   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
        print("   üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        print("\nüîó –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:")
        print("   üåê API: http://localhost:8000/docs")
        print("   ‚ù§Ô∏è Health: http://localhost:8000/health")
        print("   ‚ÑπÔ∏è Info: http://localhost:8000/info")
    
    def run_local_development(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        print("üöÄ –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê AVITO AI BOT")
        print("–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏")
        print("=" * 55)
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã", self.check_local_environment),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.check_database_status),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            if not step_func():
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {step_name}")
                return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.show_development_status()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å–∫
        response = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏? (y/n): ").lower().strip()
        if response == 'y':
            return self.start_development_server()
        else:
            print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("   python -m uvicorn src.api.main:app --reload")
            return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        manager = LocalDevelopmentManager()
        success = manager.run_local_development()
        
        if success:
            print("\n‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞!")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()