#!/usr/bin/env python3
"""
üê≥ –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Avito AI Bot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker –∏ Docker Compose
2. –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
5. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
"""

import os
import sys
import subprocess
import secrets
import string
from pathlib import Path
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class DockerSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.project_root = project_root
        self.docker_dir = self.project_root / "docker"
        self.secrets_dir = self.project_root / "secrets"
        self.execution_stats = {
            "steps_completed": 0,
            "total_steps": 8,
            "warnings": [],
            "errors": []
        }
    
    def log_step(self, step_name: str, success: bool = True, warning: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if success:
            self.execution_stats["steps_completed"] += 1
            print(f"‚úÖ {step_name}")
        else:
            self.execution_stats["errors"].append(step_name)
            print(f"‚ùå {step_name}")
            
        if warning:
            self.execution_stats["warnings"].append(warning)
            print(f"‚ö†Ô∏è {warning}")
    
    def check_docker_installation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∏ Docker Compose"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
            result = subprocess.run(
                ["docker", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode != 0:
                print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/")
                return False
            
            docker_version = result.stdout.strip()
            print(f"‚úÖ {docker_version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                ["docker", "compose", "version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode != 0:
                # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é
                result = subprocess.run(
                    ["docker-compose", "--version"], 
                    capture_output=True, 
                    text=True, 
                    timeout=10
                )
                
                if result.returncode != 0:
                    print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/")
                    return False
                
                compose_version = result.stdout.strip()
                print(f"‚úÖ {compose_version} (legacy)")
                self.compose_command = ["docker-compose"]
            else:
                compose_version = result.stdout.strip()
                print(f"‚úÖ {compose_version}")
                self.compose_command = ["docker", "compose"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Docker daemon –∑–∞–ø—É—â–µ–Ω
            result = subprocess.run(
                ["docker", "info"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode != 0:
                print("‚ùå Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–ª–∏ Docker daemon")
                return False
            
            print("‚úÖ Docker daemon –∑–∞–ø—É—â–µ–Ω")
            self.log_step("Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç", True)
            return True
            
        except subprocess.TimeoutExpired:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker")
            return False
        except FileNotFoundError:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
            return False
    
    def create_directories(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        try:
            print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
            
            directories = [
                self.docker_dir,
                self.docker_dir / "nginx",
                self.docker_dir / "postgres",
                self.docker_dir / "redis", 
                self.docker_dir / "init-scripts",
                self.secrets_dir,
                self.project_root / "data" / "logs",
                self.project_root / "data" / "uploads",
                self.project_root / "data" / "cache"
            ]
            
            for directory in directories:
                directory.mkdir(parents=True, exist_ok=True)
                print(f"   üìÇ {directory.relative_to(self.project_root)}")
            
            self.log_step("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def generate_secrets(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        try:
            print("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π...")
            
            def generate_key(length=32) -> str:
                """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞"""
                alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
                return ''.join(secrets.choice(alphabet) for _ in range(length))
            
            secrets_config = {
                "secret_key.txt": generate_key(64),
                "jwt_secret_key.txt": generate_key(64),
                "postgres_password.txt": generate_key(32),
                "redis_password.txt": generate_key(32),
                "grafana_password.txt": generate_key(16),
                # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è API –∫–ª—é—á–µ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–ª–Ω–∏—Ç—å)
                "gemini_api_key.txt": "REPLACE_WITH_YOUR_REAL_GEMINI_API_KEY",
                "avito_client_id.txt": "REPLACE_WITH_YOUR_REAL_AVITO_CLIENT_ID", 
                "avito_client_secret.txt": "REPLACE_WITH_YOUR_REAL_AVITO_CLIENT_SECRET",
                "sentry_dsn.txt": "REPLACE_WITH_YOUR_SENTRY_DSN_OR_LEAVE_EMPTY"
            }
            
            created_files = []
            for filename, content in secrets_config.items():
                secret_file = self.secrets_dir / filename
                
                if not secret_file.exists():
                    secret_file.write_text(content, encoding='utf-8')
                    created_files.append(filename)
                    print(f"   üîë {filename}")
                else:
                    print(f"   ‚ÑπÔ∏è {filename} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            
            if created_files:
                print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫–∏ API –∫–ª—é—á–µ–π –≤ –ø–∞–ø–∫–µ secrets/")
                print("   üìù –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã:")
                print("      - gemini_api_key.txt")
                print("      - avito_client_id.txt") 
                print("      - avito_client_secret.txt")
            
            self.log_step("–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def create_env_file(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è Docker"""
        try:
            print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
            
            env_file = self.project_root / ".env"
            
            if env_file.exists():
                response = input("‚ùì –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").lower().strip()
                if response != 'y':
                    print("‚ÑπÔ∏è –§–∞–π–ª .env –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
                    self.log_step("–§–∞–π–ª .env –ø—Ä–æ–ø—É—â–µ–Ω", True)
                    return True
            
            # –ß–∏—Ç–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                postgres_password = (self.secrets_dir / "postgres_password.txt").read_text().strip()
                redis_password = (self.secrets_dir / "redis_password.txt").read_text().strip()
                secret_key = (self.secrets_dir / "secret_key.txt").read_text().strip()
                jwt_secret_key = (self.secrets_dir / "jwt_secret_key.txt").read_text().strip()
                grafana_password = (self.secrets_dir / "grafana_password.txt").read_text().strip()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤: {e}")
                postgres_password = "generate_new_password"
                redis_password = "generate_new_password"
                secret_key = "generate_new_secret"
                jwt_secret_key = "generate_new_jwt_secret"
                grafana_password = "admin123"
            
            env_content = f"""# üê≥ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Docker Compose
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω scripts/setup_docker.py

# ===== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =====
ENVIRONMENT=development
DEBUG=true

# ===== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====
SECRET_KEY={secret_key}
JWT_SECRET_KEY={jwt_secret_key}

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
POSTGRES_PASSWORD={postgres_password}

# ===== REDIS =====
REDIS_PASSWORD={redis_password}

# ===== API –ö–õ–Æ–ß–ò (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï!) =====
GEMINI_API_KEY=your-real-gemini-api-key-here
AVITO_CLIENT_ID=your-real-avito-client-id-here
AVITO_CLIENT_SECRET=your-real-avito-client-secret-here

# ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì =====
SENTRY_DSN=
GRAFANA_PASSWORD={grafana_password}

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =====
LOG_LEVEL=INFO
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
"""
            
            env_file.write_text(env_content, encoding='utf-8')
            
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
            print("‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!")
            
            self.log_step("–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def fix_alembic_ini(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å alembic.ini"""
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ alembic.ini...")
            
            alembic_ini = self.project_root / "alembic.ini"
            
            if not alembic_ini.exists():
                print("‚ö†Ô∏è alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                self.log_step("alembic.ini –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", True)
                return True
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = alembic_ini.read_text(encoding='utf-8')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if content.count('sqlalchemy.url') > 1:
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ sqlalchemy.url")
                
                # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                fixed_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic –¥–ª—è Avito AI Responder
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è Docker

[alembic]
script_location = migrations
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s
timezone = UTC
truncate_slug_length = 40

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ—Ä–µ—Ç—Å—è –∏–∑ env.py
# sqlalchemy.url = 

sqlalchemy.echo = false
sqlalchemy.pool_pre_ping = true
compare_type = true
compare_server_default = true
render_as_batch = true

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters] 
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
"""
                
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                backup_file = alembic_ini.with_suffix('.ini.backup')
                backup_file.write_text(content, encoding='utf-8')
                print(f"üìã –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file.name}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                alembic_ini.write_text(fixed_content, encoding='utf-8')
                print("‚úÖ alembic.ini –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                print("‚ÑπÔ∏è alembic.ini –≤ –ø–æ—Ä—è–¥–∫–µ")
            
            self.log_step("alembic.ini –ø—Ä–æ–≤–µ—Ä–µ–Ω/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è alembic.ini", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def create_nginx_config(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"""
        try:
            print("üåê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx...")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            dev_config = self.docker_dir / "nginx" / "dev.conf"
            dev_content = """# Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
server {
    listen 80;
    server_name localhost;
    
    client_max_body_size 10M;
    
    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    location / {
        proxy_pass http://app:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è hot reload
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Health check
    location /nginx-health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
}
"""
            
            dev_config.write_text(dev_content, encoding='utf-8')
            print("   üìÑ dev.conf —Å–æ–∑–¥–∞–Ω")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            prod_config = self.docker_dir / "nginx" / "prod.conf"
            prod_content = """# Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
upstream app_servers {
    server app:8000;
    # –î–ª—è load balancing –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
    # server app2:8000;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name yourdomain.com www.yourdomain.com;
    
    # SSL configuration
    ssl_certificate /etc/ssl/certs/fullchain.pem;
    ssl_certificate_key /etc/ssl/certs/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    
    client_max_body_size 10M;
    
    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    location / {
        proxy_pass http://app_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –±—É–¥—É—Ç)
    location /static/ {
        alias /app/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Health check
    location /nginx-health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
}
"""
            
            prod_config.write_text(prod_content, encoding='utf-8')
            print("   üìÑ prod.conf —Å–æ–∑–¥–∞–Ω")
            
            self.log_step("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å–æ–∑–¥–∞–Ω–∞", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def test_docker_setup(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker setup"""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
            compose_file = self.project_root / "docker-compose.yml"
            if not compose_file.exists():
                print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º docker-compose —Ñ–∞–π–ª
            result = subprocess.run(
                self.compose_command + ["config", "-f", str(compose_file)],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –≤ docker-compose.yml:")
                print(result.stderr)
                return False
            
            print("‚úÖ docker-compose.yml –≤–∞–ª–∏–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile
            dockerfile = self.project_root / "Dockerfile"
            if not dockerfile.exists():
                print("‚ö†Ô∏è Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print("‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω")
            
            self.log_step("Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞", True)
            return True
            
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def start_containers(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
            
            response = input("‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–µ–π—á–∞—Å? (y/n): ").lower().strip()
            if response != 'y':
                print("‚ÑπÔ∏è –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω")
                print("üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker compose up -d")
                self.log_step("–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω", True)
                return True
            
            print("üì¶ –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã...")
            result = subprocess.run(
                self.compose_command + ["build"],
                cwd=self.project_root,
                timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ —Å–±–æ—Ä–∫—É
            )
            
            if result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤")
                return False
            
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
            result = subprocess.run(
                self.compose_command + ["up", "-d"],
                cwd=self.project_root,
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–ø—É—Å–∫
            )
            
            if result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
                return False
            
            print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
            print("\nüìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("   üîç –°—Ç–∞—Ç—É—Å: docker compose ps")
            print("   üìú –õ–æ–≥–∏: docker compose logs -f")
            print("   üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker compose down")
            print("   üåê API: http://localhost:8000/docs")
            
            self.log_step("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã", True)
            return True
            
        except subprocess.TimeoutExpired:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return False
        except Exception as e:
            self.log_step("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", False)
            print(f"   –î–µ—Ç–∞–ª–∏: {e}")
            return False
    
    def run_comprehensive_setup(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker"""
        print("üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Avito AI Bot")
        print("=" * 60)
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker", self.check_docker_installation),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", self.create_directories),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π", self.generate_secrets),
            ("–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞", self.create_env_file),
            ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ alembic.ini", self.fix_alembic_ini),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx", self.create_nginx_config),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.test_docker_setup),
            ("–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", self.start_containers),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                if not step_func():
                    print(f"\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —à–∞–≥–µ: {step_name}")
                    self._print_summary(False)
                    return False
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ '{step_name}': {e}")
                self._print_summary(False)
                return False
        
        self._print_summary(True)
        return True
    
    def _print_summary(self, success: bool):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        
        if success:
            print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê DOCKER –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ùå –ù–ê–°–¢–†–û–ô–ö–ê DOCKER –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚úÖ –®–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.execution_stats['steps_completed']}/{self.execution_stats['total_steps']}")
        
        if self.execution_stats['warnings']:
            print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.execution_stats['warnings'])}")
        
        if self.execution_stats['errors']:
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(self.execution_stats['errors'])}")
        
        if success:
            print(f"\nüìã –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:")
            print(f"   üê≥ Dockerfile")
            print(f"   üêô docker-compose.yml")
            print(f"   üîê secrets/ (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏)")
            print(f"   üìÑ .env (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
            print(f"   üåê docker/nginx/ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
            
            print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"   1. –ó–∞–º–µ–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ .env")
            print(f"   2. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫–∏ –≤ –ø–∞–ø–∫–µ secrets/")
            print(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker compose ps")
            print(f"   4. –û—Ç–∫—Ä–æ–π—Ç–µ API: http://localhost:8000/docs")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = DockerSetup()
        success = setup.run_comprehensive_setup()
        
        if success:
            print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()