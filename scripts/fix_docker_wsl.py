#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Docker –∏ WSL

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º README.md:
1. –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
2. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
3. –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
4. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: scripts/fix_docker_wsl.py
"""

import os
import sys
import subprocess
import time
import webbrowser
from pathlib import Path
from typing import Dict, List, Optional

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class ComprehensiveDockerFix:
    """
    üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Docker –∏ WSL
    
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
    - –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    - –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
    - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    """
    
    def __init__(self):
        self.project_root = project_root
        self.execution_stats = {
            "platform": "Windows",
            "wsl_version": None,
            "docker_version": None,
            "docker_status": None,
            "steps_completed": 0,
            "total_steps": 6,
            "warnings": [],
            "errors": [],
            "solutions_applied": []
        }
    
    def log_step(self, step_name: str, success: bool = True, warning: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""
        if success:
            self.execution_stats["steps_completed"] += 1
            print(f"‚úÖ {step_name}")
        else:
            self.execution_stats["errors"].append(step_name)
            print(f"‚ùå {step_name}")
            
        if warning:
            self.execution_stats["warnings"].append(warning)
            print(f"‚ö†Ô∏è {warning}")
    
    def analyze_wsl_status(self) -> Dict[str, any]:
        """
        –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è WSL
        
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WSL
        """
        wsl_analysis = {
            "installed": False,
            "version": None,
            "default_distro": None,
            "running_distros": [],
            "needs_update": False,
            "error": None
        }
        
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è WSL...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é WSL
            result = subprocess.run(
                ["wsl", "--version"],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                wsl_analysis["installed"] = True
                version_output = result.stdout.strip()
                wsl_analysis["version"] = version_output
                print(f"‚úÖ WSL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print(f"üìã –í–µ—Ä—Å–∏—è: {version_output}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤
                list_result = subprocess.run(
                    ["wsl", "--list", "--verbose"],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if list_result.returncode == 0:
                    distros_output = list_result.stdout
                    print(f"üìã –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã WSL:")
                    print(distros_output)
                    
                    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã
                    lines = distros_output.split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    for line in lines:
                        if line.strip() and 'Running' in line:
                            wsl_analysis["running_distros"].append(line.strip())
            else:
                wsl_analysis["error"] = result.stderr or "WSL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
                print(f"‚ùå WSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {wsl_analysis['error']}")
            
            self.execution_stats["wsl_version"] = wsl_analysis["version"]
            return wsl_analysis
            
        except subprocess.TimeoutExpired:
            wsl_analysis["error"] = "–¢–∞–π–º–∞—É—Ç WSL –∫–æ–º–∞–Ω–¥—ã"
            print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ WSL")
            return wsl_analysis
        except FileNotFoundError:
            wsl_analysis["error"] = "WSL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
            print("‚ùå WSL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            return wsl_analysis
        except Exception as e:
            wsl_analysis["error"] = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ WSL: {e}")
            return wsl_analysis
    
    def analyze_docker_status(self) -> Dict[str, any]:
        """
        –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker
        
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker
        """
        docker_analysis = {
            "installed": False,
            "version": None,
            "daemon_running": False,
            "desktop_running": False,
            "compose_available": False,
            "compose_version": None,
            "error": None
        }
        
        try:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Docker
            result = subprocess.run(
                ["docker", "--version"],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                docker_analysis["installed"] = True
                docker_analysis["version"] = result.stdout.strip()
                print(f"‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {docker_analysis['version']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker daemon
                daemon_result = subprocess.run(
                    ["docker", "info"],
                    capture_output=True,
                    text=True,
                    timeout=15
                )
                
                if daemon_result.returncode == 0:
                    docker_analysis["daemon_running"] = True
                    print("‚úÖ Docker daemon –∑–∞–ø—É—â–µ–Ω")
                else:
                    docker_analysis["daemon_running"] = False
                    print("‚ùå Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                    print(f"   –î–µ—Ç–∞–ª–∏: {daemon_result.stderr}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
                compose_result = subprocess.run(
                    ["docker", "compose", "version"],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if compose_result.returncode == 0:
                    docker_analysis["compose_available"] = True
                    docker_analysis["compose_version"] = compose_result.stdout.strip()
                    print(f"‚úÖ Docker Compose: {docker_analysis['compose_version']}")
                else:
                    print("‚ö†Ô∏è Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                docker_analysis["error"] = result.stderr or "Docker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
                print(f"‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {docker_analysis['error']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Desktop –ø—Ä–æ—Ü–µ—Å—Å
            try:
                tasklist_result = subprocess.run(
                    ["tasklist", "/FI", "IMAGENAME eq Docker Desktop.exe"],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                
                if "Docker Desktop.exe" in tasklist_result.stdout:
                    docker_analysis["desktop_running"] = True
                    print("‚úÖ Docker Desktop –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
                else:
                    docker_analysis["desktop_running"] = False
                    print("‚ùå Docker Desktop –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            except:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Docker Desktop –ø—Ä–æ—Ü–µ—Å—Å")
            
            self.execution_stats["docker_version"] = docker_analysis["version"]
            self.execution_stats["docker_status"] = "running" if docker_analysis["daemon_running"] else "stopped"
            return docker_analysis
            
        except Exception as e:
            docker_analysis["error"] = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Docker: {e}")
            return docker_analysis
    
    def update_wsl(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WSL —Å –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WSL...")
            print("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º WSL
            result = subprocess.run(
                ["wsl", "--update"],
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç
            )
            
            if result.returncode == 0:
                print("‚úÖ WSL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.stdout}")
                self.execution_stats["solutions_applied"].append("WSL –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WSL: {result.stderr}")
                
                # –ü—Ä–µ–¥–≤–∏–¥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
                if "administrator" in result.stderr.lower() or "access" in result.stderr.lower():
                    print("üí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                    print("   1. –ù–∞–∂–º–∏—Ç–µ Win + X")
                    print("   2. –í—ã–±–µ—Ä–∏—Ç–µ 'Windows PowerShell (Admin)'")
                    print("   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: wsl --update")
                
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WSL –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            print("üí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –≤ —Ñ–æ–Ω–µ")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WSL: {e}")
            return False
    
    def start_docker_desktop(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ Docker Desktop —Å –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ Docker Desktop...")
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ Docker Desktop
            docker_paths = [
                "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe",
                "C:\\Program Files (x86)\\Docker\\Docker\\Docker Desktop.exe",
                os.path.expanduser("~\\AppData\\Local\\Docker\\Docker Desktop.exe")
            ]
            
            docker_exe = None
            for path in docker_paths:
                if os.path.exists(path):
                    docker_exe = path
                    break
            
            if not docker_exe:
                print("‚ùå Docker Desktop –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é –∏–∑ –º–µ–Ω—é –ü—É—Å–∫")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker Desktop
            subprocess.Popen([docker_exe])
            print("‚úÖ Docker Desktop –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Docker daemon...")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ daemon (–¥–æ 2 –º–∏–Ω—É—Ç)
            for i in range(24):  # 24 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ 5 —Å–µ–∫—É–Ω–¥
                time.sleep(5)
                
                try:
                    result = subprocess.run(
                        ["docker", "info"],
                        capture_output=True,
                        text=True,
                        timeout=10
                    )
                    
                    if result.returncode == 0:
                        print("‚úÖ Docker daemon –∑–∞–ø—É—â–µ–Ω!")
                        self.execution_stats["solutions_applied"].append("Docker Desktop –∑–∞–ø—É—â–µ–Ω")
                        return True
                    else:
                        print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/24: Docker daemon –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
                        
                except:
                    print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/24: –û–∂–∏–¥–∞–Ω–∏–µ Docker daemon...")
            
            print("‚ö†Ô∏è Docker daemon –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 2 –º–∏–Ω—É—Ç—ã")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º")
            print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop")
            print("   3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Desktop: {e}")
            return False
    
    def provide_manual_solutions(self, wsl_analysis: Dict, docker_analysis: Dict):
        """
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        print("\nüîß –†–£–ß–ù–´–ï –†–ï–®–ï–ù–ò–Ø –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú:")
        print("=" * 60)
        
        if not wsl_analysis.get("installed", False):
            print("\n‚ùå WSL –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù:")
            print("üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WSL:")
            print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: wsl --install")
            print("   3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä")
            print("   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Ubuntu –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        
        elif wsl_analysis.get("needs_update", False):
            print("\n‚ö†Ô∏è WSL –¢–†–ï–ë–£–ï–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
            print("üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WSL:")
            print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: wsl --update")
            print("   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: wsl --shutdown")
            print("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop")
        
        if not docker_analysis.get("daemon_running", False):
            print("\n‚ùå DOCKER DAEMON –ù–ï –ó–ê–ü–£–©–ï–ù:")
            print("üìã –ó–∞–ø—É—Å–∫ Docker:")
            print("   1. –ù–∞–π–¥–∏—Ç–µ 'Docker Desktop' –≤ –º–µ–Ω—é –ü—É—Å–∫")
            print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop")
            print("   3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–µ–ª–µ–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ")
            print("   4. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä")
        
        print("\nüîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("üìã –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è:")
        print("   1. –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Desktop")
        print("   2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Windows –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")
        print("   3. –í–∫–ª—é—á–µ–Ω–∏–µ Hyper-V –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Windows")
        print("   4. –ü—Ä–æ–≤–µ—Ä–∫–∞ BIOS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        print("\nüí° –û–ë–•–û–î–ù–´–ï –ü–£–¢–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò:")
        print("üìã –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ë–ï–ó Docker:")
        print("   1. python scripts/final_fix.py - –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")
        print("   2. python -m uvicorn src.api.main:app --reload")
        print("   3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs")
        print("   4. Docker –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–∑–∂–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    
    def continue_without_docker(self) -> bool:
        """
        –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Docker
        
        Returns:
            bool: True –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            print("\nüîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ë–ï–ó DOCKER...")
            print("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            
            response = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ Docker? (y/n): ").lower().strip()
            if response != 'y':
                print("‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            final_fix_path = self.project_root / "scripts" / "final_fix.py"
            if final_fix_path.exists():
                print("üöÄ –ó–∞–ø—É—Å–∫ final_fix.py...")
                result = subprocess.run(
                    [sys.executable, str(final_fix_path)],
                    cwd=self.project_root
                )
                return result.returncode == 0
            else:
                print("‚ö†Ô∏è final_fix.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: python -m uvicorn src.api.main:app --reload")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def run_comprehensive_fix(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print("üîß –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DOCKER –ò WSL")
        print("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º README.md")
        print("=" * 70)
        
        # –®–∞–≥ 1: –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        print("\nüîç –≠–¢–ê–ü 1: –í–°–ï–°–¢–û–†–û–ù–ù–ò–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
        wsl_analysis = self.analyze_wsl_status()
        self.log_step("–ê–Ω–∞–ª–∏–∑ WSL —Å–æ—Å—Ç–æ—è–Ω–∏—è", True)
        
        docker_analysis = self.analyze_docker_status()
        self.log_step("–ê–Ω–∞–ª–∏–∑ Docker —Å–æ—Å—Ç–æ—è–Ω–∏—è", True)
        
        # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("\nüèóÔ∏è –≠–¢–ê–ü 2: –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
        
        if not wsl_analysis.get("installed", False):
            print("‚ùå WSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞")
            self.provide_manual_solutions(wsl_analysis, docker_analysis)
            return False
        
        if wsl_analysis.get("error") and "update" in str(wsl_analysis.get("error", "")).lower():
            print("‚ö†Ô∏è WSL —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            if self.update_wsl():
                self.log_step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WSL", True)
            else:
                self.log_step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WSL", False, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        # –®–∞–≥ 3: –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ Docker –ø—Ä–æ–±–ª–µ–º
        print("\nüê≥ –≠–¢–ê–ü 3: –†–ï–®–ï–ù–ò–ï DOCKER –ü–†–û–ë–õ–ï–ú")
        
        if not docker_analysis.get("daemon_running", False):
            if docker_analysis.get("desktop_running", False):
                print("‚ö†Ô∏è Docker Desktop –∑–∞–ø—É—â–µ–Ω, –Ω–æ daemon –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                print("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                time.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            else:
                print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Desktop...")
                if self.start_docker_desktop():
                    self.log_step("–ó–∞–ø—É—Å–∫ Docker Desktop", True)
                else:
                    self.log_step("–ó–∞–ø—É—Å–∫ Docker Desktop", False, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫")
        
        # –®–∞–≥ 4: –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
        print("\nüí° –≠–¢–ê–ü 4: –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ò–ï –†–ï–®–ï–ù–ò–ô")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Docker
        final_docker_check = self.analyze_docker_status()
        
        if final_docker_check.get("daemon_running", False):
            print("üéâ Docker –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python scripts/setup_docker.py")
            self.log_step("Docker –≥–æ—Ç–æ–≤", True)
            return True
        else:
            print("‚ö†Ô∏è Docker –≤—Å–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
            self.provide_manual_solutions(wsl_analysis, final_docker_check)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ Docker
            if self.continue_without_docker():
                self.log_step("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ Docker", True)
                return True
            else:
                self.log_step("–û–±—â–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", False)
                return False
    
    def print_execution_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 70)
        
        print(f"üåç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.execution_stats['platform']}")
        print(f"üìä –®–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.execution_stats['steps_completed']}/{self.execution_stats['total_steps']}")
        
        if self.execution_stats['wsl_version']:
            print(f"üîß WSL: {self.execution_stats['wsl_version']}")
        
        if self.execution_stats['docker_version']:
            print(f"üê≥ Docker: {self.execution_stats['docker_version']}")
        
        if self.execution_stats['docker_status']:
            print(f"‚öôÔ∏è Docker —Å—Ç–∞—Ç—É—Å: {self.execution_stats['docker_status']}")
        
        if self.execution_stats['solutions_applied']:
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            for solution in self.execution_stats['solutions_applied']:
                print(f"   - {solution}")
        
        if self.execution_stats['warnings']:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(self.execution_stats['warnings'])}")
            for warning in self.execution_stats['warnings']:
                print(f"   - {warning}")
        
        if self.execution_stats['errors']:
            print(f"‚ùå –û—à–∏–±–∫–∏: {len(self.execution_stats['errors'])}")
            for error in self.execution_stats['errors']:
                print(f"   - {error}")
        
        print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ï—Å–ª–∏ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç: python scripts/setup_docker.py")
        print("2. –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: python scripts/final_fix.py")
        print("3. API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤"""
    try:
        fix = ComprehensiveDockerFix()
        success = fix.run_comprehensive_fix()
        fix.print_execution_summary()
        
        if success:
            print("\n‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        else:
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û")
            print("üìù –°–ª–µ–¥—É–π—Ç–µ —Ä—É—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()