#!/usr/bin/env python3
"""
üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Avito AI Bot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
4. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Docker
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class LocalDevSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.project_root = project_root
        self.migrations_dir = self.project_root / "migrations"
        self.alembic_ini = self.project_root / "alembic.ini"
        
    def check_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
            python_version = sys.version
            print(f"‚úÖ Python: {python_version.split()[0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                import fastapi
                import uvicorn
                import sqlalchemy
                import alembic
                print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except ImportError as e:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements-dev.txt")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            env_file = self.project_root / ".env"
            if not env_file.exists():
                print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π...")
                self.create_basic_env()
            else:
                print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def create_basic_env(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            env_content = """# üîß –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è Avito AI Bot

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG=true
ENVIRONMENT=development
SECRET_KEY=local-dev-secret-key-not-for-production
JWT_SECRET_KEY=local-dev-jwt-secret-not-for-production
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
DATABASE_URL=sqlite:///./avito_ai.db
TEST_DATABASE_URL=sqlite:///./avito_ai_test.db

# Redis (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ)
REDIS_URL=redis://localhost:6379/0

# API –∫–ª—é—á–∏ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï!)
GEMINI_API_KEY=your-real-gemini-api-key-here
AVITO_CLIENT_ID=your-real-avito-client-id-here
AVITO_CLIENT_SECRET=your-real-avito-client-secret-here

# CORS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000,http://127.0.0.1:8000

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=DEBUG
LOG_FILE_PATH=data/logs/app.log

# –°–µ—Ä–≤–µ—Ä
SERVER_HOST=0.0.0.0
SERVER_PORT=8000
"""
            
            env_file = self.project_root / ".env"
            env_file.write_text(env_content, encoding='utf-8')
            
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            print("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å API –∫–ª—é—á–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {e}")
            return False
    
    def fix_alembic_config(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic"""
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic...")
            
            if not self.alembic_ini.exists():
                print("‚ö†Ô∏è alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = self.alembic_ini.read_text(encoding='utf-8')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if content.count('sqlalchemy.url') > 1:
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                
                # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                fixed_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic –¥–ª—è Avito AI Responder
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

[alembic]
script_location = migrations
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s
timezone = UTC
truncate_slug_length = 40

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ—Ä–µ—Ç—Å—è –∏–∑ env.py
# sqlalchemy.url = 

sqlalchemy.echo = false
sqlalchemy.pool_pre_ping = true
compare_type = true
compare_server_default = true
render_as_batch = true

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters] 
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
"""
                
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                backup_file = self.alembic_ini.with_suffix('.ini.backup')
                backup_file.write_text(content, encoding='utf-8')
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                self.alembic_ini.write_text(fixed_content, encoding='utf-8')
                print("‚úÖ alembic.ini –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (—Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø)")
            else:
                print("‚úÖ alembic.ini –≤ –ø–æ—Ä—è–¥–∫–µ")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è alembic.ini: {e}")
            return False
    
    def clean_migrations(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            if self.migrations_dir.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                required_files = ["env.py", "script.py.mako"]
                missing_files = [f for f in required_files 
                               if not (self.migrations_dir / f).exists()]
                
                if missing_files:
                    print(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_files})")
                    response = input("‚ùì –£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ").lower().strip()
                    if response == 'y':
                        import shutil
                        shutil.rmtree(self.migrations_dir)
                        print("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã")
                    else:
                        print("‚ö†Ô∏è –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å")
                else:
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print("‚ÑπÔ∏è –ü–∞–ø–∫–∞ migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    def init_migrations(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
            result = subprocess.run(
                [sys.executable, "scripts/init_migrations.py"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:")
                print(result.stderr)
                
                # –ü—Ä–æ–±—É–µ–º —Ä—É—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
                return self.manual_migration_init()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return self.manual_migration_init()
    
    def manual_migration_init(self) -> bool:
        """–†—É—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            print("üîß –†—É—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Alembic
            if not self.migrations_dir.exists():
                result = subprocess.run(
                    [sys.executable, "-m", "alembic", "init", "migrations"],
                    cwd=self.project_root,
                    capture_output=True,
                    text=True
                )
                
                if result.returncode != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                    return False
                
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
            result = subprocess.run(
                [sys.executable, "-m", "alembic", "revision", "--autogenerate", 
                 "-m", "Initial migration"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            if result.returncode != 0:
                print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {result.stderr}")
                if "No changes in schema detected" in result.stdout:
                    print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                    return True
                return False
            
            print("‚úÖ –ü–µ—Ä–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def apply_migrations(self) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            print("üìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            result = subprocess.run(
                [sys.executable, "-m", "alembic", "upgrade", "head"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:")
                print(result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    def test_database(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            result = subprocess.run(
                [sys.executable, "scripts/check_database.py"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:")
                print(result.stdout)
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    def start_development_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            print("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", self.project_root)
            print("üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8000")
            print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
            print("\n‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            def open_browser():
                time.sleep(3)
                try:
                    webbrowser.open("http://localhost:8000/docs")
                    print("üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —Å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π")
                except:
                    pass
            
            import threading
            browser_thread = threading.Thread(target=open_browser)
            browser_thread.daemon = True
            browser_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            result = subprocess.run(
                [sys.executable, "-m", "uvicorn", "src.api.main:app", 
                 "--reload", "--host", "0.0.0.0", "--port", "8000"],
                cwd=self.project_root
            )
            
            return True
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def run_full_setup(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Avito AI Bot")
        print("=" * 60)
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.check_environment),
            ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Alembic", self.fix_alembic_config),
            ("–û—á–∏—Å—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π", self.clean_migrations),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π", self.init_migrations),
            ("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", self.apply_migrations),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î", self.test_database),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                if not step_func():
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ: {step_name}")
                    return False
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ '{step_name}': {e}")
                return False
        
        print("\n" + "=" * 60)
        print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ß—Ç–æ –≥–æ—Ç–æ–≤–æ:")
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
        print("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
        return self.start_development_server()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = LocalDevSetup()
        success = setup.run_full_setup()
        
        if success:
            print("\n‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞!")
            sys.exit(0)
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()