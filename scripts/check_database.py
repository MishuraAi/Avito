#!/usr/bin/env python3
"""
üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite/PostgreSQL)
2. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
"""

import os
import sys
from pathlib import Path
import asyncio
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from sqlalchemy import create_engine, text, inspect
    from sqlalchemy.exc import OperationalError, ProgrammingError
    from src.core.config import get_settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements-dev.txt")
    sys.exit(1)


class DatabaseChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.settings = None
        self.engine = None
        
    def load_settings(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        try:
            self.settings = get_settings()
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print(f"üìç DATABASE_URL: {self._mask_url(self.settings.database_url)}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return False
    
    def _mask_url(self, url: str) -> str:
        """–ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        if "://" in url and "@" in url:
            parts = url.split("://")
            if len(parts) == 2:
                protocol = parts[0]
                rest = parts[1]
                if "@" in rest:
                    auth_part, host_part = rest.split("@", 1)
                    if ":" in auth_part:
                        user, _ = auth_part.split(":", 1)
                        return f"{protocol}://{user}:***@{host_part}"
        return url
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.engine = create_engine(self.settings.database_url)
            
            with self.engine.connect() as conn:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
                if "sqlite" in self.settings.database_url.lower():
                    result = conn.execute(text("SELECT sqlite_version()"))
                    version = f"SQLite {result.fetchone()[0]}"
                    db_type = "SQLite"
                elif "postgresql" in self.settings.database_url.lower():
                    result = conn.execute(text("SELECT version()"))
                    version = result.fetchone()[0]
                    db_type = "PostgreSQL"
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –ë–î –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    conn.execute(text("SELECT 1"))
                    version = "Unknown version"
                    db_type = "Database"
                
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {db_type} —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –í–µ—Ä—Å–∏—è: {version}")
            return True
            
        except OperationalError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   {e}")
            print("\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            if "sqlite" in self.settings.database_url.lower():
                print("1. –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î")
                print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î")
                print("3. –î–∏—Å–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")
            else:
                print("1. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                print("3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print("4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def check_database_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –î–ª—è SQLite —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            if "sqlite" in self.settings.database_url.lower():
                with self.engine.connect() as conn:
                    result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table'"))
                    tables = result.fetchall()
                
                print(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞/–¥–æ—Å—Ç—É–ø–Ω–∞")
                if tables:
                    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                else:
                    print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ (–Ω–µ—Ç —Ç–∞–±–ª–∏—Ü)")
                return True
            
            # –î–ª—è PostgreSQL –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ë–î
            else:
                db_url = self.settings.database_url
                db_name = db_url.split("/")[-1].split("?")[0]
                
                with self.engine.connect() as conn:
                    result = conn.execute(text("SELECT current_database()"))
                    current_db = result.fetchone()[0]
                    
                if current_db == db_name:
                    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
                    return True
                else:
                    print(f"‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ '{current_db}', –æ–∂–∏–¥–∞–ª–∏ '{db_name}'")
                    return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def check_user_permissions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –î–ª—è SQLite –Ω–µ—Ç –ø–æ–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            if "sqlite" in self.settings.database_url.lower():
                with self.engine.connect() as conn:
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                    conn.execute(text("""
                        CREATE TEMPORARY TABLE test_permissions (id INTEGER)
                    """))
                    conn.execute(text("DROP TABLE test_permissions"))
                    
                print(f"‚úÖ SQLite: –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å—Ç—å")
                return True
            
            # –î–ª—è PostgreSQL –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ CREATE
            else:
                with self.engine.connect() as conn:
                    result = conn.execute(text("""
                        SELECT has_database_privilege(current_user, current_database(), 'CREATE')
                    """))
                    can_create = result.fetchone()[0]
                    
                    result = conn.execute(text("SELECT current_user"))
                    current_user = result.fetchone()[0]
                    
                if can_create:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{current_user}' –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ CREATE")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{current_user}' –ù–ï –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ CREATE")
                    print("üìù –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞: GRANT ALL PRIVILEGES ON DATABASE db_name TO user_name;")
                    return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
            return False
    
    def check_tables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            inspector = inspect(self.engine)
            tables = inspector.get_table_names()
            
            if tables:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: {len(tables)}")
                for table in sorted(tables):
                    print(f"   - {table}")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã alembic_version
                if 'alembic_version' in tables:
                    with self.engine.connect() as conn:
                        result = conn.execute(text("SELECT version_num FROM alembic_version"))
                        version = result.fetchone()
                        if version:
                            print(f"üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {version[0]}")
                        else:
                            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ alembic_version –ø—É—Å—Ç–∞")
                else:
                    print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ alembic_version –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∏—Å—å)")
            else:
                print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ (—Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
                
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def test_crud_operations(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            with self.engine.connect() as conn:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                if "sqlite" in self.settings.database_url.lower():
                    # SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                    conn.execute(text("""
                        CREATE TEMPORARY TABLE test_table (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            name TEXT,
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                        )
                    """))
                else:
                    # PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                    conn.execute(text("""
                        CREATE TEMPORARY TABLE test_table (
                            id SERIAL PRIMARY KEY,
                            name VARCHAR(50),
                            created_at TIMESTAMP DEFAULT NOW()
                        )
                    """))
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                conn.execute(text("""
                    INSERT INTO test_table (name) VALUES ('test')
                """))
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                result = conn.execute(text("SELECT name FROM test_table WHERE name = 'test'"))
                row = result.fetchone()
                
                if not row:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                conn.execute(text("""
                    UPDATE test_table SET name = 'updated' WHERE name = 'test'
                """))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                result = conn.execute(text("SELECT name FROM test_table WHERE name = 'updated'"))
                updated_row = result.fetchone()
                
                if not updated_row:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                conn.execute(text("DELETE FROM test_table WHERE name = 'updated'"))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                result = conn.execute(text("SELECT COUNT(*) FROM test_table"))
                count = result.fetchone()[0]
                
                if count != 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
                conn.commit()
                
            print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            return False
    
    def run_full_check(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 50)
        
        checks = [
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", self.load_settings),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", self.test_connection),
            ("–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.check_database_exists),
            ("–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.check_user_permissions),
            ("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã", self.check_tables),
            ("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏", self.test_crud_operations),
        ]
        
        results = []
        for name, check_func in checks:
            print(f"\nüîÑ {name}...")
            try:
                result = check_func()
                results.append(result)
                if not result:
                    print(f"‚ùå {name} - –ü–†–û–í–ê–õ")
                    break
            except Exception as e:
                print(f"‚ùå {name} - –û–®–ò–ë–ö–ê: {e}")
                results.append(False)
                break
        
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        
        passed = sum(results)
        total = len(results)
        
        for i, (name, _) in enumerate(checks[:len(results)]):
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if results[i] else "‚ùå –ü–†–û–í–ê–õ"
            print(f"   {name}: {status}")
        
        print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–π: python scripts/init_migrations.py")
            print("2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: uvicorn src.api.main:app --reload")
            return True
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        checker = DatabaseChecker()
        success = checker.run_full_check()
        
        if success:
            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()